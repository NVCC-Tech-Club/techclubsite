{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompressionMethod } from './body-compression-method.mjs';\nimport { CompressionType } from './compression-type.mjs';\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n */\nexport var BodyCompression = /*#__PURE__*/function () {\n  function BodyCompression() {\n    _classCallCheck(this, BodyCompression);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(BodyCompression, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"codec\",\n    value:\n    /**\n     * Compressor library.\n     * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n     */\n    function codec() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n    }\n    /**\n     * Indicates the way the record batch body was compressed\n     */\n  }, {\n    key: \"method\",\n    value: function method() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n    }\n  }], [{\n    key: \"getRootAsBodyCompression\",\n    value: function getRootAsBodyCompression(bb, obj) {\n      return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsBodyCompression\",\n    value: function getSizePrefixedRootAsBodyCompression(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startBodyCompression\",\n    value: function startBodyCompression(builder) {\n      builder.startObject(2);\n    }\n  }, {\n    key: \"addCodec\",\n    value: function addCodec(builder, codec) {\n      builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n    }\n  }, {\n    key: \"addMethod\",\n    value: function addMethod(builder, method) {\n      builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n    }\n  }, {\n    key: \"endBodyCompression\",\n    value: function endBodyCompression(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createBodyCompression\",\n    value: function createBodyCompression(builder, codec, method) {\n      BodyCompression.startBodyCompression(builder);\n      BodyCompression.addCodec(builder, codec);\n      BodyCompression.addMethod(builder, method);\n      return BodyCompression.endBodyCompression(builder);\n    }\n  }]);\n  return BodyCompression;\n}();","map":{"version":3,"names":["flatbuffers","BodyCompressionMethod","CompressionType","BodyCompression","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","codec","offset","__offset","readInt8","LZ4_FRAME","method","BUFFER","getRootAsBodyCompression","obj","readInt32","position","getSizePrefixedRootAsBodyCompression","setPosition","SIZE_PREFIX_LENGTH","startBodyCompression","builder","startObject","addCodec","addFieldInt8","addMethod","endBodyCompression","endObject","createBodyCompression"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\body-compression.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { BodyCompressionMethod } from './body-compression-method.js';\nimport { CompressionType } from './compression-type.js';\n\n\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n */\nexport class BodyCompression {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):BodyCompression {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Compressor library.\n * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n */\ncodec():CompressionType {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n}\n\n/**\n * Indicates the way the record batch body was compressed\n */\nmethod():BodyCompressionMethod {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n}\n\nstatic startBodyCompression(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addCodec(builder:flatbuffers.Builder, codec:CompressionType) {\n  builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n}\n\nstatic addMethod(builder:flatbuffers.Builder, method:BodyCompressionMethod) {\n  builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n}\n\nstatic endBodyCompression(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createBodyCompression(builder:flatbuffers.Builder, codec:CompressionType, method:BodyCompressionMethod):flatbuffers.Offset {\n  BodyCompression.startBodyCompression(builder);\n  BodyCompression.addCodec(builder, codec);\n  BodyCompression.addMethod(builder, method);\n  return BodyCompression.endBodyCompression(builder);\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}