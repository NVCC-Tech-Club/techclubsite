{"ast":null,"code":"import _get from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { makeData } from './data.mjs';\nimport { MapRow, kKeys } from './row/map.mjs';\nimport { strideForType } from './type.mjs';\nimport { createIsValidFunction } from './builder/valid.mjs';\nimport { BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer.mjs';\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * @example\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = makeBuilder({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport var Builder = /*#__PURE__*/function () {\n  /**\n   * Construct a builder with the given Arrow DataType with optional null values,\n   * which will be interpreted as \"null\" when set or appended to the `Builder`.\n   * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n   */\n  function Builder(_ref) {\n    var type = _ref['type'],\n      nulls = _ref['nullValues'];\n    _classCallCheck(this, Builder);\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    this.length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    this.finished = false;\n    this.type = type;\n    this.children = [];\n    this.nullValues = nulls;\n    this.stride = strideForType(type);\n    this._nulls = new BitmapBufferBuilder();\n    if (nulls && nulls.length > 0) {\n      this._isValid = createIsValidFunction(nulls);\n    }\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  _createClass(Builder, [{\n    key: \"toVector\",\n    value:\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    function toVector() {\n      return new Vector([this.flush()]);\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this._nulls.numInvalid;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this.children.length;\n    }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var size = 0;\n      var _offsets = this._offsets,\n        _values = this._values,\n        _nulls = this._nulls,\n        _typeIds = this._typeIds,\n        children = this.children;\n      _offsets && (size += _offsets.byteLength);\n      _values && (size += _values.byteLength);\n      _nulls && (size += _nulls.byteLength);\n      _typeIds && (size += _typeIds.byteLength);\n      return children.reduce(function (size, child) {\n        return size + child.byteLength;\n      }, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      var size = 0;\n      this._offsets && (size += this._offsets.reservedByteLength);\n      this._values && (size += this._values.reservedByteLength);\n      this._nulls && (size += this._nulls.reservedByteLength);\n      this._typeIds && (size += this._typeIds.reservedByteLength);\n      return this.children.reduce(function (size, child) {\n        return size + child.reservedByteLength;\n      }, size);\n    }\n  }, {\n    key: \"valueOffsets\",\n    get: function get() {\n      return this._offsets ? this._offsets.buffer : null;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._values ? this._values.buffer : null;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this._nulls ? this._nulls.buffer : null;\n    }\n  }, {\n    key: \"typeIds\",\n    get: function get() {\n      return this._typeIds ? this._typeIds.buffer : null;\n    }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length, value);\n    }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return this._isValid(value);\n    }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      if (this.setValid(index, this.isValid(value))) {\n        this.setValue(index, value);\n      }\n      return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      this._setValue(this, index, value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, valid) {\n      this.length = this._nulls.set(index, +valid).length;\n      return valid;\n    }\n    // @ts-ignore\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.numChildren);\n      throw new Error(\"Cannot append children to non-nested type \\\"\".concat(this.type, \"\\\"\"));\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var data;\n      var typeIds;\n      var nullBitmap;\n      var valueOffsets;\n      var type = this.type,\n        length = this.length,\n        nullCount = this.nullCount,\n        _typeIds = this._typeIds,\n        _offsets = this._offsets,\n        _values = this._values,\n        _nulls = this._nulls;\n      if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length)) {\n        // Unions\n        // DenseUnions\n        valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length);\n      } else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length)) {\n        // Variable-width primitives (Binary, Utf8), and Lists\n        // Binary, Utf8\n        data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());\n      } else {\n        // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval)\n        data = _values === null || _values === void 0 ? void 0 : _values.flush(length);\n      }\n      if (nullCount > 0) {\n        nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length);\n      }\n      var children = this.children.map(function (child) {\n        return child.flush();\n      });\n      this.clear();\n      return makeData({\n        type: type,\n        length: length,\n        nullCount: nullCount,\n        children: children,\n        'child': children[0],\n        data: data,\n        typeIds: typeIds,\n        nullBitmap: nullBitmap,\n        valueOffsets: valueOffsets\n      });\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.finished = true;\n      var _iterator = _createForOfIteratorHelper(this.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          child.finish();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _a, _b, _c, _d;\n      this.length = 0;\n      (_a = this._nulls) === null || _a === void 0 ? void 0 : _a.clear();\n      (_b = this._values) === null || _b === void 0 ? void 0 : _b.clear();\n      (_c = this._offsets) === null || _c === void 0 ? void 0 : _c.clear();\n      (_d = this._typeIds) === null || _d === void 0 ? void 0 : _d.clear();\n      var _iterator2 = _createForOfIteratorHelper(this.children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          child.clear();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this;\n    }\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n    // @ts-ignore\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(options) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n  }]);\n  return Builder;\n}();\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = function () {\n  return true;\n};\n/** @ignore */\nexport var FixedWidthBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(FixedWidthBuilder, _Builder);\n  var _super = _createSuper(FixedWidthBuilder);\n  function FixedWidthBuilder(opts) {\n    var _this;\n    _classCallCheck(this, FixedWidthBuilder);\n    _this = _super.call(this, opts);\n    _this._values = new DataBufferBuilder(new _this.ArrayType(0), _this.stride);\n    return _this;\n  }\n  _createClass(FixedWidthBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var values = this._values;\n      values.reserve(index - values.length + 1);\n      return _get(_getPrototypeOf(FixedWidthBuilder.prototype), \"setValue\", this).call(this, index, value);\n    }\n  }]);\n  return FixedWidthBuilder;\n}(Builder);\n/** @ignore */\nexport var VariableWidthBuilder = /*#__PURE__*/function (_Builder2) {\n  _inherits(VariableWidthBuilder, _Builder2);\n  var _super2 = _createSuper(VariableWidthBuilder);\n  function VariableWidthBuilder(opts) {\n    var _this2;\n    _classCallCheck(this, VariableWidthBuilder);\n    _this2 = _super2.call(this, opts);\n    _this2._pendingLength = 0;\n    _this2._offsets = new OffsetsBufferBuilder();\n    return _this2;\n  }\n  _createClass(VariableWidthBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var pending = this._pending || (this._pending = new Map());\n      var current = pending.get(index);\n      current && (this._pendingLength -= current.length);\n      this._pendingLength += value instanceof MapRow ? value[kKeys].length : value.length;\n      pending.set(index, value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, isValid) {\n      if (!_get(_getPrototypeOf(VariableWidthBuilder.prototype), \"setValid\", this).call(this, index, isValid)) {\n        (this._pending || (this._pending = new Map())).set(index, undefined);\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._pendingLength = 0;\n      this._pending = undefined;\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"clear\", this).call(this);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this._flush();\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"flush\", this).call(this);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._flush();\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"finish\", this).call(this);\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush() {\n      var pending = this._pending;\n      var pendingLength = this._pendingLength;\n      this._pendingLength = 0;\n      this._pending = undefined;\n      if (pending && pending.size > 0) {\n        this._flushPending(pending, pendingLength);\n      }\n      return this;\n    }\n  }]);\n  return VariableWidthBuilder;\n}(Builder);","map":{"version":3,"names":["Vector","makeData","MapRow","kKeys","strideForType","createIsValidFunction","BitmapBufferBuilder","DataBufferBuilder","OffsetsBufferBuilder","Builder","_ref","type","nulls","_classCallCheck","length","finished","children","nullValues","stride","_nulls","_isValid","_createClass","key","value","toVector","flush","get","ArrayType","numInvalid","size","_offsets","_values","_typeIds","byteLength","reduce","child","reservedLength","reservedByteLength","buffer","append","set","isValid","index","setValid","setValue","_setValue","valid","addChild","name","arguments","undefined","concat","numChildren","Error","getChildAt","data","typeIds","nullBitmap","valueOffsets","nullCount","last","map","clear","finish","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_a","_b","_c","_d","_iterator2","_step2","throughNode","options","throughDOM","prototype","FixedWidthBuilder","_Builder","_inherits","_super","_createSuper","opts","_this","call","values","reserve","_get","_getPrototypeOf","VariableWidthBuilder","_Builder2","_super2","_this2","_pendingLength","pending","_pending","Map","current","_flush","pendingLength","_flushPending"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\builder.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector.js';\nimport { Data, makeData } from './data.js';\nimport { MapRow, kKeys } from './row/map.js';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_,\n} from './type.js';\nimport { createIsValidFunction } from './builder/valid.js';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer.js';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions } | BuilderOptions[];\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * @example\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = makeBuilder({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return new Vector([this.flush()]); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        const { _offsets, _values, _nulls, _typeIds, children } = this;\n        _offsets && (size += _offsets.byteLength);\n        _values && (size += _values.byteLength);\n        _nulls && (size += _nulls.byteLength);\n        _typeIds && (size += _typeIds.byteLength);\n        return children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    declare protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    declare protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    declare protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    declare protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    declare protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    declare protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */\n    public flush(): Data<T> {\n\n        let data;\n        let typeIds;\n        let nullBitmap;\n        let valueOffsets;\n        const { type, length, nullCount, _typeIds, _offsets, _values, _nulls } = this;\n\n        if (typeIds = _typeIds?.flush(length)) { // Unions\n            // DenseUnions\n            valueOffsets = _offsets?.flush(length);\n        } else if (valueOffsets = _offsets?.flush(length)) { // Variable-width primitives (Binary, Utf8), and Lists\n            // Binary, Utf8\n            data = _values?.flush(_offsets.last());\n        } else { // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval)\n            data = _values?.flush(length);\n        }\n\n        if (nullCount > 0) {\n            nullBitmap = _nulls?.flush(length);\n        }\n\n        const children = this.children.map((child) => child.flush());\n\n        this.clear();\n\n        return makeData(<any>{\n            type, length, nullCount,\n            children, 'child': children[0],\n            data, typeIds, nullBitmap, valueOffsets,\n        }) as Data<T>;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        for (const child of this.children) child.finish();\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._nulls?.clear();\n        this._values?.clear();\n        this._offsets?.clear();\n        this._typeIds?.clear();\n        for (const child of this.children) child.clear();\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += (value instanceof MapRow) ? value[kKeys].length : value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,cAAc;AACrC,SAAeC,QAAQ,QAAQ,YAAY;AAC3C,SAASC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAC7C,SACcC,aAAa,QAIpB,YAAY;AACnB,SAASC,qBAAqB,QAAQ,qBAAqB;AAC3D,SAAwBC,mBAAmB,EAAEC,iBAAiB,EAAEC,oBAAoB,QAAQ,sBAAsB;AAYlH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,WAAsBC,OAAO;EAazB;;;;;EAKA,SAAAA,QAAAC,IAAA,EAA2E;IAAA,IAArDC,IAAI,GAAAD,IAAA,CAAZ,MAAM;MAAsBE,KAAK,GAAAF,IAAA,CAAnB,YAAY;IAAAG,eAAA,OAAAJ,OAAA;IAgBxC;;;;IAIO,KAAAK,MAAM,GAAG,CAAC;IACjB;;;;IAIO,KAAAC,QAAQ,GAAG,KAAK;IAxBnB,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACK,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,UAAU,GAAGL,KAAK;IACvB,IAAI,CAACM,MAAM,GAAGd,aAAa,CAACO,IAAI,CAAC;IACjC,IAAI,CAACQ,MAAM,GAAG,IAAIb,mBAAmB,EAAE;IACvC,IAAIM,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACM,QAAQ,GAAGf,qBAAqB,CAACO,KAAK,CAAC;;EAEpD;EAzBA;EACA;EAAAS,YAAA,CAAAZ,OAAA;IAAAa,GAAA;IAAAC,KAAA;IA2DA;;;;IAIO,SAAAC,SAAA,EAAQ;MAAK,OAAO,IAAIxB,MAAM,CAAC,CAAC,IAAI,CAACyB,KAAK,EAAE,CAAC,CAAC;IAAE;EAAC;IAAAH,GAAA;IAAAI,GAAA,EAExD,SAAAA,IAAA,EAAoB;MAAK,OAAO,IAAI,CAACf,IAAI,CAACgB,SAAS;IAAE;EAAC;IAAAL,GAAA;IAAAI,GAAA,EACtD,SAAAA,IAAA,EAAoB;MAAK,OAAO,IAAI,CAACP,MAAM,CAACS,UAAU;IAAE;EAAC;IAAAN,GAAA;IAAAI,GAAA,EACzD,SAAAA,IAAA,EAAsB;MAAK,OAAO,IAAI,CAACV,QAAQ,CAACF,MAAM;IAAE;IAExD;;;EAAA;IAAAQ,GAAA;IAAAI,GAAA,EAGA,SAAAA,IAAA,EAAqB;MACjB,IAAIG,IAAI,GAAG,CAAC;MACZ,IAAQC,QAAQ,GAA0C,IAAI,CAAtDA,QAAQ;QAAEC,OAAO,GAAiC,IAAI,CAA5CA,OAAO;QAAEZ,MAAM,GAAyB,IAAI,CAAnCA,MAAM;QAAEa,QAAQ,GAAe,IAAI,CAA3BA,QAAQ;QAAEhB,QAAQ,GAAK,IAAI,CAAjBA,QAAQ;MACrDc,QAAQ,KAAKD,IAAI,IAAIC,QAAQ,CAACG,UAAU,CAAC;MACzCF,OAAO,KAAKF,IAAI,IAAIE,OAAO,CAACE,UAAU,CAAC;MACvCd,MAAM,KAAKU,IAAI,IAAIV,MAAM,CAACc,UAAU,CAAC;MACrCD,QAAQ,KAAKH,IAAI,IAAIG,QAAQ,CAACC,UAAU,CAAC;MACzC,OAAOjB,QAAQ,CAACkB,MAAM,CAAC,UAACL,IAAI,EAAEM,KAAK;QAAA,OAAKN,IAAI,GAAGM,KAAK,CAACF,UAAU;MAAA,GAAEJ,IAAI,CAAC;IAC1E;IAEA;;;EAAA;IAAAP,GAAA;IAAAI,GAAA,EAGA,SAAAA,IAAA,EAAyB;MACrB,OAAO,IAAI,CAACP,MAAM,CAACiB,cAAc;IACrC;IAEA;;;EAAA;IAAAd,GAAA;IAAAI,GAAA,EAGA,SAAAA,IAAA,EAA6B;MACzB,IAAIG,IAAI,GAAG,CAAC;MACZ,IAAI,CAACC,QAAQ,KAAKD,IAAI,IAAI,IAAI,CAACC,QAAQ,CAACO,kBAAkB,CAAC;MAC3D,IAAI,CAACN,OAAO,KAAKF,IAAI,IAAI,IAAI,CAACE,OAAO,CAACM,kBAAkB,CAAC;MACzD,IAAI,CAAClB,MAAM,KAAKU,IAAI,IAAI,IAAI,CAACV,MAAM,CAACkB,kBAAkB,CAAC;MACvD,IAAI,CAACL,QAAQ,KAAKH,IAAI,IAAI,IAAI,CAACG,QAAQ,CAACK,kBAAkB,CAAC;MAC3D,OAAO,IAAI,CAACrB,QAAQ,CAACkB,MAAM,CAAC,UAACL,IAAI,EAAEM,KAAK;QAAA,OAAKN,IAAI,GAAGM,KAAK,CAACE,kBAAkB;MAAA,GAAER,IAAI,CAAC;IACvF;EAAC;IAAAP,GAAA;IAAAI,GAAA,EAGD,SAAAA,IAAA,EAAuB;MAAK,OAAO,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACQ,MAAM,GAAG,IAAI;IAAE;EAAC;IAAAhB,GAAA;IAAAI,GAAA,EAGjF,SAAAA,IAAA,EAAiB;MAAK,OAAO,IAAI,CAACK,OAAO,GAAG,IAAI,CAACA,OAAO,CAACO,MAAM,GAAG,IAAI;IAAE;EAAC;IAAAhB,GAAA;IAAAI,GAAA,EAGzE,SAAAA,IAAA,EAAqB;MAAK,OAAO,IAAI,CAACP,MAAM,GAAG,IAAI,CAACA,MAAM,CAACmB,MAAM,GAAG,IAAI;IAAE;EAAC;IAAAhB,GAAA;IAAAI,GAAA,EAG3E,SAAAA,IAAA,EAAkB;MAAK,OAAO,IAAI,CAACM,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACM,MAAM,GAAG,IAAI;IAAE;IAK3E;;;;;EAAA;IAAAhB,GAAA;IAAAC,KAAA,EAKO,SAAAgB,OAAOhB,KAA0B;MAAI,OAAO,IAAI,CAACiB,GAAG,CAAC,IAAI,CAAC1B,MAAM,EAAES,KAAK,CAAC;IAAE;IAEjF;;;;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAIO,SAAAkB,QAAQlB,KAA0B;MAAa,OAAO,IAAI,CAACH,QAAQ,CAACG,KAAK,CAAC;IAAE;IAEnF;;;;;;;;;;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAUO,SAAAiB,IAAIE,KAAa,EAAEnB,KAA0B;MAChD,IAAI,IAAI,CAACoB,QAAQ,CAACD,KAAK,EAAE,IAAI,CAACD,OAAO,CAAClB,KAAK,CAAC,CAAC,EAAE;QAC3C,IAAI,CAACqB,QAAQ,CAACF,KAAK,EAAEnB,KAAK,CAAC;;MAE/B,OAAO,IAAI;IACf;IAEA;;;;;;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAMO,SAAAqB,SAASF,KAAa,EAAEnB,KAAkB;MAAI,IAAI,CAACsB,SAAS,CAAC,IAAI,EAAEH,KAAK,EAAEnB,KAAK,CAAC;IAAE;EAAC;IAAAD,GAAA;IAAAC,KAAA,EACnF,SAAAoB,SAASD,KAAa,EAAEI,KAAc;MACzC,IAAI,CAAChC,MAAM,GAAG,IAAI,CAACK,MAAM,CAACqB,GAAG,CAACE,KAAK,EAAE,CAACI,KAAK,CAAC,CAAChC,MAAM;MACnD,OAAOgC,KAAK;IAChB;IAEA;EAAA;IAAAxB,GAAA;IAAAC,KAAA,EACO,SAAAwB,SAASZ,KAAc,EAA8B;MAAA,IAA5Ba,IAAI,GAAAC,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAC,SAAA,GAAAD,SAAA,SAAAE,MAAA,CAAM,IAAI,CAACC,WAAW;MACtD,MAAM,IAAIC,KAAK,gDAAAF,MAAA,CAA+C,IAAI,CAACxC,IAAI,OAAG,CAAC;IAC/E;IAEA;;;;;;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAMO,SAAA+B,WAAqCZ,KAAa;MACrD,OAAO,IAAI,CAAC1B,QAAQ,CAAC0B,KAAK,CAAC,IAAI,IAAI;IACvC;IAEA;;;;;;EAAA;IAAApB,GAAA;IAAAC,KAAA,EAMO,SAAAE,MAAA,EAAK;MAER,IAAI8B,IAAI;MACR,IAAIC,OAAO;MACX,IAAIC,UAAU;MACd,IAAIC,YAAY;MAChB,IAAQ/C,IAAI,GAA6D,IAAI,CAArEA,IAAI;QAAEG,MAAM,GAAqD,IAAI,CAA/DA,MAAM;QAAE6C,SAAS,GAA0C,IAAI,CAAvDA,SAAS;QAAE3B,QAAQ,GAAgC,IAAI,CAA5CA,QAAQ;QAAEF,QAAQ,GAAsB,IAAI,CAAlCA,QAAQ;QAAEC,OAAO,GAAa,IAAI,CAAxBA,OAAO;QAAEZ,MAAM,GAAK,IAAI,CAAfA,MAAM;MAEpE,IAAIqC,OAAO,GAAGxB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEP,KAAK,CAACX,MAAM,CAAC,EAAE;QAAE;QACrC;QACA4C,YAAY,GAAG5B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEL,KAAK,CAACX,MAAM,CAAC;OACzC,MAAM,IAAI4C,YAAY,GAAG5B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEL,KAAK,CAACX,MAAM,CAAC,EAAE;QAAE;QACjD;QACAyC,IAAI,GAAGxB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEN,KAAK,CAACK,QAAQ,CAAC8B,IAAI,EAAE,CAAC;OACzC,MAAM;QAAE;QACLL,IAAI,GAAGxB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEN,KAAK,CAACX,MAAM,CAAC;;MAGjC,IAAI6C,SAAS,GAAG,CAAC,EAAE;QACfF,UAAU,GAAGtC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,KAAK,CAACX,MAAM,CAAC;;MAGtC,IAAME,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC6C,GAAG,CAAC,UAAC1B,KAAK;QAAA,OAAKA,KAAK,CAACV,KAAK,EAAE;MAAA,EAAC;MAE5D,IAAI,CAACqC,KAAK,EAAE;MAEZ,OAAO7D,QAAQ,CAAM;QACjBU,IAAI,EAAJA,IAAI;QAAEG,MAAM,EAANA,MAAM;QAAE6C,SAAS,EAATA,SAAS;QACvB3C,QAAQ,EAARA,QAAQ;QAAE,OAAO,EAAEA,QAAQ,CAAC,CAAC,CAAC;QAC9BuC,IAAI,EAAJA,IAAI;QAAEC,OAAO,EAAPA,OAAO;QAAEC,UAAU,EAAVA,UAAU;QAAEC,YAAY,EAAZA;OAC9B,CAAY;IACjB;IAEA;;;;EAAA;IAAApC,GAAA;IAAAC,KAAA,EAIO,SAAAwC,OAAA,EAAM;MACT,IAAI,CAAChD,QAAQ,GAAG,IAAI;MAAC,IAAAiD,SAAA,GAAAC,0BAAA,CACD,IAAI,CAACjD,QAAQ;QAAAkD,KAAA;MAAA;QAAjC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAmC;UAAA,IAAxBlC,KAAK,GAAA+B,KAAA,CAAA3C,KAAA;UAAmBY,KAAK,CAAC4B,MAAM,EAAE;QAAA;MAAC,SAAAO,GAAA;QAAAN,SAAA,CAAAO,CAAA,CAAAD,GAAA;MAAA;QAAAN,SAAA,CAAAQ,CAAA;MAAA;MAClD,OAAO,IAAI;IACf;IAEA;;;;EAAA;IAAAlD,GAAA;IAAAC,KAAA,EAIO,SAAAuC,MAAA,EAAK;;MACR,IAAI,CAAChD,MAAM,GAAG,CAAC;MACf,CAAA2D,EAAA,OAAI,CAACtD,MAAM,cAAAsD,EAAA,uBAAAA,EAAA,CAAEX,KAAK,EAAE;MACpB,CAAAY,EAAA,OAAI,CAAC3C,OAAO,cAAA2C,EAAA,uBAAAA,EAAA,CAAEZ,KAAK,EAAE;MACrB,CAAAa,EAAA,OAAI,CAAC7C,QAAQ,cAAA6C,EAAA,uBAAAA,EAAA,CAAEb,KAAK,EAAE;MACtB,CAAAc,EAAA,OAAI,CAAC5C,QAAQ,cAAA4C,EAAA,uBAAAA,EAAA,CAAEd,KAAK,EAAE;MAAC,IAAAe,UAAA,GAAAZ,0BAAA,CACH,IAAI,CAACjD,QAAQ;QAAA8D,MAAA;MAAA;QAAjC,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAAT,CAAA,IAAAC,IAAA,GAAmC;UAAA,IAAxBlC,KAAK,GAAA2C,MAAA,CAAAvD,KAAA;UAAmBY,KAAK,CAAC2B,KAAK,EAAE;QAAA;MAAC,SAAAQ,GAAA;QAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;MAAA;QAAAO,UAAA,CAAAL,CAAA;MAAA;MACjD,OAAO,IAAI;IACf;EAAC;IAAAlD,GAAA;IAAAC,KAAA,EAzOM,SAAAwD,YAA0DC,OAAmE;MAChI,MAAM,IAAI3B,KAAK,oDAAkD,CAAC;IACtE;IACA;IACA;EAAA;IAAA/B,GAAA;IAAAC,KAAA,EACO,SAAA0D,WAAyDD,OAAwE;MACpI,MAAM,IAAI3B,KAAK,mDAAiD,CAAC;IACrE;EAAC;EAAA,OAAA5C,OAAA;AAAA;AAqOJA,OAAO,CAACyE,SAAiB,CAACpE,MAAM,GAAG,CAAC;AACpCL,OAAO,CAACyE,SAAiB,CAAChE,MAAM,GAAG,CAAC;AACpCT,OAAO,CAACyE,SAAiB,CAAClE,QAAQ,GAAG,IAAI;AACzCP,OAAO,CAACyE,SAAiB,CAACnE,QAAQ,GAAG,KAAK;AAC1CN,OAAO,CAACyE,SAAiB,CAACjE,UAAU,GAAG,IAAI;AAC3CR,OAAO,CAACyE,SAAiB,CAAC9D,QAAQ,GAAG;EAAA,OAAM,IAAI;AAAA;AAEhD;AACA,WAAsB+D,iBAA8H,0BAAAC,QAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,QAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EAChJ,SAAAA,kBAAYK,IAA8B;IAAA,IAAAC,KAAA;IAAA5E,eAAA,OAAAsE,iBAAA;IACtCM,KAAA,GAAAH,MAAA,CAAAI,IAAA,OAAMF,IAAI;IACVC,KAAA,CAAK1D,OAAO,GAAG,IAAIxB,iBAAiB,CAAC,IAAIkF,KAAA,CAAK9D,SAAS,CAAC,CAAC,CAAC,EAAE8D,KAAA,CAAKvE,MAAM,CAAC;IAAC,OAAAuE,KAAA;EAC7E;EAACpE,YAAA,CAAA8D,iBAAA;IAAA7D,GAAA;IAAAC,KAAA,EACM,SAAAqB,SAASF,KAAa,EAAEnB,KAAkB;MAC7C,IAAMoE,MAAM,GAAG,IAAI,CAAC5D,OAAO;MAC3B4D,MAAM,CAACC,OAAO,CAAClD,KAAK,GAAGiD,MAAM,CAAC7E,MAAM,GAAG,CAAC,CAAC;MACzC,OAAA+E,IAAA,CAAAC,eAAA,CAAAX,iBAAA,CAAAD,SAAA,qBAAAQ,IAAA,OAAsBhD,KAAK,EAAEnB,KAAK;IACtC;EAAC;EAAA,OAAA4D,iBAAA;AAAA,EATuJ1E,OAAiB;AAY7K;AACA,WAAsBsF,oBAAyE,0BAAAC,SAAA;EAAAX,SAAA,CAAAU,oBAAA,EAAAC,SAAA;EAAA,IAAAC,OAAA,GAAAV,YAAA,CAAAQ,oBAAA;EAI3F,SAAAA,qBAAYP,IAA8B;IAAA,IAAAU,MAAA;IAAArF,eAAA,OAAAkF,oBAAA;IACtCG,MAAA,GAAAD,OAAA,CAAAP,IAAA,OAAMF,IAAI;IAJJU,MAAA,CAAAC,cAAc,GAAG,CAAC;IAKxBD,MAAA,CAAKpE,QAAQ,GAAG,IAAItB,oBAAoB,EAAE;IAAC,OAAA0F,MAAA;EAC/C;EAAC7E,YAAA,CAAA0E,oBAAA;IAAAzE,GAAA;IAAAC,KAAA,EACM,SAAAqB,SAASF,KAAa,EAAEnB,KAAkB;MAC7C,IAAM6E,OAAO,GAAG,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAIC,GAAG,EAAE,CAAC;MAC5D,IAAMC,OAAO,GAAGH,OAAO,CAAC1E,GAAG,CAACgB,KAAK,CAAC;MAClC6D,OAAO,KAAK,IAAI,CAACJ,cAAc,IAAII,OAAO,CAACzF,MAAM,CAAC;MAClD,IAAI,CAACqF,cAAc,IAAK5E,KAAK,YAAYrB,MAAM,GAAIqB,KAAK,CAACpB,KAAK,CAAC,CAACW,MAAM,GAAGS,KAAK,CAACT,MAAM;MACrFsF,OAAO,CAAC5D,GAAG,CAACE,KAAK,EAAEnB,KAAK,CAAC;IAC7B;EAAC;IAAAD,GAAA;IAAAC,KAAA,EACM,SAAAoB,SAASD,KAAa,EAAED,OAAgB;MAC3C,IAAI,CAAAoD,IAAA,CAAAC,eAAA,CAAAC,oBAAA,CAAAb,SAAA,qBAAAQ,IAAA,OAAgBhD,KAAK,EAAED,OAAO,CAAC,EAAE;QACjC,CAAC,IAAI,CAAC4D,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAIC,GAAG,EAAE,CAAC,EAAE9D,GAAG,CAACE,KAAK,EAAEQ,SAAS,CAAC;QACpE,OAAO,KAAK;;MAEhB,OAAO,IAAI;IACf;EAAC;IAAA5B,GAAA;IAAAC,KAAA,EACM,SAAAuC,MAAA,EAAK;MACR,IAAI,CAACqC,cAAc,GAAG,CAAC;MACvB,IAAI,CAACE,QAAQ,GAAGnD,SAAS;MACzB,OAAA2C,IAAA,CAAAC,eAAA,CAAAC,oBAAA,CAAAb,SAAA,kBAAAQ,IAAA;IACJ;EAAC;IAAApE,GAAA;IAAAC,KAAA,EACM,SAAAE,MAAA,EAAK;MACR,IAAI,CAAC+E,MAAM,EAAE;MACb,OAAAX,IAAA,CAAAC,eAAA,CAAAC,oBAAA,CAAAb,SAAA,kBAAAQ,IAAA;IACJ;EAAC;IAAApE,GAAA;IAAAC,KAAA,EACM,SAAAwC,OAAA,EAAM;MACT,IAAI,CAACyC,MAAM,EAAE;MACb,OAAAX,IAAA,CAAAC,eAAA,CAAAC,oBAAA,CAAAb,SAAA,mBAAAQ,IAAA;IACJ;EAAC;IAAApE,GAAA;IAAAC,KAAA,EACS,SAAAiF,OAAA,EAAM;MACZ,IAAMJ,OAAO,GAAG,IAAI,CAACC,QAAQ;MAC7B,IAAMI,aAAa,GAAG,IAAI,CAACN,cAAc;MACzC,IAAI,CAACA,cAAc,GAAG,CAAC;MACvB,IAAI,CAACE,QAAQ,GAAGnD,SAAS;MACzB,IAAIkD,OAAO,IAAIA,OAAO,CAACvE,IAAI,GAAG,CAAC,EAAE;QAC7B,IAAI,CAAC6E,aAAa,CAACN,OAAO,EAAEK,aAAa,CAAC;;MAE9C,OAAO,IAAI;IACf;EAAC;EAAA,OAAAV,oBAAA;AAAA,EA5CkGtF,OAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}