{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Type } from './enum.mjs';\nimport { clampRange } from './util/vector.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { Data, makeData } from './data.mjs';\nimport { isChunkedValid, computeChunkOffsets, computeChunkNullCounts, sliceChunks, wrapChunkedCall1, wrapChunkedCall2, wrapChunkedIndexOf } from './util/chunk.mjs';\nimport { BigInt64Array, BigUint64Array } from './util/compat.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.mjs';\nvar visitorsByTypeId = {};\nvar vectorPrototypesByTypeId = {};\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport var Vector = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$iterator) {\n  function Vector(input) {\n    _classCallCheck(this, Vector);\n    var _b, _c, _d;\n    var data = input[0] instanceof Vector ? input.flatMap(function (x) {\n      return x.data;\n    }) : input;\n    if (data.length === 0 || data.some(function (x) {\n      return !(x instanceof Data);\n    })) {\n      throw new TypeError('Vector constructor expects an Array of Data instances.');\n    }\n    var type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;\n    switch (data.length) {\n      case 0:\n        this._offsets = [0];\n        break;\n      case 1:\n        {\n          // special case for unchunked vectors\n          var _visitorsByTypeId$typ = visitorsByTypeId[type.typeId],\n            get = _visitorsByTypeId$typ.get,\n            set = _visitorsByTypeId$typ.set,\n            indexOf = _visitorsByTypeId$typ.indexOf,\n            byteLength = _visitorsByTypeId$typ.byteLength;\n          var unchunkedData = data[0];\n          this.isValid = function (index) {\n            return isChunkedValid(unchunkedData, index);\n          };\n          this.get = function (index) {\n            return get(unchunkedData, index);\n          };\n          this.set = function (index, value) {\n            return set(unchunkedData, index, value);\n          };\n          this.indexOf = function (index) {\n            return indexOf(unchunkedData, index);\n          };\n          this.getByteLength = function (index) {\n            return byteLength(unchunkedData, index);\n          };\n          this._offsets = [0, unchunkedData.length];\n          break;\n        }\n      default:\n        Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n        this._offsets = computeChunkOffsets(data);\n        break;\n    }\n    this.data = data;\n    this.type = type;\n    this.stride = strideForType(type);\n    this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n    this.length = this._offsets[this._offsets.length - 1];\n  }\n  /**\n   * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n   */\n  _createClass(Vector, [{\n    key: \"byteLength\",\n    get: function get() {\n      if (this._byteLength === -1) {\n        this._byteLength = this.data.reduce(function (byteLength, data) {\n          return byteLength + data.byteLength;\n        }, 0);\n      }\n      return this._byteLength;\n    }\n    /**\n     * The number of null elements in this Vector.\n     */\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      if (this._nullCount === -1) {\n        this._nullCount = computeChunkNullCounts(this.data);\n      }\n      return this._nullCount;\n    }\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"\".concat(this.VectorName, \"<\").concat(this.type[Symbol.toStringTag], \">\");\n    }\n    /**\n     * The name of this Vector.\n     */\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"\".concat(Type[this.type.typeId], \"Vector\");\n    }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return false;\n    }\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return null;\n    }\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      return;\n    }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      return -1;\n    }\n  }, {\n    key: \"includes\",\n    value: function includes(element, offset) {\n      return this.indexOf(element, offset) > 0;\n    }\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n  }, {\n    key: \"getByteLength\",\n    value: function getByteLength(index) {\n      return 0;\n    }\n    /**\n     * Iterator for the Vector's elements.\n     */\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return iteratorVisitor.visit(this);\n    }\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      return new Vector(this.data.concat(others.flatMap(function (x) {\n        return x.data;\n      }).flat(Number.POSITIVE_INFINITY)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      return new Vector(clampRange(this, begin, end, function (_ref, begin, end) {\n        var data = _ref.data,\n          _offsets = _ref._offsets;\n        return sliceChunks(data, _offsets, begin, end);\n      }));\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _toConsumableArray(this);\n    }\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var type = this.type,\n        data = this.data,\n        length = this.length,\n        stride = this.stride,\n        ArrayType = this.ArrayType;\n      // Fast case, return subarray if possible\n      switch (type.typeId) {\n        case Type.Int:\n        case Type.Float:\n        case Type.Decimal:\n        case Type.Time:\n        case Type.Timestamp:\n          switch (data.length) {\n            case 0:\n              return new ArrayType();\n            case 1:\n              return data[0].values.subarray(0, length * stride);\n            default:\n              return data.reduce(function (memo, _ref2) {\n                var values = _ref2.values,\n                  chunk_length = _ref2.length;\n                memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                memo.offset += chunk_length * stride;\n                return memo;\n              }, {\n                array: new ArrayType(length * stride),\n                offset: 0\n              }).array;\n          }\n      }\n      // Otherwise if not primitive, slow copy\n      return _toConsumableArray(this);\n    }\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(_toConsumableArray(this).join(','), \"]\");\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n  }, {\n    key: \"getChild\",\n    value: function getChild(name) {\n      var _b;\n      return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex(function (f) {\n        return f.name === name;\n      }));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index > -1 && index < this.numChildren) {\n        return new Vector(this.data.map(function (_ref3) {\n          var children = _ref3.children;\n          return children[index];\n        }));\n      }\n      return null;\n    }\n  }, {\n    key: \"isMemoized\",\n    get: function get() {\n      if (DataType.isDictionary(this.type)) {\n        return this.data[0].dictionary.isMemoized;\n      }\n      return false;\n    }\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n  }, {\n    key: \"memoize\",\n    value: function memoize() {\n      if (DataType.isDictionary(this.type)) {\n        var dictionary = new MemoizedVector(this.data[0].dictionary);\n        var newData = this.data.map(function (data) {\n          var cloned = data.clone();\n          cloned.dictionary = dictionary;\n          return cloned;\n        });\n        return new Vector(newData);\n      }\n      return new MemoizedVector(this);\n    }\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */\n  }, {\n    key: \"unmemoize\",\n    value: function unmemoize() {\n      if (DataType.isDictionary(this.type) && this.isMemoized) {\n        var dictionary = this.data[0].dictionary.unmemoize();\n        var newData = this.data.map(function (data) {\n          var newData = data.clone();\n          newData.dictionary = dictionary;\n          return newData;\n        });\n        return new Vector(newData);\n      }\n      return this;\n    }\n  }]);\n  return Vector;\n}(Symbol.toStringTag, Symbol.iterator);\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nVector[_a] = function (proto) {\n  proto.type = DataType.prototype;\n  proto.data = [];\n  proto.length = 0;\n  proto.stride = 1;\n  proto.numChildren = 0;\n  proto._nullCount = -1;\n  proto._byteLength = -1;\n  proto._offsets = new Uint32Array([0]);\n  proto[Symbol.isConcatSpreadable] = true;\n  var typeIds = Object.keys(Type).map(function (T) {\n    return Type[T];\n  }).filter(function (T) {\n    return typeof T === 'number' && T !== Type.NONE;\n  });\n  var _iterator = _createForOfIteratorHelper(typeIds),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _Object$create;\n      var typeId = _step.value;\n      var get = getVisitor.getVisitFnByTypeId(typeId);\n      var set = setVisitor.getVisitFnByTypeId(typeId);\n      var indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n      var byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n      visitorsByTypeId[typeId] = {\n        get: get,\n        set: set,\n        indexOf: indexOf,\n        byteLength: byteLength\n      };\n      vectorPrototypesByTypeId[typeId] = Object.create(proto, (_Object$create = {}, _defineProperty(_Object$create, 'isValid', {\n        value: wrapChunkedCall1(isChunkedValid)\n      }), _defineProperty(_Object$create, 'get', {\n        value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId))\n      }), _defineProperty(_Object$create, 'set', {\n        value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId))\n      }), _defineProperty(_Object$create, 'indexOf', {\n        value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId))\n      }), _defineProperty(_Object$create, 'getByteLength', {\n        value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId))\n      }), _Object$create));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return 'Vector';\n}(Vector.prototype);\nvar MemoizedVector = /*#__PURE__*/function (_Vector) {\n  _inherits(MemoizedVector, _Vector);\n  var _super = _createSuper(MemoizedVector);\n  function MemoizedVector(vector) {\n    var _this;\n    _classCallCheck(this, MemoizedVector);\n    _this = _super.call(this, vector.data);\n    var get = _this.get;\n    var set = _this.set;\n    var slice = _this.slice;\n    var cache = new Array(_this.length);\n    Object.defineProperty(_assertThisInitialized(_this), 'get', {\n      value: function value(index) {\n        var cachedValue = cache[index];\n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n        var value = get.call(this, index);\n        cache[index] = value;\n        return value;\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), 'set', {\n      value: function value(index, _value) {\n        set.call(this, index, _value);\n        cache[index] = _value;\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), 'slice', {\n      value: function value(begin, end) {\n        return new MemoizedVector(slice.call(_assertThisInitialized(_this), begin, end));\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), 'isMemoized', {\n      value: true\n    });\n    Object.defineProperty(_assertThisInitialized(_this), 'unmemoize', {\n      value: function value() {\n        return new Vector(_this.data);\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), 'memoize', {\n      value: function value() {\n        return _assertThisInitialized(_this);\n      }\n    });\n    return _this;\n  }\n  return _createClass(MemoizedVector);\n}(Vector);\nimport * as dtypes from './type.mjs';\nexport function makeVector(init) {\n  if (init) {\n    if (init instanceof Data) {\n      return new Vector([init]);\n    }\n    if (init instanceof Vector) {\n      return new Vector(init.data);\n    }\n    if (init.type instanceof DataType) {\n      return new Vector([makeData(init)]);\n    }\n    if (Array.isArray(init)) {\n      return new Vector(init.flatMap(function (v) {\n        return unwrapInputs(v);\n      }));\n    }\n    if (ArrayBuffer.isView(init)) {\n      if (init instanceof DataView) {\n        init = new Uint8Array(init.buffer);\n      }\n      var props = {\n        offset: 0,\n        length: init.length,\n        nullCount: 0,\n        data: init\n      };\n      if (init instanceof Int8Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int8()\n        }))]);\n      }\n      if (init instanceof Int16Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int16()\n        }))]);\n      }\n      if (init instanceof Int32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int32()\n        }))]);\n      }\n      if (init instanceof BigInt64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int64()\n        }))]);\n      }\n      if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint8()\n        }))]);\n      }\n      if (init instanceof Uint16Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint16()\n        }))]);\n      }\n      if (init instanceof Uint32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint32()\n        }))]);\n      }\n      if (init instanceof BigUint64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint64()\n        }))]);\n      }\n      if (init instanceof Float32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Float32()\n        }))]);\n      }\n      if (init instanceof Float64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Float64()\n        }))]);\n      }\n      throw new Error('Unrecognized input');\n    }\n  }\n  throw new Error('Unrecognized input');\n}\nfunction unwrapInputs(x) {\n  return x instanceof Data ? [x] : x instanceof Vector ? x.data : makeVector(x).data;\n}","map":{"version":3,"names":["Type","clampRange","DataType","strideForType","Data","makeData","isChunkedValid","computeChunkOffsets","computeChunkNullCounts","sliceChunks","wrapChunkedCall1","wrapChunkedCall2","wrapChunkedIndexOf","BigInt64Array","BigUint64Array","instance","getVisitor","setVisitor","indexOfVisitor","iteratorVisitor","byteLengthVisitor","visitorsByTypeId","vectorPrototypesByTypeId","Vector","_Symbol$toStringTag","_Symbol$iterator","input","_classCallCheck","data","flatMap","x","length","some","TypeError","type","_b","_offsets","_visitorsByTypeId$typ","typeId","get","set","indexOf","byteLength","unchunkedData","isValid","index","value","getByteLength","Object","setPrototypeOf","stride","numChildren","_d","_c","children","_createClass","key","_byteLength","reduce","_nullCount","ArrayType","concat","VectorName","Symbol","toStringTag","element","offset","includes","visit","_len","arguments","others","Array","_key","flat","Number","POSITIVE_INFINITY","slice","begin","end","_ref","toJSON","_toConsumableArray","toArray","Int","Float","Decimal","Time","Timestamp","values","subarray","memo","_ref2","chunk_length","array","toString","join","getChild","name","getChildAt","findIndex","f","map","_ref3","isDictionary","dictionary","isMemoized","memoize","MemoizedVector","newData","cloned","clone","unmemoize","iterator","_a","proto","prototype","Uint32Array","isConcatSpreadable","typeIds","keys","T","filter","NONE","_iterator","_createForOfIteratorHelper","_step","s","n","done","_Object$create","getVisitFnByTypeId","create","_defineProperty","err","e","_Vector","_inherits","_super","_createSuper","vector","_this","call","cache","defineProperty","_assertThisInitialized","cachedValue","undefined","dtypes","makeVector","init","isArray","v","unwrapInputs","ArrayBuffer","isView","DataView","Uint8Array","buffer","props","nullCount","Int8Array","assign","Int8","Int16Array","Int16","Int32Array","Int32","Int64","Uint8ClampedArray","Uint8","Uint16Array","Uint16","Uint32","Uint64","Float32Array","Float32","Float64Array","Float64","Error"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\vector.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type } from './enum.js';\nimport { clampRange } from './util/vector.js';\nimport { DataType, strideForType } from './type.js';\nimport { Data, makeData, DataProps } from './data.js';\nimport { BigIntArray, TypedArray, TypedArrayDataType } from './interfaces.js';\n\nimport {\n    isChunkedValid,\n    computeChunkOffsets,\n    computeChunkNullCounts,\n    sliceChunks,\n    wrapChunkedCall1,\n    wrapChunkedCall2,\n    wrapChunkedIndexOf,\n} from './util/chunk.js';\nimport { BigInt64Array, BigUint64Array } from './util/compat.js';\n\nimport { instance as getVisitor } from './visitor/get.js';\nimport { instance as setVisitor } from './visitor/set.js';\nimport { instance as indexOfVisitor } from './visitor/indexof.js';\nimport { instance as iteratorVisitor } from './visitor/iterator.js';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.js';\n\n// @ts-ignore\nimport type { vectorFromArray } from './factories.js';\n\nexport interface Vector<T extends DataType = any> {\n    ///\n    // Virtual properties for the TypeScript compiler.\n    // These do not exist at runtime.\n    ///\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n     */\n    [Symbol.isConcatSpreadable]: true;\n}\n\nconst visitorsByTypeId = {} as { [typeId: number]: { get: any; set: any; indexOf: any; byteLength: any } };\nconst vectorPrototypesByTypeId = {} as { [typeId: number]: any };\n\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector<T extends DataType = any> {\n\n    constructor(input: readonly (Data<T> | Vector<T>)[]) {\n        const data: Data<T>[] = input[0] instanceof Vector\n            ? (input as Vector<T>[]).flatMap(x => x.data)\n            : input as Data<T>[];\n        if (data.length === 0 || data.some((x) => !(x instanceof Data))) {\n            throw new TypeError('Vector constructor expects an Array of Data instances.');\n        }\n        const type = data[0]?.type;\n        switch (data.length) {\n            case 0: this._offsets = [0]; break;\n            case 1: {\n                // special case for unchunked vectors\n                const { get, set, indexOf, byteLength } = visitorsByTypeId[type.typeId];\n                const unchunkedData = data[0];\n\n                this.isValid = (index: number) => isChunkedValid(unchunkedData, index);\n                this.get = (index: number) => get(unchunkedData, index);\n                this.set = (index: number, value: T) => set(unchunkedData, index, value);\n                this.indexOf = (index: number) => indexOf(unchunkedData, index);\n                this.getByteLength = (index: number) => byteLength(unchunkedData, index);\n                this._offsets = [0, unchunkedData.length];\n                break;\n            }\n            default:\n                Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = computeChunkOffsets(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = strideForType(type);\n        this.numChildren = type.children?.length ?? 0;\n        this.length = this._offsets[this._offsets.length - 1];\n    }\n\n    declare protected _offsets: number[] | Uint32Array;\n    declare protected _nullCount: number;\n    declare protected _byteLength: number;\n\n    /**\n     * The {@link DataType `DataType`} of this Vector.\n     */\n    public declare readonly type: T;\n\n    /**\n     * The primitive {@link Data `Data`} instances for this Vector's elements.\n     */\n    public declare readonly data: ReadonlyArray<Data<T>>;\n\n    /**\n     * The number of elements in this Vector.\n     */\n    public declare readonly length: number;\n\n    /**\n     * The number of primitive values per Vector element.\n     */\n    public declare readonly stride: number;\n\n    /**\n     * The number of child Vectors if this Vector is a nested dtype.\n     */\n    public declare readonly numChildren: number;\n\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */\n    public get byteLength() {\n        if (this._byteLength === -1) {\n            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n        }\n        return this._byteLength;\n    }\n\n    /**\n     * The number of null elements in this Vector.\n     */\n    public get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n    public get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n\n    /**\n     * The name of this Vector.\n     */\n    public get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    public isValid(index: number): boolean { return false; }\n\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    public get(index: number): T['TValue'] | null { return null; }\n\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    public set(index: number, value: T['TValue'] | null): void { return; }\n\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n\n    public includes(element: T['TValue'], offset?: number): boolean { return this.indexOf(element, offset) > 0; }\n\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    public getByteLength(index: number): number { return 0; }\n\n    /**\n     * Iterator for the Vector's elements.\n     */\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iteratorVisitor.visit(this);\n    }\n\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n    public slice(begin?: number, end?: number): Vector<T> {\n        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) =>\n            sliceChunks(data, _offsets, begin, end)\n        ));\n    }\n\n    public toJSON() { return [...this]; }\n\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n    public toArray(): T['TArray'] {\n        const { type, data, length, stride, ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch (type.typeId) {\n            case Type.Int:\n            case Type.Float:\n            case Type.Decimal:\n            case Type.Time:\n            case Type.Timestamp:\n                switch (data.length) {\n                    case 0: return new ArrayType();\n                    case 1: return data[0].values.subarray(0, length * stride);\n                    default: return data.reduce((memo, { values, length: chunk_length }) => {\n                        memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                        memo.offset += chunk_length * stride;\n                        return memo;\n                    }, { array: new ArrayType(length * stride), offset: 0 }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [...this] as T['TArray'];\n    }\n\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n    public toString() {\n        return `[${[...this].join(',')}]`;\n    }\n\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    public getChild<R extends keyof T['TChildren']>(name: R) {\n        return this.getChildAt(this.type.children?.findIndex((f) => f.name === name));\n    }\n\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        if (index > -1 && index < this.numChildren) {\n            return new Vector(this.data.map(({ children }) => children[index] as Data<R>));\n        }\n        return null;\n    }\n\n    public get isMemoized(): boolean {\n        if (DataType.isDictionary(this.type)) {\n            return this.data[0].dictionary!.isMemoized;\n        }\n        return false;\n    }\n\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n    public memoize(): MemoizedVector<T> {\n        if (DataType.isDictionary(this.type)) {\n            const dictionary = new MemoizedVector(this.data[0].dictionary!);\n            const newData = this.data.map((data) => {\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new Vector(newData);\n        }\n        return new MemoizedVector(this);\n    }\n\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */\n    public unmemoize(): Vector<T> {\n        if (DataType.isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary!.unmemoize();\n            const newData = this.data.map((data) => {\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new Vector(newData);\n        }\n        return this;\n    }\n\n    // Initialize this static property via an IIFE so bundlers don't tree-shake\n    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n    protected static [Symbol.toStringTag] = ((proto: Vector) => {\n        (proto as any).type = DataType.prototype;\n        (proto as any).data = [];\n        (proto as any).length = 0;\n        (proto as any).stride = 1;\n        (proto as any).numChildren = 0;\n        (proto as any)._nullCount = -1;\n        (proto as any)._byteLength = -1;\n        (proto as any)._offsets = new Uint32Array([0]);\n        (proto as any)[Symbol.isConcatSpreadable] = true;\n\n        const typeIds: Type[] = Object.keys(Type)\n            .map((T: any) => Type[T] as any)\n            .filter((T: any) => typeof T === 'number' && T !== Type.NONE);\n\n        for (const typeId of typeIds) {\n            const get = getVisitor.getVisitFnByTypeId(typeId);\n            const set = setVisitor.getVisitFnByTypeId(typeId);\n            const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n            const byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n\n            visitorsByTypeId[typeId] = { get, set, indexOf, byteLength };\n            vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n                ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n                ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n                ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n                ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n                ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n            });\n        }\n\n        return 'Vector';\n    })(Vector.prototype);\n}\n\nclass MemoizedVector<T extends DataType = any> extends Vector<T> {\n\n    public constructor(vector: Vector<T>) {\n        super(vector.data);\n\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n\n        const cache = new Array<T['TValue'] | null>(this.length);\n\n        Object.defineProperty(this, 'get', {\n            value(index: number) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) {\n                    return cachedValue;\n                }\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n\n        Object.defineProperty(this, 'set', {\n            value(index: number, value: T['TValue'] | null) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n\n        Object.defineProperty(this, 'slice', {\n            value: (begin?: number, end?: number) => new MemoizedVector(slice.call(this, begin, end))\n        });\n\n        Object.defineProperty(this, 'isMemoized', { value: true });\n\n        Object.defineProperty(this, 'unmemoize', {\n            value: () => new Vector(this.data)\n        });\n\n        Object.defineProperty(this, 'memoize', {\n            value: () => this\n        });\n    }\n}\n\nimport * as dtypes from './type.js';\n\n/**\n * Creates a Vector without data copies.\n *\n * @example\n * ```ts\n * const vector = makeVector(new Int32Array([1, 2, 3]));\n * ```\n */\nexport function makeVector<T extends TypedArray | BigIntArray>(data: T | readonly T[]): Vector<TypedArrayDataType<T>>;\nexport function makeVector<T extends DataView>(data: T | readonly T[]): Vector<dtypes.Int8>;\nexport function makeVector<T extends DataType>(data: Data<T> | readonly Data<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: Vector<T> | readonly Vector<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: DataProps<T> | readonly DataProps<T>[]): Vector<T>;\n\nexport function makeVector(init: any) {\n    if (init) {\n        if (init instanceof Data) { return new Vector([init]); }\n        if (init instanceof Vector) { return new Vector(init.data); }\n        if (init.type instanceof DataType) { return new Vector([makeData(init)]); }\n        if (Array.isArray(init)) {\n            return new Vector(init.flatMap(v => unwrapInputs(v)));\n        }\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) {\n                init = new Uint8Array(init.buffer);\n            }\n            const props = { offset: 0, length: init.length, nullCount: 0, data: init };\n            if (init instanceof Int8Array) { return new Vector([makeData({ ...props, type: new dtypes.Int8 })]); }\n            if (init instanceof Int16Array) { return new Vector([makeData({ ...props, type: new dtypes.Int16 })]); }\n            if (init instanceof Int32Array) { return new Vector([makeData({ ...props, type: new dtypes.Int32 })]); }\n            if (init instanceof BigInt64Array) { return new Vector([makeData({ ...props, type: new dtypes.Int64 })]); }\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) { return new Vector([makeData({ ...props, type: new dtypes.Uint8 })]); }\n            if (init instanceof Uint16Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint16 })]); }\n            if (init instanceof Uint32Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint32 })]); }\n            if (init instanceof BigUint64Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint64 })]); }\n            if (init instanceof Float32Array) { return new Vector([makeData({ ...props, type: new dtypes.Float32 })]); }\n            if (init instanceof Float64Array) { return new Vector([makeData({ ...props, type: new dtypes.Float64 })]); }\n            throw new Error('Unrecognized input');\n        }\n    }\n    throw new Error('Unrecognized input');\n}\n\nfunction unwrapInputs(x: any) {\n    return x instanceof Data ? [x] : (x instanceof Vector ? x.data : makeVector(x).data);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}