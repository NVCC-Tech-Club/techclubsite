{"ast":null,"code":"import ToText from './totext';\nimport parseText from './parsetext';\nimport { RRule } from '../rrule';\nimport { Frequency } from '../types';\nimport ENGLISH from './i18n';\n/* !\n * rrule.js - Library for working with recurrence rules for calendar dates.\n * https://github.com/jakubroztocil/rrule\n *\n * Copyright 2010, Jakub Roztocil and Lars Schoning\n * Licenced under the BSD licence.\n * https://github.com/jakubroztocil/rrule/blob/master/LICENCE\n *\n */\n/**\n *\n * Implementation of RRule.fromText() and RRule::toText().\n *\n *\n * On the client side, this file needs to be included\n * when those functions are used.\n *\n */\n// =============================================================================\n// fromText\n// =============================================================================\n/**\n * Will be able to convert some of the below described rules from\n * text format to a rule object.\n *\n *\n * RULES\n *\n * Every ([n])\n * day(s)\n * | [weekday], ..., (and) [weekday]\n * | weekday(s)\n * | week(s)\n * | month(s)\n * | [month], ..., (and) [month]\n * | year(s)\n *\n *\n * Plus 0, 1, or multiple of these:\n *\n * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]\n *\n * on [weekday], ..., (and) [weekday]\n *\n * on the [monthday], [monthday], ... (and) [monthday] (day of the month)\n *\n * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)\n *\n *\n * Plus 0 or 1 of these:\n *\n * for [n] time(s)\n *\n * until [date]\n *\n * Plus (.)\n *\n *\n * Definitely no supported for parsing:\n *\n * (for year):\n * in week(s) [n], ..., (and) [n]\n *\n * on the [yearday], ..., (and) [n] day of the year\n * on day [yearday], ..., (and) [n]\n *\n *\n * NON-TERMINALS\n *\n * [n]: 1, 2 ..., one, two, three ..\n * [month]: January, February, March, April, May, ... December\n * [weekday]: Monday, ... Sunday\n * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...\n * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..\n * [date]:\n * - [month] (0-31(,) ([year])),\n * - (the) 0-31.(1-12.([year])),\n * - (the) 0-31/(1-12/([year])),\n * - [weekday]\n *\n * [year]: 0000, 0001, ... 01, 02, ..\n *\n * Definitely not supported for parsing:\n *\n * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..\n *\n * @param {String} text\n * @return {Object, Boolean} the rule, or null.\n */\nvar fromText = function (text, language) {\n  if (language === void 0) {\n    language = ENGLISH;\n  }\n  return new RRule(parseText(text, language) || undefined);\n};\nvar common = ['count', 'until', 'interval', 'byweekday', 'bymonthday', 'bymonth'];\nToText.IMPLEMENTED = [];\nToText.IMPLEMENTED[Frequency.HOURLY] = common;\nToText.IMPLEMENTED[Frequency.MINUTELY] = common;\nToText.IMPLEMENTED[Frequency.DAILY] = ['byhour'].concat(common);\nToText.IMPLEMENTED[Frequency.WEEKLY] = common;\nToText.IMPLEMENTED[Frequency.MONTHLY] = common;\nToText.IMPLEMENTED[Frequency.YEARLY] = ['byweekno', 'byyearday'].concat(common);\n// =============================================================================\n// Export\n// =============================================================================\nvar toText = function (rrule, gettext, language, dateFormatter) {\n  return new ToText(rrule, gettext, language, dateFormatter).toString();\n};\nvar isFullyConvertible = ToText.isFullyConvertible;\nexport { fromText, parseText, isFullyConvertible, toText };","map":{"version":3,"names":["ToText","parseText","RRule","Frequency","ENGLISH","fromText","text","language","undefined","common","IMPLEMENTED","HOURLY","MINUTELY","DAILY","concat","WEEKLY","MONTHLY","YEARLY","toText","rrule","gettext","dateFormatter","toString","isFullyConvertible"],"sources":["../../../src/nlp/index.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,MAAkC,MAAM,UAAU;AACzD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,SAAS,QAAQ,UAAU;AACpC,OAAOC,OAAqB,MAAM,QAAQ;AAE1C;;;;;;;;;AAUA;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,IAAMC,QAAQ,GAAG,SAAAA,CAAUC,IAAY,EAAEC,QAA4B;EAA5B,IAAAA,QAAA;IAAAA,QAAA,GAAAH,OAA4B;EAAA;EACnE,OAAO,IAAIF,KAAK,CAACD,SAAS,CAACK,IAAI,EAAEC,QAAQ,CAAC,IAAIC,SAAS,CAAC;AAC1D,CAAC;AAED,IAAMC,MAAM,GAAG,CACb,OAAO,EACP,OAAO,EACP,UAAU,EACV,WAAW,EACX,YAAY,EACZ,SAAS,CACV;AAEDT,MAAM,CAACU,WAAW,GAAG,EAAE;AACvBV,MAAM,CAACU,WAAW,CAACP,SAAS,CAACQ,MAAM,CAAC,GAAGF,MAAM;AAC7CT,MAAM,CAACU,WAAW,CAACP,SAAS,CAACS,QAAQ,CAAC,GAAGH,MAAM;AAC/CT,MAAM,CAACU,WAAW,CAACP,SAAS,CAACU,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;AAC/DT,MAAM,CAACU,WAAW,CAACP,SAAS,CAACY,MAAM,CAAC,GAAGN,MAAM;AAC7CT,MAAM,CAACU,WAAW,CAACP,SAAS,CAACa,OAAO,CAAC,GAAGP,MAAM;AAC9CT,MAAM,CAACU,WAAW,CAACP,SAAS,CAACc,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAACH,MAAM,CAACL,MAAM,CAAC;AAE/E;AACA;AACA;AAEA,IAAMS,MAAM,GAAG,SAAAA,CACbC,KAAY,EACZC,OAAiB,EACjBb,QAAmB,EACnBc,aAA6B;EAE7B,OAAO,IAAIrB,MAAM,CAACmB,KAAK,EAAEC,OAAO,EAAEb,QAAQ,EAAEc,aAAa,CAAC,CAACC,QAAQ,EAAE;AACvE,CAAC;AAEO,IAAAC,kBAAkB,GAAKvB,MAAM,CAAAuB,kBAAX;AAS1B,SAASlB,QAAQ,EAAEJ,SAAS,EAAEsB,kBAAkB,EAAEL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}