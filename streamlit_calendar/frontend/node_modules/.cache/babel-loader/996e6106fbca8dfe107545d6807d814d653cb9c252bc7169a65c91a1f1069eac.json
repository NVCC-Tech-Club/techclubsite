{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(toArrayBufferViewIterator);\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isFlatbuffersByteBuffer, BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */\nvar SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n  var result = chunks[0] ? [chunks[0]] : [];\n  var xOffset, yOffset, xLen, yLen;\n  for (var x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i];\n    // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    var _x = x;\n    xOffset = _x.byteOffset;\n    xLen = _x.byteLength;\n    // continue if the byte ranges of x and y aren't contiguous\n    var _y = y;\n    yOffset = _y.byteOffset;\n    yLen = _y.byteLength;\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n  return result;\n}\n/** @ignore */\nexport function memcpy(target, source) {\n  var targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  var targetByteLength = target.byteLength;\n  var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  var result = collapseContiguousByteRanges(chunks);\n  var byteLength = result.reduce(function (x, b) {\n    return x + b.byteLength;\n  }, 0);\n  var source, sliced, buffer;\n  var offset = 0,\n    index = -1;\n  var length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);\n  for (var n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n/** @ignore */\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  var value = isIteratorResult(input) ? input.value : input;\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n    return value;\n  }\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (isFlatbuffersByteBuffer(value)) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\nexport var toInt8Array = function toInt8Array(input) {\n  return toArrayBufferView(Int8Array, input);\n};\n/** @ignore */\nexport var toInt16Array = function toInt16Array(input) {\n  return toArrayBufferView(Int16Array, input);\n};\n/** @ignore */\nexport var toInt32Array = function toInt32Array(input) {\n  return toArrayBufferView(Int32Array, input);\n};\n/** @ignore */\nexport var toBigInt64Array = function toBigInt64Array(input) {\n  return toArrayBufferView(BigInt64Array, input);\n};\n/** @ignore */\nexport var toUint8Array = function toUint8Array(input) {\n  return toArrayBufferView(Uint8Array, input);\n};\n/** @ignore */\nexport var toUint16Array = function toUint16Array(input) {\n  return toArrayBufferView(Uint16Array, input);\n};\n/** @ignore */\nexport var toUint32Array = function toUint32Array(input) {\n  return toArrayBufferView(Uint32Array, input);\n};\n/** @ignore */\nexport var toBigUint64Array = function toBigUint64Array(input) {\n  return toArrayBufferView(BigUint64Array, input);\n};\n/** @ignore */\nexport var toFloat32Array = function toFloat32Array(input) {\n  return toArrayBufferView(Float32Array, input);\n};\n/** @ignore */\nexport var toFloat64Array = function toFloat64Array(input) {\n  return toArrayBufferView(Float64Array, input);\n};\n/** @ignore */\nexport var toUint8ClampedArray = function toUint8ClampedArray(input) {\n  return toArrayBufferView(Uint8ClampedArray, input);\n};\n/** @ignore */\nvar pump = function pump(iterator) {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\nexport function toArrayBufferViewIterator(ArrayCtor, source) {\n  var wrap, buffers;\n  return _regeneratorRuntime().wrap(function toArrayBufferViewIterator$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        wrap = /*#__PURE__*/_regeneratorRuntime().mark(function wrap(x) {\n          return _regeneratorRuntime().wrap(function wrap$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return x;\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }, wrap);\n        });\n        buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n        return _context3.delegateYield(pump( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(it) {\n          var r;\n          return _regeneratorRuntime().wrap(function _callee$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                r = null;\n              case 1:\n                _context2.t0 = it;\n                _context2.next = 4;\n                return toArrayBufferView(ArrayCtor, r);\n              case 4:\n                _context2.t1 = _context2.sent;\n                r = _context2.t0.next.call(_context2.t0, _context2.t1);\n              case 6:\n                if (!r.done) {\n                  _context2.next = 1;\n                  break;\n                }\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee);\n        })(buffers[Symbol.iterator]())), \"t0\", 3);\n      case 3:\n        return _context3.abrupt(\"return\", new ArrayCtor());\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked);\n}\n/** @ignore */\nexport var toInt8ArrayIterator = function toInt8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int8Array, input);\n};\n/** @ignore */\nexport var toInt16ArrayIterator = function toInt16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int16Array, input);\n};\n/** @ignore */\nexport var toInt32ArrayIterator = function toInt32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int32Array, input);\n};\n/** @ignore */\nexport var toUint8ArrayIterator = function toUint8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8Array, input);\n};\n/** @ignore */\nexport var toUint16ArrayIterator = function toUint16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint16Array, input);\n};\n/** @ignore */\nexport var toUint32ArrayIterator = function toUint32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint32Array, input);\n};\n/** @ignore */\nexport var toFloat32ArrayIterator = function toFloat32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float32Array, input);\n};\n/** @ignore */\nexport var toFloat64ArrayIterator = function toFloat64ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float64Array, input);\n};\n/** @ignore */\nexport var toUint8ClampedArrayIterator = function toUint8ClampedArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\nexport function toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function toArrayBufferViewAsyncIterator_1() {\n    var wrap, emit, buffers;\n    return _regeneratorRuntime().wrap(function toArrayBufferViewAsyncIterator_1$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!isPromise(source)) {\n            _context8.next = 20;\n            break;\n          }\n          _context8.t0 = __await;\n          _context8.t1 = __await;\n          _context8.t2 = __asyncDelegator;\n          _context8.t3 = __asyncValues;\n          _context8.t4 = toArrayBufferViewAsyncIterator;\n          _context8.t5 = ArrayCtor;\n          _context8.next = 9;\n          return __await(source);\n        case 9:\n          _context8.t6 = _context8.sent;\n          _context8.t7 = (0, _context8.t4)(_context8.t5, _context8.t6);\n          _context8.t8 = (0, _context8.t3)(_context8.t7);\n          return _context8.delegateYield((0, _context8.t2)(_context8.t8), \"t9\", 13);\n        case 13:\n          _context8.t10 = _context8.t9;\n          _context8.next = 16;\n          return (0, _context8.t1)(_context8.t10);\n        case 16:\n          _context8.t11 = _context8.sent;\n          _context8.next = 19;\n          return (0, _context8.t0)(_context8.t11);\n        case 19:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 20:\n          wrap = function wrap(x) {\n            return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n              return _regeneratorRuntime().wrap(function _callee2$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.t0 = __await;\n                    _context4.next = 3;\n                    return __await(x);\n                  case 3:\n                    _context4.t1 = _context4.sent;\n                    _context4.next = 6;\n                    return (0, _context4.t0)(_context4.t1);\n                  case 6:\n                    _context4.next = 8;\n                    return _context4.sent;\n                  case 8:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee2);\n            }));\n          };\n          emit = function emit(source) {\n            return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n              return _regeneratorRuntime().wrap(function _callee4$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.t0 = __await;\n                    return _context6.delegateYield(__asyncDelegator(__asyncValues(pump( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(it) {\n                      var r;\n                      return _regeneratorRuntime().wrap(function _callee3$(_context5) {\n                        while (1) switch (_context5.prev = _context5.next) {\n                          case 0:\n                            r = null;\n                          case 1:\n                            _context5.t0 = it;\n                            _context5.next = 4;\n                            return r === null || r === void 0 ? void 0 : r.value;\n                          case 4:\n                            _context5.t1 = _context5.sent;\n                            r = _context5.t0.next.call(_context5.t0, _context5.t1);\n                          case 6:\n                            if (!r.done) {\n                              _context5.next = 1;\n                              break;\n                            }\n                          case 7:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }, _callee3);\n                    })(source[Symbol.iterator]())))), \"t1\", 2);\n                  case 2:\n                    _context6.t2 = _context6.t1;\n                    _context6.next = 5;\n                    return (0, _context6.t0)(_context6.t2);\n                  case 5:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee4);\n            }));\n          };\n          buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n          : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n          : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n          : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n          : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n          : source; // otherwise if AsyncIterable, use it\n          _context8.t12 = __await;\n          return _context8.delegateYield(__asyncDelegator(__asyncValues(pump(function (it) {\n            return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n              var r;\n              return _regeneratorRuntime().wrap(function _callee5$(_context7) {\n                while (1) switch (_context7.prev = _context7.next) {\n                  case 0:\n                    r = null;\n                  case 1:\n                    _context7.t0 = __await;\n                    _context7.t1 = it;\n                    _context7.next = 5;\n                    return __await(toArrayBufferView(ArrayCtor, r));\n                  case 5:\n                    _context7.next = 7;\n                    return _context7.sent;\n                  case 7:\n                    _context7.t2 = _context7.sent;\n                    _context7.t3 = _context7.t1.next.call(_context7.t1, _context7.t2);\n                    _context7.next = 11;\n                    return (0, _context7.t0)(_context7.t3);\n                  case 11:\n                    r = _context7.sent;\n                  case 12:\n                    if (!r.done) {\n                      _context7.next = 1;\n                      break;\n                    }\n                  case 13:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }, _callee5);\n            }));\n          }(buffers[Symbol.asyncIterator]())))), \"t13\", 25);\n        case 25:\n          _context8.t14 = _context8.t13;\n          _context8.next = 28;\n          return (0, _context8.t12)(_context8.t14);\n        case 28:\n          _context8.next = 30;\n          return __await(new ArrayCtor());\n        case 30:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 31:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, toArrayBufferViewAsyncIterator_1);\n  }));\n}\n/** @ignore */\nexport var toInt8ArrayAsyncIterator = function toInt8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int8Array, input);\n};\n/** @ignore */\nexport var toInt16ArrayAsyncIterator = function toInt16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int16Array, input);\n};\n/** @ignore */\nexport var toInt32ArrayAsyncIterator = function toInt32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int32Array, input);\n};\n/** @ignore */\nexport var toUint8ArrayAsyncIterator = function toUint8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8Array, input);\n};\n/** @ignore */\nexport var toUint16ArrayAsyncIterator = function toUint16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint16Array, input);\n};\n/** @ignore */\nexport var toUint32ArrayAsyncIterator = function toUint32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint32Array, input);\n};\n/** @ignore */\nexport var toFloat32ArrayAsyncIterator = function toFloat32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float32Array, input);\n};\n/** @ignore */\nexport var toFloat64ArrayAsyncIterator = function toFloat64ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float64Array, input);\n};\n/** @ignore */\nexport var toUint8ClampedArrayAsyncIterator = function toUint8ClampedArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n    for (var i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n  return valueOffsets;\n}\n/** @ignore */\nexport function compareArrayLike(a, b) {\n  var i = 0;\n  var n = a.length;\n  if (n !== b.length) {\n    return false;\n  }\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n  return true;\n}","map":{"version":3,"names":["toArrayBufferViewIterator","encodeUtf8","isPromise","isIterable","isAsyncIterable","isIteratorResult","isFlatbuffersByteBuffer","BigInt64Array","BigUint64Array","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","collapseContiguousByteRanges","chunks","result","xOffset","yOffset","xLen","yLen","x","y","i","j","n","length","buffer","byteOffset","_x","byteLength","_y","Uint8Array","memcpy","target","source","targetByteOffset","arguments","undefined","sourceByteLength","targetByteLength","dst","src","Math","min","set","joinUint8Arrays","size","reduce","b","sliced","offset","index","Number","POSITIVE_INFINITY","subarray","slice","toArrayBufferView","ArrayBufferViewCtor","input","value","bytes","isView","from","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","Int32Array","toBigInt64Array","toUint8Array","toUint16Array","Uint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","Float32Array","toFloat64Array","Float64Array","toUint8ClampedArray","Uint8ClampedArray","pump","iterator","next","ArrayCtor","wrap","buffers","_regeneratorRuntime","toArrayBufferViewIterator$","_context3","prev","mark","wrap$","_context","stop","delegateYield","_callee","it","r","_callee$","_context2","t0","t1","sent","call","done","Symbol","abrupt","_marked","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","_context8","__await","t2","__asyncDelegator","t3","__asyncValues","t4","t5","t6","t7","t8","t10","t9","t11","__asyncGenerator","_callee2","_callee2$","_context4","emit","_context6","_callee3","_callee3$","_context5","_callee4","t12","_context7","_callee5","asyncIterator","t14","t13","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","a"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\util\\buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { TypedArray, TypedArrayConstructor, BigIntArrayConstructor } from '../interfaces.js';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isFlatbuffersByteBuffer, BigInt64Array, BigUint64Array } from './compat.js';\nimport { ByteBuffer } from 'flatbuffers';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    const result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    const result = collapseContiguousByteRanges(chunks);\n    const byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1;\n    const length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);\n    for (const n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined |\n    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n    ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined>;\n\n/** @ignore */\nexport function toArrayBufferView<\n    T extends TypedArrayConstructor<any> | BigIntArrayConstructor<any>\n>(ArrayBufferViewCtor: any, input: ArrayBufferViewInput): InstanceType<T> {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (isFlatbuffersByteBuffer(value)) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : (value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT));\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n        (typeof source === 'string') ? wrap(source)\n            : (ArrayBuffer.isView(source)) ? wrap(source)\n                : (source instanceof ArrayBuffer) ? wrap(source)\n                    : (source instanceof SharedArrayBuf) ? wrap(source)\n                        : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it: Iterator<ArrayBufferViewInput, any, number | undefined>): Generator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any>null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncGenerator<T, T, number | undefined> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function* (it: Iterator<any>) {\n            let r: IteratorResult<any> = <any>null;\n            do {\n                r = it.next(yield r?.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                    : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                        : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                            : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it: AsyncIterator<ArrayBufferViewInput, any, number | undefined>): AsyncGenerator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any>null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0;\n    const n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}