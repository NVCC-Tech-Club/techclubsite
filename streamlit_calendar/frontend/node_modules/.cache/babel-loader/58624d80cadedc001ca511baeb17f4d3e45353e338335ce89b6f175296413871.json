{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n */\nexport var Decimal = /*#__PURE__*/function () {\n  function Decimal() {\n    _classCallCheck(this, Decimal);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(Decimal, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"precision\",\n    value:\n    /**\n     * Total number of decimal digits\n     */\n    function precision() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of digits after the decimal point \".\"\n     */\n  }, {\n    key: \"scale\",\n    value: function scale() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of bits per value. The only accepted widths are 128 and 256.\n     * We use bitWidth for consistency with Int::bitWidth.\n     */\n  }, {\n    key: \"bitWidth\",\n    value: function bitWidth() {\n      var offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;\n    }\n  }], [{\n    key: \"getRootAsDecimal\",\n    value: function getRootAsDecimal(bb, obj) {\n      return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsDecimal\",\n    value: function getSizePrefixedRootAsDecimal(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startDecimal\",\n    value: function startDecimal(builder) {\n      builder.startObject(3);\n    }\n  }, {\n    key: \"addPrecision\",\n    value: function addPrecision(builder, precision) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n  }, {\n    key: \"addScale\",\n    value: function addScale(builder, scale) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n  }, {\n    key: \"addBitWidth\",\n    value: function addBitWidth(builder, bitWidth) {\n      builder.addFieldInt32(2, bitWidth, 128);\n    }\n  }, {\n    key: \"endDecimal\",\n    value: function endDecimal(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createDecimal\",\n    value: function createDecimal(builder, precision, scale, bitWidth) {\n      Decimal.startDecimal(builder);\n      Decimal.addPrecision(builder, precision);\n      Decimal.addScale(builder, scale);\n      Decimal.addBitWidth(builder, bitWidth);\n      return Decimal.endDecimal(builder);\n    }\n  }]);\n  return Decimal;\n}();","map":{"version":3,"names":["flatbuffers","Decimal","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","precision","offset","__offset","readInt32","scale","bitWidth","getRootAsDecimal","obj","position","getSizePrefixedRootAsDecimal","setPosition","SIZE_PREFIX_LENGTH","startDecimal","builder","startObject","addPrecision","addFieldInt32","addScale","addBitWidth","endDecimal","endObject","createDecimal"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\decimal.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n */\nexport class Decimal {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Decimal {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Total number of decimal digits\n */\nprecision():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\n/**\n * Number of digits after the decimal point \".\"\n */\nscale():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\n/**\n * Number of bits per value. The only accepted widths are 128 and 256.\n * We use bitWidth for consistency with Int::bitWidth.\n */\nbitWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 128;\n}\n\nstatic startDecimal(builder:flatbuffers.Builder) {\n  builder.startObject(3);\n}\n\nstatic addPrecision(builder:flatbuffers.Builder, precision:number) {\n  builder.addFieldInt32(0, precision, 0);\n}\n\nstatic addScale(builder:flatbuffers.Builder, scale:number) {\n  builder.addFieldInt32(1, scale, 0);\n}\n\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\n  builder.addFieldInt32(2, bitWidth, 128);\n}\n\nstatic endDecimal(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createDecimal(builder:flatbuffers.Builder, precision:number, scale:number, bitWidth:number):flatbuffers.Offset {\n  Decimal.startDecimal(builder);\n  Decimal.addPrecision(builder, precision);\n  Decimal.addScale(builder, scale);\n  Decimal.addBitWidth(builder, bitWidth);\n  return Decimal.endDecimal(builder);\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}