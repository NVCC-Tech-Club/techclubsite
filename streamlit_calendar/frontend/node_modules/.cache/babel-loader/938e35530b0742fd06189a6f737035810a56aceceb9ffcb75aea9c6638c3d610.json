{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\n * Time is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since midnight, stored in either of four units: seconds,\n * milliseconds, microseconds or nanoseconds.\n *\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\n * * SECOND and MILLISECOND: 32 bits\n * * MICROSECOND and NANOSECOND: 64 bits\n *\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\n * (exclusive), adjusted for the time unit (for example, up to 86400000\n * exclusive for the MILLISECOND unit).\n * This definition doesn't allow for leap seconds. Time values from\n * measurements with leap seconds will need to be corrected when ingesting\n * into Arrow (for example by replacing the value 86400 with 86399).\n */\nexport var Time = /*#__PURE__*/function () {\n  function Time() {\n    _classCallCheck(this, Time);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(Time, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"unit\",\n    value: function unit() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n    }\n  }, {\n    key: \"bitWidth\",\n    value: function bitWidth() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n  }], [{\n    key: \"getRootAsTime\",\n    value: function getRootAsTime(bb, obj) {\n      return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsTime\",\n    value: function getSizePrefixedRootAsTime(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startTime\",\n    value: function startTime(builder) {\n      builder.startObject(2);\n    }\n  }, {\n    key: \"addUnit\",\n    value: function addUnit(builder, unit) {\n      builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n  }, {\n    key: \"addBitWidth\",\n    value: function addBitWidth(builder, bitWidth) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n  }, {\n    key: \"endTime\",\n    value: function endTime(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createTime\",\n    value: function createTime(builder, unit, bitWidth) {\n      Time.startTime(builder);\n      Time.addUnit(builder, unit);\n      Time.addBitWidth(builder, bitWidth);\n      return Time.endTime(builder);\n    }\n  }]);\n  return Time;\n}();","map":{"version":3,"names":["flatbuffers","TimeUnit","Time","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","unit","offset","__offset","readInt16","MILLISECOND","bitWidth","readInt32","getRootAsTime","obj","position","getSizePrefixedRootAsTime","setPosition","SIZE_PREFIX_LENGTH","startTime","builder","startObject","addUnit","addFieldInt16","addBitWidth","addFieldInt32","endTime","endObject","createTime"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\time.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { TimeUnit } from './time-unit.js';\n\n\n/**\n * Time is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since midnight, stored in either of four units: seconds,\n * milliseconds, microseconds or nanoseconds.\n *\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\n * * SECOND and MILLISECOND: 32 bits\n * * MICROSECOND and NANOSECOND: 64 bits\n *\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\n * (exclusive), adjusted for the time unit (for example, up to 86400000\n * exclusive for the MILLISECOND unit).\n * This definition doesn't allow for leap seconds. Time values from\n * measurements with leap seconds will need to be corrected when ingesting\n * into Arrow (for example by replacing the value 86400 with 86399).\n */\nexport class Time {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Time {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nunit():TimeUnit {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n}\n\nbitWidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n}\n\nstatic startTime(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\n  builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n}\n\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\n  builder.addFieldInt32(1, bitWidth, 32);\n}\n\nstatic endTime(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createTime(builder:flatbuffers.Builder, unit:TimeUnit, bitWidth:number):flatbuffers.Offset {\n  Time.startTime(builder);\n  Time.addUnit(builder, unit);\n  Time.addBitWidth(builder, bitWidth);\n  return Time.endTime(builder);\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}