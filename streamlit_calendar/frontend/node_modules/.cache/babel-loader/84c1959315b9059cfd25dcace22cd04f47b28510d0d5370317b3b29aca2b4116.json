{"ast":null,"code":"import React, { Component, createRef, PureComponent } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { Calendar } from '@fullcalendar/core';\nimport { CustomRenderingStore } from '@fullcalendar/core/internal';\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0]);\nconst syncRenderingByDefault = reactMajorVersion < 18;\nexport default class FullCalendar extends Component {\n  constructor() {\n    super(...arguments);\n    this.elRef = createRef();\n    this.isUpdating = false;\n    this.isUnmounting = false;\n    this.state = {\n      customRenderingMap: new Map()\n    };\n    this.requestResize = () => {\n      if (!this.isUnmounting) {\n        this.cancelResize();\n        this.resizeId = requestAnimationFrame(() => {\n          this.doResize();\n        });\n      }\n    };\n  }\n  render() {\n    const customRenderingNodes = [];\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      customRenderingNodes.push(React.createElement(CustomRenderingComponent, {\n        key: customRendering.id,\n        customRendering: customRendering\n      }));\n    }\n    return React.createElement(\"div\", {\n      ref: this.elRef\n    }, customRenderingNodes);\n  }\n  componentDidMount() {\n    // reset b/c react strict-mode calls componentWillUnmount/componentDidMount\n    this.isUnmounting = false;\n    const customRenderingStore = new CustomRenderingStore();\n    this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);\n    this.calendar = new Calendar(this.elRef.current, Object.assign(Object.assign({}, this.props), {\n      handleCustomRendering: this.handleCustomRendering\n    }));\n    this.calendar.render();\n    // attaching with .on() will cause this to fire AFTER internal preact rendering did flushSync\n    this.calendar.on('_beforeprint', () => {\n      flushSync(() => {\n        // our `customRenderingMap` state will be flushed at this point\n      });\n    });\n    let lastRequestTimestamp;\n    customRenderingStore.subscribe(customRenderingMap => {\n      const requestTimestamp = Date.now();\n      const isMounting = !lastRequestTimestamp;\n      const runFunc =\n      // don't call flushSync if React version already does sync rendering by default\n      // guards against fatal errors:\n      // https://github.com/fullcalendar/fullcalendar/issues/7448\n      syncRenderingByDefault ||\n      //\n      isMounting || this.isUpdating || this.isUnmounting || requestTimestamp - lastRequestTimestamp < 100 // rerendering frequently\n      ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n      : flushSync; // guaranteed sync rendering\n      runFunc(() => {\n        this.setState({\n          customRenderingMap\n        }, () => {\n          lastRequestTimestamp = requestTimestamp;\n          if (isMounting) {\n            this.doResize();\n          } else {\n            this.requestResize();\n          }\n        });\n      });\n    });\n  }\n  componentDidUpdate() {\n    this.isUpdating = true;\n    this.calendar.resetOptions(Object.assign(Object.assign({}, this.props), {\n      handleCustomRendering: this.handleCustomRendering\n    }));\n    this.isUpdating = false;\n  }\n  componentWillUnmount() {\n    this.isUnmounting = true;\n    this.cancelResize();\n    this.calendar.destroy();\n  }\n  doResize() {\n    this.calendar.updateSize();\n  }\n  cancelResize() {\n    if (this.resizeId !== undefined) {\n      cancelAnimationFrame(this.resizeId);\n      this.resizeId = undefined;\n    }\n  }\n  getApi() {\n    return this.calendar;\n  }\n}\nFullCalendar.act = runNow; // DEPRECATED. Not leveraged anymore\nclass CustomRenderingComponent extends PureComponent {\n  render() {\n    const {\n      customRendering\n    } = this.props;\n    const {\n      generatorMeta\n    } = customRendering;\n    const vnode = typeof generatorMeta === 'function' ? generatorMeta(customRendering.renderProps) : generatorMeta;\n    return createPortal(vnode, customRendering.containerEl);\n  }\n}\n// Util\n// -------------------------------------------------------------------------------------------------\nfunction runNow(f) {\n  f();\n}","map":{"version":3,"names":["React","Component","createRef","PureComponent","createPortal","flushSync","Calendar","CustomRenderingStore","reactMajorVersion","parseInt","String","version","split","syncRenderingByDefault","FullCalendar","constructor","elRef","isUpdating","isUnmounting","state","customRenderingMap","Map","requestResize","cancelResize","resizeId","requestAnimationFrame","doResize","render","customRenderingNodes","customRendering","values","push","createElement","CustomRenderingComponent","key","id","ref","componentDidMount","customRenderingStore","handleCustomRendering","handle","bind","calendar","current","Object","assign","props","on","lastRequestTimestamp","subscribe","requestTimestamp","Date","now","isMounting","runFunc","runNow","setState","componentDidUpdate","resetOptions","componentWillUnmount","destroy","updateSize","undefined","cancelAnimationFrame","getApi","act","generatorMeta","vnode","renderProps","containerEl","f"],"sources":["C:\\Users\\erden\\Videos\\FInals\\New folder\\streamlit-calendar\\streamlit_calendar\\frontend\\node_modules\\@fullcalendar\\react\\src\\index.tsx"],"sourcesContent":["import React, { Component, createRef, PureComponent } from 'react'\nimport { createPortal, flushSync } from 'react-dom'\nimport {\n  CalendarOptions,\n  CalendarApi,\n  Calendar,\n} from '@fullcalendar/core'\nimport {\n  CustomRendering,\n  CustomRenderingStore,\n} from '@fullcalendar/core/internal'\n\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0])\nconst syncRenderingByDefault = reactMajorVersion < 18\n\ninterface CalendarState {\n  customRenderingMap: Map<string, CustomRendering<any>>\n}\n\nexport default class FullCalendar extends Component<CalendarOptions, CalendarState> {\n  static act = runNow // DEPRECATED. Not leveraged anymore\n\n  private elRef = createRef<HTMLDivElement>()\n  private calendar: Calendar\n  private handleCustomRendering: (customRendering: CustomRendering<any>) => void\n  private resizeId: number | undefined\n  private isUpdating = false\n  private isUnmounting = false\n\n  state: CalendarState = {\n    customRenderingMap: new Map<string, CustomRendering<any>>()\n  }\n\n  render() {\n    const customRenderingNodes: JSX.Element[] = []\n\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      customRenderingNodes.push(\n        <CustomRenderingComponent\n          key={customRendering.id}\n          customRendering={customRendering}\n        />\n      )\n    }\n\n    return (\n      <div ref={this.elRef}>\n        {customRenderingNodes}\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    // reset b/c react strict-mode calls componentWillUnmount/componentDidMount\n    this.isUnmounting = false\n\n    const customRenderingStore = new CustomRenderingStore<unknown>()\n    this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore)\n\n    this.calendar = new Calendar(this.elRef.current, {\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.calendar.render()\n\n    // attaching with .on() will cause this to fire AFTER internal preact rendering did flushSync\n    this.calendar.on('_beforeprint', () => {\n      flushSync(() => {\n        // our `customRenderingMap` state will be flushed at this point\n      })\n    })\n\n    let lastRequestTimestamp: number | undefined\n\n    customRenderingStore.subscribe((customRenderingMap) => {\n      const requestTimestamp = Date.now()\n      const isMounting = !lastRequestTimestamp\n      const runFunc = (\n        // don't call flushSync if React version already does sync rendering by default\n        // guards against fatal errors:\n        // https://github.com/fullcalendar/fullcalendar/issues/7448\n        syncRenderingByDefault ||\n        //\n        isMounting ||\n        this.isUpdating ||\n        this.isUnmounting ||\n        (requestTimestamp - lastRequestTimestamp) < 100 // rerendering frequently\n      ) ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n        : flushSync // guaranteed sync rendering\n\n      runFunc(() => {\n        this.setState({ customRenderingMap }, () => {\n          lastRequestTimestamp = requestTimestamp\n          if (isMounting) {\n            this.doResize()\n          } else {\n            this.requestResize()\n          }\n        })\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    this.isUpdating = true\n    this.calendar.resetOptions({\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.isUpdating = false\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true\n    this.cancelResize()\n    this.calendar.destroy()\n  }\n\n  requestResize = () => {\n    if (!this.isUnmounting) {\n      this.cancelResize()\n      this.resizeId = requestAnimationFrame(() => {\n        this.doResize()\n      })\n    }\n  }\n\n  doResize() {\n    this.calendar.updateSize()\n  }\n\n  cancelResize() {\n    if (this.resizeId !== undefined) {\n      cancelAnimationFrame(this.resizeId)\n      this.resizeId = undefined\n    }\n  }\n\n  getApi(): CalendarApi {\n    return this.calendar\n  }\n}\n\n// Custom Rendering\n// -------------------------------------------------------------------------------------------------\n\ninterface CustomRenderingComponentProps {\n  customRendering: CustomRendering<any>\n}\n\nclass CustomRenderingComponent extends PureComponent<CustomRenderingComponentProps> {\n  render() {\n    const { customRendering } = this.props\n    const { generatorMeta } = customRendering\n    const vnode = typeof generatorMeta === 'function' ?\n      generatorMeta(customRendering.renderProps) :\n      generatorMeta\n\n    return createPortal(vnode, customRendering.containerEl)\n  }\n}\n\n// Util\n// -------------------------------------------------------------------------------------------------\n\nfunction runNow(f: () => void): void {\n  f()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}