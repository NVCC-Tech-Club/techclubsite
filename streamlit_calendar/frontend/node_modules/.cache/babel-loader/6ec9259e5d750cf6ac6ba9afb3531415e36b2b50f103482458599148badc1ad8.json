{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompression } from './body-compression.mjs';\nimport { Buffer } from './buffer.mjs';\nimport { FieldNode } from './field-node.mjs';\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n */\nexport var RecordBatch = /*#__PURE__*/function () {\n  function RecordBatch() {\n    _classCallCheck(this, RecordBatch);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(RecordBatch, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"length\",\n    value:\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     */\n    function length() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     */\n  }, {\n    key: \"nodes\",\n    value: function nodes(index, obj) {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n  }, {\n    key: \"nodesLength\",\n    value: function nodesLength() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     */\n  }, {\n    key: \"buffers\",\n    value: function buffers(index, obj) {\n      var offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n  }, {\n    key: \"buffersLength\",\n    value: function buffersLength() {\n      var offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Optional compression of the message body\n     */\n  }, {\n    key: \"compression\",\n    value: function compression(obj) {\n      var offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n  }], [{\n    key: \"getRootAsRecordBatch\",\n    value: function getRootAsRecordBatch(bb, obj) {\n      return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsRecordBatch\",\n    value: function getSizePrefixedRootAsRecordBatch(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startRecordBatch\",\n    value: function startRecordBatch(builder) {\n      builder.startObject(4);\n    }\n  }, {\n    key: \"addLength\",\n    value: function addLength(builder, length) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n  }, {\n    key: \"addNodes\",\n    value: function addNodes(builder, nodesOffset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n  }, {\n    key: \"startNodesVector\",\n    value: function startNodesVector(builder, numElems) {\n      builder.startVector(16, numElems, 8);\n    }\n  }, {\n    key: \"addBuffers\",\n    value: function addBuffers(builder, buffersOffset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n  }, {\n    key: \"startBuffersVector\",\n    value: function startBuffersVector(builder, numElems) {\n      builder.startVector(16, numElems, 8);\n    }\n  }, {\n    key: \"addCompression\",\n    value: function addCompression(builder, compressionOffset) {\n      builder.addFieldOffset(3, compressionOffset, 0);\n    }\n  }, {\n    key: \"endRecordBatch\",\n    value: function endRecordBatch(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }]);\n  return RecordBatch;\n}();","map":{"version":3,"names":["flatbuffers","BodyCompression","Buffer","FieldNode","RecordBatch","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","length","offset","__offset","readInt64","createLong","nodes","index","obj","__vector","nodesLength","__vector_len","buffers","buffersLength","compression","__indirect","getRootAsRecordBatch","readInt32","position","getSizePrefixedRootAsRecordBatch","setPosition","SIZE_PREFIX_LENGTH","startRecordBatch","builder","startObject","addLength","addFieldInt64","addNodes","nodesOffset","addFieldOffset","startNodesVector","numElems","startVector","addBuffers","buffersOffset","startBuffersVector","addCompression","compressionOffset","endRecordBatch","endObject"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\record-batch.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { BodyCompression } from './body-compression.js';\nimport { Buffer } from './buffer.js';\nimport { FieldNode } from './field-node.js';\n\n\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n */\nexport class RecordBatch {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):RecordBatch {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsRecordBatch(bb:flatbuffers.ByteBuffer, obj?:RecordBatch):RecordBatch {\n  return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsRecordBatch(bb:flatbuffers.ByteBuffer, obj?:RecordBatch):RecordBatch {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * number of records / rows. The arrays in the batch should all have this\n * length\n */\nlength():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * Nodes correspond to the pre-ordered flattened logical schema\n */\nnodes(index: number, obj?:FieldNode):FieldNode|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new FieldNode()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nnodesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Buffers correspond to the pre-ordered flattened buffer tree\n *\n * The number of buffers appended to this list depends on the schema. For\n * example, most primitive arrays will have 2 buffers, 1 for the validity\n * bitmap and 1 for the values. For struct arrays, there will only be a\n * single buffer for the validity (nulls) bitmap\n */\nbuffers(index: number, obj?:Buffer):Buffer|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Buffer()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n}\n\nbuffersLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\n/**\n * Optional compression of the message body\n */\ncompression(obj?:BodyCompression):BodyCompression|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? (obj || new BodyCompression()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\nstatic startRecordBatch(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addLength(builder:flatbuffers.Builder, length:flatbuffers.Long) {\n  builder.addFieldInt64(0, length, builder.createLong(0, 0));\n}\n\nstatic addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, nodesOffset, 0);\n}\n\nstatic startNodesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addBuffers(builder:flatbuffers.Builder, buffersOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, buffersOffset, 0);\n}\n\nstatic startBuffersVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(16, numElems, 8);\n}\n\nstatic addCompression(builder:flatbuffers.Builder, compressionOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, compressionOffset, 0);\n}\n\nstatic endRecordBatch(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}