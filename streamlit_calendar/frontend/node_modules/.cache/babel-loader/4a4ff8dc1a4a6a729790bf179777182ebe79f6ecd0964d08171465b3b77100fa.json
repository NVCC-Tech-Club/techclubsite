{"ast":null,"code":"import { injectStyles, BaseComponent, memoizeObjArg, ContentContainer, isArraysEqual, RefMap, findElements, elementClosest, PositionCache, DateComponent, memoize, greatestDurationDenominator, NowTimer, NowIndicatorContainer, config, getStickyHeaderDates, getStickyFooterScrollbar, renderScrollShim, ViewContainer } from '@fullcalendar/core/internal.js';\nimport { createElement, Fragment, createRef } from '@fullcalendar/core/preact.js';\nimport { TimelineLane, TimelineLaneSlicer, TimelineSlats, TimelineLaneBg, coordToCss, buildTimelineDateProfile, buildSlatCols, TimelineHeader } from '@fullcalendar/timeline/internal.js';\nimport { buildResourceFields, getPublicId, isGroupsEqual, refineRenderProps as refineRenderProps$1, ResourceSplitter, buildRowNodes, DEFAULT_RESOURCE_ORDER } from '@fullcalendar/resource/internal.js';\nimport { ResourceApi } from '@fullcalendar/resource/index.js';\nimport { ScrollGrid } from '@fullcalendar/scrollgrid/internal.js';\nvar css_248z = \".fc .fc-resource-timeline-divider{cursor:col-resize;width:3px}.fc .fc-resource-group{font-weight:inherit;text-align:inherit}.fc .fc-resource-timeline .fc-resource-group:not([rowspan]){background:var(--fc-neutral-bg-color)}.fc .fc-timeline-lane-frame{position:relative}.fc .fc-timeline-overlap-enabled .fc-timeline-lane-frame .fc-timeline-events{box-sizing:content-box;padding-bottom:10px}.fc-timeline-body-expandrows td.fc-timeline-lane{position:relative}.fc-timeline-body-expandrows .fc-timeline-lane-frame{position:static}.fc-datagrid-cell-frame-liquid{height:100%}.fc-liquid-hack .fc-datagrid-cell-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-datagrid-header .fc-datagrid-cell-frame{align-items:center;display:flex;justify-content:flex-start;position:relative}.fc .fc-datagrid-cell-resizer{bottom:0;cursor:col-resize;position:absolute;top:0;width:5px;z-index:1}.fc .fc-datagrid-cell-cushion{overflow:hidden;padding:8px;white-space:nowrap}.fc .fc-datagrid-expander{cursor:pointer;opacity:.65}.fc .fc-datagrid-expander .fc-icon{display:inline-block;width:1em}.fc .fc-datagrid-expander-placeholder{cursor:auto}.fc .fc-resource-timeline-flat .fc-datagrid-expander-placeholder{display:none}.fc-direction-ltr .fc-datagrid-cell-resizer{right:-3px}.fc-direction-rtl .fc-datagrid-cell-resizer{left:-3px}.fc-direction-ltr .fc-datagrid-expander{margin-right:3px}.fc-direction-rtl .fc-datagrid-expander{margin-left:3px}\";\ninjectStyles(css_248z);\n\n/*\nRenders the DOM responsible for the subrow expander area,\nas well as the space before it (used to align expanders of similar depths)\n*/\nfunction ExpanderIcon({\n  depth,\n  hasChildren,\n  isExpanded,\n  onExpanderClick\n}) {\n  let nodes = [];\n  for (let i = 0; i < depth; i += 1) {\n    nodes.push(createElement(\"span\", {\n      className: \"fc-icon\"\n    }));\n  }\n  let iconClassNames = ['fc-icon'];\n  if (hasChildren) {\n    if (isExpanded) {\n      iconClassNames.push('fc-icon-minus-square');\n    } else {\n      iconClassNames.push('fc-icon-plus-square');\n    }\n  }\n  nodes.push(createElement(\"span\", {\n    className: 'fc-datagrid-expander' + (hasChildren ? '' : ' fc-datagrid-expander-placeholder'),\n    onClick: onExpanderClick\n  }, createElement(\"span\", {\n    className: iconClassNames.join(' ')\n  })));\n  return createElement(Fragment, {}, ...nodes);\n}\n\n// worth making a PureComponent? (because of innerHeight)\nclass SpreadsheetIndividualCell extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.refineRenderProps = memoizeObjArg(refineRenderProps);\n    this.onExpanderClick = ev => {\n      let {\n        props\n      } = this;\n      if (props.hasChildren) {\n        this.context.dispatch({\n          type: 'SET_RESOURCE_ENTITY_EXPANDED',\n          id: props.resource.id,\n          isExpanded: !props.isExpanded\n        });\n      }\n    };\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      colSpec\n    } = props;\n    let renderProps = this.refineRenderProps({\n      resource: props.resource,\n      fieldValue: props.fieldValue,\n      context\n    });\n    return createElement(ContentContainer, {\n      elTag: \"td\",\n      elClasses: ['fc-datagrid-cell', 'fc-resource'],\n      elAttrs: {\n        role: 'gridcell',\n        'data-resource-id': props.resource.id\n      },\n      renderProps: renderProps,\n      generatorName: colSpec.isMain ? 'resourceLabelContent' : undefined,\n      customGenerator: colSpec.cellContent,\n      defaultGenerator: renderResourceInner,\n      classNameGenerator: colSpec.cellClassNames,\n      didMount: colSpec.cellDidMount,\n      willUnmount: colSpec.cellWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-datagrid-cell-frame\",\n      style: {\n        height: props.innerHeight\n      }\n    }, createElement(\"div\", {\n      className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\"\n    }, colSpec.isMain && createElement(ExpanderIcon, {\n      depth: props.depth,\n      hasChildren: props.hasChildren,\n      isExpanded: props.isExpanded,\n      onExpanderClick: this.onExpanderClick\n    }), createElement(InnerContent, {\n      elTag: \"span\",\n      elClasses: ['fc-datagrid-cell-main']\n    }))));\n  }\n}\nfunction renderResourceInner(renderProps) {\n  return renderProps.fieldValue || createElement(Fragment, null, \"\\u00A0\");\n}\nfunction refineRenderProps(input) {\n  return {\n    resource: new ResourceApi(input.context, input.resource),\n    fieldValue: input.fieldValue,\n    view: input.context.viewApi\n  };\n}\n\n// for VERTICAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupCell extends BaseComponent {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      colSpec\n    } = props;\n    let renderProps = {\n      groupValue: props.fieldValue,\n      view: context.viewApi\n    };\n    // a grouped cell. no data that is specific to this specific resource\n    // `colSpec` is for the group. a GroupSpec :(\n    return createElement(ContentContainer, {\n      elTag: \"td\",\n      elClasses: ['fc-datagrid-cell', 'fc-resource-group'],\n      elAttrs: {\n        role: 'gridcell',\n        rowSpan: props.rowSpan\n      },\n      renderProps: renderProps,\n      generatorName: \"resourceGroupLabelContent\",\n      customGenerator: colSpec.cellContent,\n      defaultGenerator: renderGroupInner,\n      classNameGenerator: colSpec.cellClassNames,\n      didMount: colSpec.cellDidMount,\n      willUnmount: colSpec.cellWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid\"\n    }, createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-datagrid-cell-cushion', 'fc-sticky']\n    })));\n  }\n}\nfunction renderGroupInner(renderProps) {\n  return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\nclass SpreadsheetRow extends BaseComponent {\n  render() {\n    let {\n      props\n    } = this;\n    let {\n      resource,\n      rowSpans,\n      depth\n    } = props;\n    let resourceFields = buildResourceFields(resource); // slightly inefficient. already done up the call stack\n    return createElement(\"tr\", {\n      role: \"row\"\n    }, props.colSpecs.map((colSpec, i) => {\n      let rowSpan = rowSpans[i];\n      if (rowSpan === 0) {\n        // not responsible for group-based rows. VRowGroup is\n        return null;\n      }\n      if (rowSpan == null) {\n        rowSpan = 1;\n      }\n      let fieldValue = colSpec.field ? resourceFields[colSpec.field] : resource.title || getPublicId(resource.id);\n      if (rowSpan > 1) {\n        return createElement(SpreadsheetGroupCell, {\n          key: i,\n          colSpec: colSpec,\n          fieldValue: fieldValue,\n          rowSpan: rowSpan\n        });\n      }\n      return createElement(SpreadsheetIndividualCell, {\n        key: i,\n        colSpec: colSpec,\n        resource: resource,\n        fieldValue: fieldValue,\n        depth: depth,\n        hasChildren: props.hasChildren,\n        isExpanded: props.isExpanded,\n        innerHeight: props.innerHeight\n      });\n    }));\n  }\n}\nSpreadsheetRow.addPropsEquality({\n  rowSpans: isArraysEqual\n});\n\n// for HORIZONTAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupRow extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.innerInnerRef = createRef();\n    this.onExpanderClick = () => {\n      let {\n        props\n      } = this;\n      this.context.dispatch({\n        type: 'SET_RESOURCE_ENTITY_EXPANDED',\n        id: props.id,\n        isExpanded: !props.isExpanded\n      });\n    };\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let renderProps = {\n      groupValue: props.group.value,\n      view: context.viewApi\n    };\n    let spec = props.group.spec;\n    return createElement(\"tr\", {\n      role: \"row\"\n    }, createElement(ContentContainer, {\n      elTag: \"th\",\n      elClasses: ['fc-datagrid-cell', 'fc-resource-group', context.theme.getClass('tableCellShaded')],\n      elAttrs: {\n        // ARIA TODO: not really a columnheader\n        // extremely tedious to make this aria-compliant,\n        // to assign multiple headers to each cell\n        // https://www.w3.org/WAI/tutorials/tables/multi-level/\n        role: 'columnheader',\n        scope: 'colgroup',\n        colSpan: props.spreadsheetColCnt\n      },\n      renderProps: renderProps,\n      generatorName: \"resourceGroupLabelContent\",\n      customGenerator: spec.labelContent,\n      defaultGenerator: renderCellInner,\n      classNameGenerator: spec.labelClassNames,\n      didMount: spec.labelDidMount,\n      willUnmount: spec.labelWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-datagrid-cell-frame\",\n      style: {\n        height: props.innerHeight\n      }\n    }, createElement(\"div\", {\n      className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\",\n      ref: this.innerInnerRef\n    }, createElement(ExpanderIcon, {\n      depth: 0,\n      hasChildren: true,\n      isExpanded: props.isExpanded,\n      onExpanderClick: this.onExpanderClick\n    }), createElement(InnerContent, {\n      elTag: \"span\",\n      elClasses: ['fc-datagrid-cell-main']\n    })))));\n  }\n}\nSpreadsheetGroupRow.addPropsEquality({\n  group: isGroupsEqual\n});\nfunction renderCellInner(renderProps) {\n  return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\nconst SPREADSHEET_COL_MIN_WIDTH = 20;\nclass SpreadsheetHeader extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.resizerElRefs = new RefMap(this._handleColResizerEl.bind(this));\n    this.colDraggings = {};\n  }\n  render() {\n    let {\n      colSpecs,\n      superHeaderRendering,\n      rowInnerHeights\n    } = this.props;\n    let renderProps = {\n      view: this.context.viewApi\n    };\n    let rowNodes = [];\n    rowInnerHeights = rowInnerHeights.slice(); // copy, because we're gonna pop\n    if (superHeaderRendering) {\n      let rowInnerHeight = rowInnerHeights.shift();\n      rowNodes.push(createElement(\"tr\", {\n        key: \"row-super\",\n        role: \"row\"\n      }, createElement(ContentContainer, {\n        elTag: \"th\",\n        elClasses: ['fc-datagrid-cell', 'fc-datagrid-cell-super'],\n        elAttrs: {\n          role: 'columnheader',\n          scope: 'colgroup',\n          colSpan: colSpecs.length\n        },\n        renderProps: renderProps,\n        generatorName: \"resourceAreaHeaderContent\",\n        customGenerator: superHeaderRendering.headerContent,\n        defaultGenerator: superHeaderRendering.headerDefault,\n        classNameGenerator: superHeaderRendering.headerClassNames,\n        didMount: superHeaderRendering.headerDidMount,\n        willUnmount: superHeaderRendering.headerWillUnmount\n      }, InnerContent => createElement(\"div\", {\n        className: \"fc-datagrid-cell-frame\",\n        style: {\n          height: rowInnerHeight\n        }\n      }, createElement(InnerContent, {\n        elTag: \"div\",\n        elClasses: ['fc-datagrid-cell-cushion', 'fc-scrollgrid-sync-inner']\n      })))));\n    }\n    let rowInnerHeight = rowInnerHeights.shift();\n    rowNodes.push(createElement(\"tr\", {\n      key: \"row\",\n      role: \"row\"\n    }, colSpecs.map((colSpec, i) => {\n      let isLastCol = i === colSpecs.length - 1;\n      // need empty inner div for abs positioning for resizer\n      return createElement(ContentContainer, {\n        key: i,\n        elTag: \"th\",\n        elClasses: ['fc-datagrid-cell'],\n        elAttrs: {\n          role: 'columnheader'\n        },\n        renderProps: renderProps,\n        generatorName: \"resourceAreaHeaderContent\",\n        customGenerator: colSpec.headerContent,\n        defaultGenerator: colSpec.headerDefault,\n        classNameGenerator: colSpec.headerClassNames,\n        didMount: colSpec.headerDidMount,\n        willUnmount: colSpec.headerWillUnmount\n      }, InnerContent => createElement(\"div\", {\n        className: \"fc-datagrid-cell-frame\",\n        style: {\n          height: rowInnerHeight\n        }\n      }, createElement(\"div\", {\n        className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\"\n      }, colSpec.isMain && createElement(\"span\", {\n        className: \"fc-datagrid-expander fc-datagrid-expander-placeholder\"\n      }, createElement(\"span\", {\n        className: \"fc-icon\"\n      })), createElement(InnerContent, {\n        elTag: \"span\",\n        elClasses: ['fc-datagrid-cell-main']\n      })), !isLastCol && createElement(\"div\", {\n        className: \"fc-datagrid-cell-resizer\",\n        ref: this.resizerElRefs.createRef(i)\n      })));\n    })));\n    return createElement(Fragment, null, rowNodes);\n  }\n  _handleColResizerEl(resizerEl, index) {\n    let {\n      colDraggings\n    } = this;\n    if (!resizerEl) {\n      let dragging = colDraggings[index];\n      if (dragging) {\n        dragging.destroy();\n        delete colDraggings[index];\n      }\n    } else {\n      let dragging = this.initColResizing(resizerEl, parseInt(index, 10));\n      if (dragging) {\n        colDraggings[index] = dragging;\n      }\n    }\n  }\n  initColResizing(resizerEl, index) {\n    let {\n      pluginHooks,\n      isRtl\n    } = this.context;\n    let {\n      onColWidthChange\n    } = this.props;\n    let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n    if (ElementDraggingImpl) {\n      let dragging = new ElementDraggingImpl(resizerEl);\n      let startWidth; // of just the single column\n      let currentWidths; // of all columns\n      dragging.emitter.on('dragstart', () => {\n        let allCells = findElements(elementClosest(resizerEl, 'tr'), 'th');\n        currentWidths = allCells.map(cellEl => cellEl.getBoundingClientRect().width);\n        startWidth = currentWidths[index];\n      });\n      dragging.emitter.on('dragmove', pev => {\n        currentWidths[index] = Math.max(startWidth + pev.deltaX * (isRtl ? -1 : 1), SPREADSHEET_COL_MIN_WIDTH);\n        if (onColWidthChange) {\n          onColWidthChange(currentWidths.slice()); // send a copy since currentWidths continues to be mutated\n        }\n      });\n\n      dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n      return dragging;\n    }\n    return null;\n  }\n}\nclass ResourceTimelineLane extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.refineRenderProps = memoizeObjArg(refineRenderProps$1);\n    this.handleHeightChange = (innerEl, isStable) => {\n      if (this.props.onHeightChange) {\n        this.props.onHeightChange(\n        // would want to use own <tr> ref, but not guaranteed to be ready when this fires\n        elementClosest(innerEl, 'tr'), isStable);\n      }\n    };\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let renderProps = this.refineRenderProps({\n      resource: props.resource,\n      context\n    });\n    return createElement(\"tr\", {\n      ref: props.elRef\n    }, createElement(ContentContainer, {\n      elTag: \"td\",\n      elClasses: ['fc-timeline-lane', 'fc-resource'],\n      elAttrs: {\n        'data-resource-id': props.resource.id\n      },\n      renderProps: renderProps,\n      generatorName: \"resourceLaneContent\",\n      customGenerator: options.resourceLaneContent,\n      classNameGenerator: options.resourceLaneClassNames,\n      didMount: options.resourceLaneDidMount,\n      willUnmount: options.resourceLaneWillUnmount\n    }, InnerContent => createElement(\"div\", {\n      className: \"fc-timeline-lane-frame\",\n      style: {\n        height: props.innerHeight\n      }\n    }, createElement(InnerContent, {\n      elTag: \"div\",\n      elClasses: ['fc-timeline-lane-misc']\n    }), createElement(TimelineLane, {\n      dateProfile: props.dateProfile,\n      tDateProfile: props.tDateProfile,\n      nowDate: props.nowDate,\n      todayRange: props.todayRange,\n      nextDayThreshold: props.nextDayThreshold,\n      businessHours: props.businessHours,\n      eventStore: props.eventStore,\n      eventUiBases: props.eventUiBases,\n      dateSelection: props.dateSelection,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      timelineCoords: props.timelineCoords,\n      onHeightChange: this.handleHeightChange,\n      resourceId: props.resource.id\n    })))); // important NOT to do liquid-height. dont want to shrink height smaller than content\n  }\n}\n\n/*\nparallels the SpreadsheetGroupRow\n*/\nclass DividerRow extends BaseComponent {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      renderHooks\n    } = props;\n    let renderProps = {\n      groupValue: props.groupValue,\n      view: context.viewApi\n    };\n    return createElement(\"tr\", {\n      ref: props.elRef\n    }, createElement(ContentContainer, {\n      elTag: \"td\",\n      elRef: props.elRef,\n      elClasses: ['fc-timeline-lane', 'fc-resource-group', context.theme.getClass('tableCellShaded')],\n      renderProps: renderProps,\n      generatorName: \"resourceGroupLaneContent\",\n      customGenerator: renderHooks.laneContent,\n      classNameGenerator: renderHooks.laneClassNames,\n      didMount: renderHooks.laneDidMount,\n      willUnmount: renderHooks.laneWillUnmount\n    }, InnerContainer => createElement(InnerContainer, {\n      elTag: \"div\",\n      elStyle: {\n        height: props.innerHeight\n      }\n    })));\n  }\n}\nclass ResourceTimelineLanesBody extends BaseComponent {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let {\n      rowElRefs,\n      innerHeights\n    } = props;\n    return createElement(\"tbody\", null, props.rowNodes.map((node, index) => {\n      if (node.group) {\n        return createElement(DividerRow, {\n          key: node.id,\n          elRef: rowElRefs.createRef(node.id),\n          groupValue: node.group.value,\n          renderHooks: node.group.spec,\n          innerHeight: innerHeights[index] || ''\n        });\n      }\n      if (node.resource) {\n        let resource = node.resource;\n        return createElement(ResourceTimelineLane, Object.assign({\n          key: node.id,\n          elRef: rowElRefs.createRef(node.id)\n        }, props.splitProps[resource.id], {\n          resource: resource,\n          dateProfile: props.dateProfile,\n          tDateProfile: props.tDateProfile,\n          nowDate: props.nowDate,\n          todayRange: props.todayRange,\n          nextDayThreshold: context.options.nextDayThreshold,\n          businessHours: resource.businessHours || props.fallbackBusinessHours,\n          innerHeight: innerHeights[index] || '',\n          timelineCoords: props.slatCoords,\n          onHeightChange: props.onRowHeightChange\n        }));\n      }\n      return null;\n    }));\n  }\n}\nclass ResourceTimelineLanes extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.rootElRef = createRef();\n    this.rowElRefs = new RefMap();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    return createElement(\"table\", {\n      ref: this.rootElRef,\n      \"aria-hidden\": true,\n      className: 'fc-scrollgrid-sync-table ' + context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, createElement(ResourceTimelineLanesBody, {\n      rowElRefs: this.rowElRefs,\n      rowNodes: props.rowNodes,\n      dateProfile: props.dateProfile,\n      tDateProfile: props.tDateProfile,\n      nowDate: props.nowDate,\n      todayRange: props.todayRange,\n      splitProps: props.splitProps,\n      fallbackBusinessHours: props.fallbackBusinessHours,\n      slatCoords: props.slatCoords,\n      innerHeights: props.innerHeights,\n      onRowHeightChange: props.onRowHeightChange\n    }));\n  }\n  componentDidMount() {\n    this.updateCoords();\n  }\n  componentDidUpdate() {\n    this.updateCoords();\n  }\n  componentWillUnmount() {\n    if (this.props.onRowCoords) {\n      this.props.onRowCoords(null);\n    }\n  }\n  updateCoords() {\n    let {\n      props\n    } = this;\n    if (props.onRowCoords && props.clientWidth !== null) {\n      // a populated clientWidth means sizing has stabilized\n      this.props.onRowCoords(new PositionCache(this.rootElRef.current, collectRowEls(this.rowElRefs.currentMap, props.rowNodes), false, true));\n    }\n  }\n}\nfunction collectRowEls(elMap, rowNodes) {\n  return rowNodes.map(rowNode => elMap[rowNode.id]);\n}\nclass ResourceTimelineGrid extends DateComponent {\n  constructor() {\n    super(...arguments);\n    this.computeHasResourceBusinessHours = memoize(computeHasResourceBusinessHours);\n    this.resourceSplitter = new ResourceSplitter(); // doesn't let it do businessHours tho\n    this.bgSlicer = new TimelineLaneSlicer();\n    this.slatsRef = createRef(); // needed for Hit creation :(\n    this.state = {\n      slatCoords: null\n    };\n    this.handleEl = el => {\n      if (el) {\n        this.context.registerInteractiveComponent(this, {\n          el\n        });\n      } else {\n        this.context.unregisterInteractiveComponent(this);\n      }\n    };\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n      if (this.props.onSlatCoords) {\n        this.props.onSlatCoords(slatCoords);\n      }\n    };\n    this.handleRowCoords = rowCoords => {\n      this.rowCoords = rowCoords;\n      if (this.props.onRowCoords) {\n        this.props.onRowCoords(rowCoords);\n      }\n    };\n  }\n  render() {\n    let {\n      props,\n      state,\n      context\n    } = this;\n    let {\n      dateProfile,\n      tDateProfile\n    } = props;\n    let timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n    let hasResourceBusinessHours = this.computeHasResourceBusinessHours(props.rowNodes);\n    let splitProps = this.resourceSplitter.splitProps(props);\n    let bgLaneProps = splitProps[''];\n    let bgSlicedProps = this.bgSlicer.sliceProps(bgLaneProps, dateProfile, tDateProfile.isTimeScale ? null : props.nextDayThreshold, context,\n    // wish we didn't need to pass in the rest of these args...\n    dateProfile, context.dateProfileGenerator, tDateProfile, context.dateEnv);\n    // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n    let slatCoords = state.slatCoords && state.slatCoords.dateProfile === props.dateProfile ? state.slatCoords : null;\n    return createElement(\"div\", {\n      ref: this.handleEl,\n      className: ['fc-timeline-body', props.expandRows ? 'fc-timeline-body-expandrows' : ''].join(' '),\n      style: {\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(NowTimer, {\n      unit: timerUnit\n    }, (nowDate, todayRange) => createElement(Fragment, null, createElement(TimelineSlats, {\n      ref: this.slatsRef,\n      dateProfile: dateProfile,\n      tDateProfile: tDateProfile,\n      nowDate: nowDate,\n      todayRange: todayRange,\n      clientWidth: props.clientWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      onCoords: this.handleSlatCoords,\n      onScrollLeftRequest: props.onScrollLeftRequest\n    }), createElement(TimelineLaneBg, {\n      businessHourSegs: hasResourceBusinessHours ? null : bgSlicedProps.businessHourSegs,\n      bgEventSegs: bgSlicedProps.bgEventSegs,\n      timelineCoords: slatCoords,\n      // empty array will result in unnecessary rerenders?\n      eventResizeSegs: bgSlicedProps.eventResize ? bgSlicedProps.eventResize.segs : [],\n      dateSelectionSegs: bgSlicedProps.dateSelectionSegs,\n      nowDate: nowDate,\n      todayRange: todayRange\n    }), createElement(ResourceTimelineLanes, {\n      rowNodes: props.rowNodes,\n      dateProfile: dateProfile,\n      tDateProfile: props.tDateProfile,\n      nowDate: nowDate,\n      todayRange: todayRange,\n      splitProps: splitProps,\n      fallbackBusinessHours: hasResourceBusinessHours ? props.businessHours : null,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      innerHeights: props.rowInnerHeights,\n      slatCoords: slatCoords,\n      onRowCoords: this.handleRowCoords,\n      onRowHeightChange: props.onRowHeightChange\n    }), context.options.nowIndicator && slatCoords && slatCoords.isDateInRange(nowDate) && createElement(\"div\", {\n      className: \"fc-timeline-now-indicator-container\"\n    }, createElement(NowIndicatorContainer, {\n      elClasses: ['fc-timeline-now-indicator-line'],\n      elStyle: coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl),\n      isAxis: false,\n      date: nowDate\n    })))));\n  }\n  // Hit System\n  // ------------------------------------------------------------------------------------------\n  queryHit(positionLeft, positionTop) {\n    let rowCoords = this.rowCoords;\n    let rowIndex = rowCoords.topToIndex(positionTop);\n    if (rowIndex != null) {\n      let resource = this.props.rowNodes[rowIndex].resource;\n      if (resource) {\n        // not a group\n        let slatHit = this.slatsRef.current.positionToHit(positionLeft);\n        if (slatHit) {\n          return {\n            dateProfile: this.props.dateProfile,\n            dateSpan: {\n              range: slatHit.dateSpan.range,\n              allDay: slatHit.dateSpan.allDay,\n              resourceId: resource.id\n            },\n            rect: {\n              left: slatHit.left,\n              right: slatHit.right,\n              top: rowCoords.tops[rowIndex],\n              bottom: rowCoords.bottoms[rowIndex]\n            },\n            dayEl: slatHit.dayEl,\n            layer: 0\n          };\n        }\n      }\n    }\n    return null;\n  }\n}\nfunction computeHasResourceBusinessHours(rowNodes) {\n  for (let node of rowNodes) {\n    let resource = node.resource;\n    if (resource && resource.businessHours) {\n      return true;\n    }\n  }\n  return false;\n}\nconst MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars\n// RENAME?\nclass ResourceTimelineViewLayout extends BaseComponent {\n  constructor() {\n    super(...arguments);\n    this.scrollGridRef = createRef();\n    this.timeBodyScrollerElRef = createRef();\n    this.spreadsheetHeaderChunkElRef = createRef();\n    this.rootElRef = createRef();\n    this.ensureScrollGridResizeId = 0;\n    this.state = {\n      resourceAreaWidthOverride: null\n    };\n    /*\n    ghetto debounce. don't race with ScrollGrid's resizing delay. solves #6140\n    */\n    this.ensureScrollGridResize = () => {\n      if (this.ensureScrollGridResizeId) {\n        clearTimeout(this.ensureScrollGridResizeId);\n      }\n      this.ensureScrollGridResizeId = setTimeout(() => {\n        this.scrollGridRef.current.handleSizing(false);\n      }, config.SCROLLGRID_RESIZE_INTERVAL + 1);\n    };\n  }\n  render() {\n    let {\n      props,\n      state,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options);\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options);\n    let sections = [{\n      type: 'header',\n      key: 'header',\n      syncRowHeights: true,\n      isSticky: stickyHeaderDates,\n      chunks: [{\n        key: 'datagrid',\n        elRef: this.spreadsheetHeaderChunkElRef,\n        // TODO: allow the content to specify this. have general-purpose 'content' with obj with keys\n        tableClassName: 'fc-datagrid-header',\n        rowContent: props.spreadsheetHeaderRows\n      }, {\n        key: 'divider',\n        outerContent: createElement(\"td\", {\n          role: \"presentation\",\n          className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n        })\n      }, {\n        key: 'timeline',\n        content: props.timeHeaderContent\n      }]\n    }, {\n      type: 'body',\n      key: 'body',\n      syncRowHeights: true,\n      liquid: true,\n      expandRows: Boolean(options.expandRows),\n      chunks: [{\n        key: 'datagrid',\n        tableClassName: 'fc-datagrid-body',\n        rowContent: props.spreadsheetBodyRows\n      }, {\n        key: 'divider',\n        outerContent: createElement(\"td\", {\n          role: \"presentation\",\n          className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n        })\n      }, {\n        key: 'timeline',\n        scrollerElRef: this.timeBodyScrollerElRef,\n        content: props.timeBodyContent\n      }]\n    }];\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'datagrid',\n          content: renderScrollShim\n        }, {\n          key: 'divider',\n          outerContent: createElement(\"td\", {\n            role: \"presentation\",\n            className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n          })\n        }, {\n          key: 'timeline',\n          content: renderScrollShim\n        }]\n      });\n    }\n    let resourceAreaWidth = state.resourceAreaWidthOverride != null ? state.resourceAreaWidthOverride : options.resourceAreaWidth;\n    return createElement(ScrollGrid, {\n      ref: this.scrollGridRef,\n      elRef: this.rootElRef,\n      liquid: !props.isHeightAuto && !props.forPrint,\n      forPrint: props.forPrint,\n      collapsibleWidth: false,\n      colGroups: [{\n        cols: props.spreadsheetCols,\n        width: resourceAreaWidth\n      }, {\n        cols: []\n      }, {\n        cols: props.timeCols\n      }],\n      sections: sections\n    });\n  }\n  forceTimeScroll(left) {\n    let scrollGrid = this.scrollGridRef.current;\n    scrollGrid.forceScrollLeft(2, left); // 2 = the time area\n  }\n\n  forceResourceScroll(top) {\n    let scrollGrid = this.scrollGridRef.current;\n    scrollGrid.forceScrollTop(1, top); // 1 = the body\n  }\n\n  getResourceScroll() {\n    let timeBodyScrollerEl = this.timeBodyScrollerElRef.current;\n    return timeBodyScrollerEl.scrollTop;\n  }\n  // Resource Area Resizing\n  // ------------------------------------------------------------------------------------------\n  // NOTE: a callback Ref for the resizer was firing multiple times with same elements (Preact)\n  // that's why we use spreadsheetResizerElRef instead\n  componentDidMount() {\n    this.initSpreadsheetResizing();\n  }\n  componentWillUnmount() {\n    this.destroySpreadsheetResizing();\n  }\n  initSpreadsheetResizing() {\n    let {\n      isRtl,\n      pluginHooks\n    } = this.context;\n    let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n    let spreadsheetHeadEl = this.spreadsheetHeaderChunkElRef.current;\n    if (ElementDraggingImpl) {\n      let rootEl = this.rootElRef.current;\n      let dragging = this.spreadsheetResizerDragging = new ElementDraggingImpl(rootEl, '.fc-resource-timeline-divider');\n      let dragStartWidth;\n      let viewWidth;\n      dragging.emitter.on('dragstart', () => {\n        dragStartWidth = spreadsheetHeadEl.getBoundingClientRect().width;\n        viewWidth = rootEl.getBoundingClientRect().width;\n      });\n      dragging.emitter.on('dragmove', pev => {\n        let newWidth = dragStartWidth + pev.deltaX * (isRtl ? -1 : 1);\n        newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);\n        newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);\n        // scrollgrid will ignore resize requests if there are too many :|\n        this.setState({\n          resourceAreaWidthOverride: newWidth\n        }, this.ensureScrollGridResize);\n      });\n      dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n    }\n  }\n\n  destroySpreadsheetResizing() {\n    if (this.spreadsheetResizerDragging) {\n      this.spreadsheetResizerDragging.destroy();\n    }\n  }\n}\nclass ResourceTimelineView extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.processColOptions = memoize(processColOptions);\n    this.buildTimelineDateProfile = memoize(buildTimelineDateProfile);\n    this.hasNesting = memoize(hasNesting);\n    this.buildRowNodes = memoize(buildRowNodes);\n    this.layoutRef = createRef();\n    this.rowNodes = [];\n    this.renderedRowNodes = [];\n    this.buildRowIndex = memoize(buildRowIndex);\n    this.handleSlatCoords = slatCoords => {\n      this.setState({\n        slatCoords\n      });\n    };\n    this.handleRowCoords = rowCoords => {\n      this.rowCoords = rowCoords;\n      this.scrollResponder.update(false); // TODO: could eliminate this if rowCoords lived in state\n    };\n\n    this.handleMaxCushionWidth = slotCushionMaxWidth => {\n      this.setState({\n        slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth) // for less rerendering TODO: DRY\n      });\n    };\n    // Scrolling\n    // ------------------------------------------------------------------------------------------------------------------\n    // this is useful for scrolling prev/next dates while resource is scrolled down\n    this.handleScrollLeftRequest = scrollLeft => {\n      let layout = this.layoutRef.current;\n      layout.forceTimeScroll(scrollLeft);\n    };\n    this.handleScrollRequest = request => {\n      let {\n        rowCoords\n      } = this;\n      let layout = this.layoutRef.current;\n      let rowId = request.rowId || request.resourceId;\n      if (rowCoords) {\n        if (rowId) {\n          let rowIdToIndex = this.buildRowIndex(this.renderedRowNodes);\n          let index = rowIdToIndex[rowId];\n          if (index != null) {\n            let scrollTop = request.fromBottom != null ? rowCoords.bottoms[index] - request.fromBottom :\n            // pixels from bottom edge\n            rowCoords.tops[index] // just use top edge\n            ;\n\n            layout.forceResourceScroll(scrollTop);\n          }\n        }\n        return true;\n      }\n      return null;\n    };\n    // Resource INDIVIDUAL-Column Area Resizing\n    // ------------------------------------------------------------------------------------------\n    this.handleColWidthChange = colWidths => {\n      this.setState({\n        spreadsheetColWidths: colWidths\n      });\n    };\n    this.state = {\n      resourceAreaWidth: context.options.resourceAreaWidth,\n      spreadsheetColWidths: []\n    };\n  }\n  render() {\n    let {\n      props,\n      state,\n      context\n    } = this;\n    let {\n      options,\n      viewSpec\n    } = context;\n    let {\n      superHeaderRendering,\n      groupSpecs,\n      orderSpecs,\n      isVGrouping,\n      colSpecs\n    } = this.processColOptions(context.options);\n    let tDateProfile = this.buildTimelineDateProfile(props.dateProfile, context.dateEnv, options, context.dateProfileGenerator);\n    let rowNodes = this.rowNodes = this.buildRowNodes(props.resourceStore, groupSpecs, orderSpecs, isVGrouping, props.resourceEntityExpansions, options.resourcesInitiallyExpanded);\n    let {\n      slotMinWidth\n    } = options;\n    let slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile));\n    return createElement(ViewContainer, {\n      elClasses: ['fc-resource-timeline', !this.hasNesting(rowNodes) && 'fc-resource-timeline-flat', 'fc-timeline', options.eventOverlap === false ? 'fc-timeline-overlap-disabled' : 'fc-timeline-overlap-enabled'],\n      viewSpec: viewSpec\n    }, createElement(ResourceTimelineViewLayout, {\n      ref: this.layoutRef,\n      forPrint: props.forPrint,\n      isHeightAuto: props.isHeightAuto,\n      spreadsheetCols: buildSpreadsheetCols(colSpecs, state.spreadsheetColWidths, ''),\n      spreadsheetHeaderRows: contentArg => createElement(SpreadsheetHeader // TODO: rename to SpreadsheetHeaderRows\n      , {\n        superHeaderRendering: superHeaderRendering,\n        colSpecs: colSpecs,\n        onColWidthChange: this.handleColWidthChange,\n        rowInnerHeights: contentArg.rowSyncHeights\n      }),\n      spreadsheetBodyRows: contentArg => createElement(Fragment, null, this.renderSpreadsheetRows(rowNodes, colSpecs, contentArg.rowSyncHeights)),\n      timeCols: slatCols,\n      timeHeaderContent: contentArg => createElement(TimelineHeader, {\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        tableMinWidth: contentArg.tableMinWidth,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        dateProfile: props.dateProfile,\n        tDateProfile: tDateProfile,\n        slatCoords: state.slatCoords,\n        rowInnerHeights: contentArg.rowSyncHeights,\n        onMaxCushionWidth: slotMinWidth ? null : this.handleMaxCushionWidth\n      }),\n      timeBodyContent: contentArg => createElement(ResourceTimelineGrid, {\n        dateProfile: props.dateProfile,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        tableMinWidth: contentArg.tableMinWidth,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        expandRows: contentArg.expandRows,\n        tDateProfile: tDateProfile,\n        rowNodes: rowNodes,\n        businessHours: props.businessHours,\n        dateSelection: props.dateSelection,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        resourceStore: props.resourceStore,\n        nextDayThreshold: context.options.nextDayThreshold,\n        rowInnerHeights: contentArg.rowSyncHeights,\n        onSlatCoords: this.handleSlatCoords,\n        onRowCoords: this.handleRowCoords,\n        onScrollLeftRequest: this.handleScrollLeftRequest,\n        onRowHeightChange: contentArg.reportRowHeightChange\n      })\n    }));\n  }\n  renderSpreadsheetRows(nodes, colSpecs, rowSyncHeights) {\n    return nodes.map((node, index) => {\n      if (node.group) {\n        return createElement(SpreadsheetGroupRow, {\n          key: node.id,\n          id: node.id,\n          spreadsheetColCnt: colSpecs.length,\n          isExpanded: node.isExpanded,\n          group: node.group,\n          innerHeight: rowSyncHeights[index] || ''\n        });\n      }\n      if (node.resource) {\n        return createElement(SpreadsheetRow, {\n          key: node.id,\n          colSpecs: colSpecs,\n          rowSpans: node.rowSpans,\n          depth: node.depth,\n          isExpanded: node.isExpanded,\n          hasChildren: node.hasChildren,\n          resource: node.resource,\n          innerHeight: rowSyncHeights[index] || ''\n        });\n      }\n      return null;\n    });\n  }\n  componentDidMount() {\n    this.renderedRowNodes = this.rowNodes;\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  }\n  getSnapshotBeforeUpdate() {\n    if (!this.props.forPrint) {\n      // because print-view is always zero?\n      return {\n        resourceScroll: this.queryResourceScroll()\n      };\n    }\n    return {};\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.renderedRowNodes = this.rowNodes;\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    if (snapshot.resourceScroll) {\n      this.handleScrollRequest(snapshot.resourceScroll); // TODO: this gets triggered too often\n    }\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach();\n  }\n  computeFallbackSlotMinWidth(tDateProfile) {\n    return Math.max(30, (this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel);\n  }\n  queryResourceScroll() {\n    let {\n      rowCoords,\n      renderedRowNodes\n    } = this;\n    if (rowCoords) {\n      let layout = this.layoutRef.current;\n      let trBottoms = rowCoords.bottoms;\n      let scrollTop = layout.getResourceScroll();\n      let scroll = {};\n      for (let i = 0; i < trBottoms.length; i += 1) {\n        let rowNode = renderedRowNodes[i];\n        let elBottom = trBottoms[i] - scrollTop; // from the top of the scroller\n        if (elBottom > 0) {\n          scroll.rowId = rowNode.id;\n          scroll.fromBottom = elBottom;\n          break;\n        }\n      }\n      return scroll;\n    }\n    return null;\n  }\n}\nResourceTimelineView.addStateEquality({\n  spreadsheetColWidths: isArraysEqual\n});\nfunction buildRowIndex(rowNodes) {\n  let rowIdToIndex = {};\n  for (let i = 0; i < rowNodes.length; i += 1) {\n    rowIdToIndex[rowNodes[i].id] = i;\n  }\n  return rowIdToIndex;\n}\nfunction buildSpreadsheetCols(colSpecs, forcedWidths, fallbackWidth = '') {\n  return colSpecs.map((colSpec, i) => ({\n    className: colSpec.isMain ? 'fc-main-col' : '',\n    width: forcedWidths[i] || colSpec.width || fallbackWidth\n  }));\n}\nfunction hasNesting(nodes) {\n  for (let node of nodes) {\n    if (node.group) {\n      return true;\n    }\n    if (node.resource) {\n      if (node.hasChildren) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction processColOptions(options) {\n  let allColSpecs = options.resourceAreaColumns || [];\n  let superHeaderRendering = null;\n  if (!allColSpecs.length) {\n    allColSpecs.push({\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent,\n      headerDefault: () => 'Resources',\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount\n    });\n  } else if (options.resourceAreaHeaderContent) {\n    // weird way to determine if content\n    superHeaderRendering = {\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent,\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount\n    };\n  }\n  let plainColSpecs = [];\n  let groupColSpecs = []; // part of the colSpecs, but filtered out in order to put first\n  let groupSpecs = [];\n  let isVGrouping = false;\n  for (let colSpec of allColSpecs) {\n    if (colSpec.group) {\n      groupColSpecs.push(Object.assign(Object.assign({}, colSpec), {\n        cellClassNames: colSpec.cellClassNames || options.resourceGroupLabelClassNames,\n        cellContent: colSpec.cellContent || options.resourceGroupLabelContent,\n        cellDidMount: colSpec.cellDidMount || options.resourceGroupLabelDidMount,\n        cellWillUnmount: colSpec.cellWillUnmount || options.resourceGroupLaneWillUnmount\n      }));\n    } else {\n      plainColSpecs.push(colSpec);\n    }\n  }\n  // BAD: mutates a user-supplied option\n  let mainColSpec = plainColSpecs[0];\n  mainColSpec.isMain = true;\n  mainColSpec.cellClassNames = mainColSpec.cellClassNames || options.resourceLabelClassNames;\n  mainColSpec.cellContent = mainColSpec.cellContent || options.resourceLabelContent;\n  mainColSpec.cellDidMount = mainColSpec.cellDidMount || options.resourceLabelDidMount;\n  mainColSpec.cellWillUnmount = mainColSpec.cellWillUnmount || options.resourceLabelWillUnmount;\n  if (groupColSpecs.length) {\n    groupSpecs = groupColSpecs;\n    isVGrouping = true;\n  } else {\n    let hGroupField = options.resourceGroupField;\n    if (hGroupField) {\n      groupSpecs.push({\n        field: hGroupField,\n        labelClassNames: options.resourceGroupLabelClassNames,\n        labelContent: options.resourceGroupLabelContent,\n        labelDidMount: options.resourceGroupLabelDidMount,\n        labelWillUnmount: options.resourceGroupLabelWillUnmount,\n        laneClassNames: options.resourceGroupLaneClassNames,\n        laneContent: options.resourceGroupLaneContent,\n        laneDidMount: options.resourceGroupLaneDidMount,\n        laneWillUnmount: options.resourceGroupLaneWillUnmount\n      });\n    }\n  }\n  let allOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n  let plainOrderSpecs = [];\n  for (let orderSpec of allOrderSpecs) {\n    let isGroup = false;\n    for (let groupSpec of groupSpecs) {\n      if (groupSpec.field === orderSpec.field) {\n        groupSpec.order = orderSpec.order; // -1, 0, 1\n        isGroup = true;\n        break;\n      }\n    }\n    if (!isGroup) {\n      plainOrderSpecs.push(orderSpec);\n    }\n  }\n  return {\n    superHeaderRendering,\n    isVGrouping,\n    groupSpecs,\n    colSpecs: groupColSpecs.concat(plainColSpecs),\n    orderSpecs: plainOrderSpecs\n  };\n}\nexport { ResourceTimelineLane, ResourceTimelineView, SpreadsheetRow };","map":{"version":3,"names":["injectStyles","BaseComponent","memoizeObjArg","ContentContainer","isArraysEqual","RefMap","findElements","elementClosest","PositionCache","DateComponent","memoize","greatestDurationDenominator","NowTimer","NowIndicatorContainer","config","getStickyHeaderDates","getStickyFooterScrollbar","renderScrollShim","ViewContainer","createElement","Fragment","createRef","TimelineLane","TimelineLaneSlicer","TimelineSlats","TimelineLaneBg","coordToCss","buildTimelineDateProfile","buildSlatCols","TimelineHeader","buildResourceFields","getPublicId","isGroupsEqual","refineRenderProps","refineRenderProps$1","ResourceSplitter","buildRowNodes","DEFAULT_RESOURCE_ORDER","ResourceApi","ScrollGrid","css_248z","ExpanderIcon","depth","hasChildren","isExpanded","onExpanderClick","nodes","i","push","className","iconClassNames","onClick","join","SpreadsheetIndividualCell","constructor","arguments","ev","props","context","dispatch","type","id","resource","render","colSpec","renderProps","fieldValue","elTag","elClasses","elAttrs","role","generatorName","isMain","undefined","customGenerator","cellContent","defaultGenerator","renderResourceInner","classNameGenerator","cellClassNames","didMount","cellDidMount","willUnmount","cellWillUnmount","InnerContent","style","height","innerHeight","input","view","viewApi","SpreadsheetGroupCell","groupValue","rowSpan","renderGroupInner","SpreadsheetRow","rowSpans","resourceFields","colSpecs","map","field","title","key","addPropsEquality","SpreadsheetGroupRow","innerInnerRef","group","value","spec","theme","getClass","scope","colSpan","spreadsheetColCnt","labelContent","renderCellInner","labelClassNames","labelDidMount","labelWillUnmount","ref","SPREADSHEET_COL_MIN_WIDTH","SpreadsheetHeader","resizerElRefs","_handleColResizerEl","bind","colDraggings","superHeaderRendering","rowInnerHeights","rowNodes","slice","rowInnerHeight","shift","length","headerContent","headerDefault","headerClassNames","headerDidMount","headerWillUnmount","isLastCol","resizerEl","index","dragging","destroy","initColResizing","parseInt","pluginHooks","isRtl","onColWidthChange","ElementDraggingImpl","elementDraggingImpl","startWidth","currentWidths","emitter","on","allCells","cellEl","getBoundingClientRect","width","pev","Math","max","deltaX","setAutoScrollEnabled","ResourceTimelineLane","handleHeightChange","innerEl","isStable","onHeightChange","options","elRef","resourceLaneContent","resourceLaneClassNames","resourceLaneDidMount","resourceLaneWillUnmount","dateProfile","tDateProfile","nowDate","todayRange","nextDayThreshold","businessHours","eventStore","eventUiBases","dateSelection","eventSelection","eventDrag","eventResize","timelineCoords","resourceId","DividerRow","renderHooks","laneContent","laneClassNames","laneDidMount","laneWillUnmount","InnerContainer","elStyle","ResourceTimelineLanesBody","rowElRefs","innerHeights","node","Object","assign","splitProps","fallbackBusinessHours","slatCoords","onRowHeightChange","ResourceTimelineLanes","rootElRef","minWidth","tableMinWidth","clientWidth","minHeight","componentDidMount","updateCoords","componentDidUpdate","componentWillUnmount","onRowCoords","current","collectRowEls","currentMap","elMap","rowNode","ResourceTimelineGrid","computeHasResourceBusinessHours","resourceSplitter","bgSlicer","slatsRef","state","handleEl","el","registerInteractiveComponent","unregisterInteractiveComponent","handleSlatCoords","setState","onSlatCoords","handleRowCoords","rowCoords","timerUnit","slotDuration","unit","hasResourceBusinessHours","bgLaneProps","bgSlicedProps","sliceProps","isTimeScale","dateProfileGenerator","dateEnv","expandRows","tableColGroupNode","onCoords","onScrollLeftRequest","businessHourSegs","bgEventSegs","eventResizeSegs","segs","dateSelectionSegs","clientHeight","nowIndicator","isDateInRange","dateToCoord","isAxis","date","queryHit","positionLeft","positionTop","rowIndex","topToIndex","slatHit","positionToHit","dateSpan","range","allDay","rect","left","right","top","tops","bottom","bottoms","dayEl","layer","MIN_RESOURCE_AREA_WIDTH","ResourceTimelineViewLayout","scrollGridRef","timeBodyScrollerElRef","spreadsheetHeaderChunkElRef","ensureScrollGridResizeId","resourceAreaWidthOverride","ensureScrollGridResize","clearTimeout","setTimeout","handleSizing","SCROLLGRID_RESIZE_INTERVAL","stickyHeaderDates","forPrint","stickyFooterScrollbar","sections","syncRowHeights","isSticky","chunks","tableClassName","rowContent","spreadsheetHeaderRows","outerContent","content","timeHeaderContent","liquid","Boolean","spreadsheetBodyRows","scrollerElRef","timeBodyContent","resourceAreaWidth","isHeightAuto","collapsibleWidth","colGroups","cols","spreadsheetCols","timeCols","forceTimeScroll","scrollGrid","forceScrollLeft","forceResourceScroll","forceScrollTop","getResourceScroll","timeBodyScrollerEl","scrollTop","initSpreadsheetResizing","destroySpreadsheetResizing","spreadsheetHeadEl","rootEl","spreadsheetResizerDragging","dragStartWidth","viewWidth","newWidth","min","ResourceTimelineView","processColOptions","hasNesting","layoutRef","renderedRowNodes","buildRowIndex","scrollResponder","update","handleMaxCushionWidth","slotCushionMaxWidth","ceil","handleScrollLeftRequest","scrollLeft","layout","handleScrollRequest","request","rowId","rowIdToIndex","fromBottom","handleColWidthChange","colWidths","spreadsheetColWidths","viewSpec","groupSpecs","orderSpecs","isVGrouping","resourceStore","resourceEntityExpansions","resourcesInitiallyExpanded","slotMinWidth","slatCols","computeFallbackSlotMinWidth","eventOverlap","buildSpreadsheetCols","contentArg","rowSyncHeights","renderSpreadsheetRows","onMaxCushionWidth","reportRowHeightChange","createScrollResponder","getSnapshotBeforeUpdate","resourceScroll","queryResourceScroll","prevProps","prevState","snapshot","detach","slotsPerLabel","trBottoms","scroll","elBottom","addStateEquality","forcedWidths","fallbackWidth","allColSpecs","resourceAreaColumns","resourceAreaHeaderClassNames","resourceAreaHeaderContent","resourceAreaHeaderDidMount","resourceAreaHeaderWillUnmount","plainColSpecs","groupColSpecs","resourceGroupLabelClassNames","resourceGroupLabelContent","resourceGroupLabelDidMount","resourceGroupLaneWillUnmount","mainColSpec","resourceLabelClassNames","resourceLabelContent","resourceLabelDidMount","resourceLabelWillUnmount","hGroupField","resourceGroupField","resourceGroupLabelWillUnmount","resourceGroupLaneClassNames","resourceGroupLaneContent","resourceGroupLaneDidMount","allOrderSpecs","resourceOrder","plainOrderSpecs","orderSpec","isGroup","groupSpec","order","concat"],"sources":["C:/Users/erden/Videos/FInals/New folder/streamlit-calendar/streamlit_calendar/frontend/node_modules/@fullcalendar/resource-timeline/internal.js"],"sourcesContent":["import { injectStyles, BaseComponent, memoizeObjArg, ContentContainer, isArraysEqual, RefMap, findElements, elementClosest, PositionCache, DateComponent, memoize, greatestDurationDenominator, NowTimer, NowIndicatorContainer, config, getStickyHeaderDates, getStickyFooterScrollbar, renderScrollShim, ViewContainer } from '@fullcalendar/core/internal.js';\nimport { createElement, Fragment, createRef } from '@fullcalendar/core/preact.js';\nimport { TimelineLane, TimelineLaneSlicer, TimelineSlats, TimelineLaneBg, coordToCss, buildTimelineDateProfile, buildSlatCols, TimelineHeader } from '@fullcalendar/timeline/internal.js';\nimport { buildResourceFields, getPublicId, isGroupsEqual, refineRenderProps as refineRenderProps$1, ResourceSplitter, buildRowNodes, DEFAULT_RESOURCE_ORDER } from '@fullcalendar/resource/internal.js';\nimport { ResourceApi } from '@fullcalendar/resource/index.js';\nimport { ScrollGrid } from '@fullcalendar/scrollgrid/internal.js';\n\nvar css_248z = \".fc .fc-resource-timeline-divider{cursor:col-resize;width:3px}.fc .fc-resource-group{font-weight:inherit;text-align:inherit}.fc .fc-resource-timeline .fc-resource-group:not([rowspan]){background:var(--fc-neutral-bg-color)}.fc .fc-timeline-lane-frame{position:relative}.fc .fc-timeline-overlap-enabled .fc-timeline-lane-frame .fc-timeline-events{box-sizing:content-box;padding-bottom:10px}.fc-timeline-body-expandrows td.fc-timeline-lane{position:relative}.fc-timeline-body-expandrows .fc-timeline-lane-frame{position:static}.fc-datagrid-cell-frame-liquid{height:100%}.fc-liquid-hack .fc-datagrid-cell-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-datagrid-header .fc-datagrid-cell-frame{align-items:center;display:flex;justify-content:flex-start;position:relative}.fc .fc-datagrid-cell-resizer{bottom:0;cursor:col-resize;position:absolute;top:0;width:5px;z-index:1}.fc .fc-datagrid-cell-cushion{overflow:hidden;padding:8px;white-space:nowrap}.fc .fc-datagrid-expander{cursor:pointer;opacity:.65}.fc .fc-datagrid-expander .fc-icon{display:inline-block;width:1em}.fc .fc-datagrid-expander-placeholder{cursor:auto}.fc .fc-resource-timeline-flat .fc-datagrid-expander-placeholder{display:none}.fc-direction-ltr .fc-datagrid-cell-resizer{right:-3px}.fc-direction-rtl .fc-datagrid-cell-resizer{left:-3px}.fc-direction-ltr .fc-datagrid-expander{margin-right:3px}.fc-direction-rtl .fc-datagrid-expander{margin-left:3px}\";\ninjectStyles(css_248z);\n\n/*\nRenders the DOM responsible for the subrow expander area,\nas well as the space before it (used to align expanders of similar depths)\n*/\nfunction ExpanderIcon({ depth, hasChildren, isExpanded, onExpanderClick }) {\n    let nodes = [];\n    for (let i = 0; i < depth; i += 1) {\n        nodes.push(createElement(\"span\", { className: \"fc-icon\" }));\n    }\n    let iconClassNames = ['fc-icon'];\n    if (hasChildren) {\n        if (isExpanded) {\n            iconClassNames.push('fc-icon-minus-square');\n        }\n        else {\n            iconClassNames.push('fc-icon-plus-square');\n        }\n    }\n    nodes.push(createElement(\"span\", { className: 'fc-datagrid-expander' + (hasChildren ? '' : ' fc-datagrid-expander-placeholder'), onClick: onExpanderClick },\n        createElement(\"span\", { className: iconClassNames.join(' ') })));\n    return createElement(Fragment, {}, ...nodes);\n}\n\n// worth making a PureComponent? (because of innerHeight)\nclass SpreadsheetIndividualCell extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.refineRenderProps = memoizeObjArg(refineRenderProps);\n        this.onExpanderClick = (ev) => {\n            let { props } = this;\n            if (props.hasChildren) {\n                this.context.dispatch({\n                    type: 'SET_RESOURCE_ENTITY_EXPANDED',\n                    id: props.resource.id,\n                    isExpanded: !props.isExpanded,\n                });\n            }\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { colSpec } = props;\n        let renderProps = this.refineRenderProps({\n            resource: props.resource,\n            fieldValue: props.fieldValue,\n            context,\n        });\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                'fc-datagrid-cell',\n                'fc-resource',\n            ], elAttrs: {\n                role: 'gridcell',\n                'data-resource-id': props.resource.id,\n            }, renderProps: renderProps, generatorName: colSpec.isMain ? 'resourceLabelContent' : undefined, customGenerator: colSpec.cellContent, defaultGenerator: renderResourceInner, classNameGenerator: colSpec.cellClassNames, didMount: colSpec.cellDidMount, willUnmount: colSpec.cellWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: props.innerHeight } },\n            createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" },\n                colSpec.isMain && (createElement(ExpanderIcon, { depth: props.depth, hasChildren: props.hasChildren, isExpanded: props.isExpanded, onExpanderClick: this.onExpanderClick })),\n                createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] }))))));\n    }\n}\nfunction renderResourceInner(renderProps) {\n    return renderProps.fieldValue || createElement(Fragment, null, \"\\u00A0\");\n}\nfunction refineRenderProps(input) {\n    return {\n        resource: new ResourceApi(input.context, input.resource),\n        fieldValue: input.fieldValue,\n        view: input.context.viewApi,\n    };\n}\n\n// for VERTICAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupCell extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { colSpec } = props;\n        let renderProps = {\n            groupValue: props.fieldValue,\n            view: context.viewApi,\n        };\n        // a grouped cell. no data that is specific to this specific resource\n        // `colSpec` is for the group. a GroupSpec :(\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                'fc-datagrid-cell',\n                'fc-resource-group',\n            ], elAttrs: {\n                role: 'gridcell',\n                rowSpan: props.rowSpan,\n            }, renderProps: renderProps, generatorName: \"resourceGroupLabelContent\", customGenerator: colSpec.cellContent, defaultGenerator: renderGroupInner, classNameGenerator: colSpec.cellClassNames, didMount: colSpec.cellDidMount, willUnmount: colSpec.cellWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid\" },\n            createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-datagrid-cell-cushion', 'fc-sticky'] })))));\n    }\n}\nfunction renderGroupInner(renderProps) {\n    return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nclass SpreadsheetRow extends BaseComponent {\n    render() {\n        let { props } = this;\n        let { resource, rowSpans, depth } = props;\n        let resourceFields = buildResourceFields(resource); // slightly inefficient. already done up the call stack\n        return (createElement(\"tr\", { role: \"row\" }, props.colSpecs.map((colSpec, i) => {\n            let rowSpan = rowSpans[i];\n            if (rowSpan === 0) { // not responsible for group-based rows. VRowGroup is\n                return null;\n            }\n            if (rowSpan == null) {\n                rowSpan = 1;\n            }\n            let fieldValue = colSpec.field ? resourceFields[colSpec.field] :\n                (resource.title || getPublicId(resource.id));\n            if (rowSpan > 1) {\n                return (createElement(SpreadsheetGroupCell, { key: i, colSpec: colSpec, fieldValue: fieldValue, rowSpan: rowSpan }));\n            }\n            return (createElement(SpreadsheetIndividualCell, { key: i, colSpec: colSpec, resource: resource, fieldValue: fieldValue, depth: depth, hasChildren: props.hasChildren, isExpanded: props.isExpanded, innerHeight: props.innerHeight }));\n        })));\n    }\n}\nSpreadsheetRow.addPropsEquality({\n    rowSpans: isArraysEqual,\n});\n\n// for HORIZONTAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupRow extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.innerInnerRef = createRef();\n        this.onExpanderClick = () => {\n            let { props } = this;\n            this.context.dispatch({\n                type: 'SET_RESOURCE_ENTITY_EXPANDED',\n                id: props.id,\n                isExpanded: !props.isExpanded,\n            });\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let renderProps = { groupValue: props.group.value, view: context.viewApi };\n        let spec = props.group.spec;\n        return (createElement(\"tr\", { role: \"row\" },\n            createElement(ContentContainer, { elTag: \"th\", elClasses: [\n                    'fc-datagrid-cell',\n                    'fc-resource-group',\n                    context.theme.getClass('tableCellShaded'),\n                ], elAttrs: {\n                    // ARIA TODO: not really a columnheader\n                    // extremely tedious to make this aria-compliant,\n                    // to assign multiple headers to each cell\n                    // https://www.w3.org/WAI/tutorials/tables/multi-level/\n                    role: 'columnheader',\n                    scope: 'colgroup',\n                    colSpan: props.spreadsheetColCnt,\n                }, renderProps: renderProps, generatorName: \"resourceGroupLabelContent\", customGenerator: spec.labelContent, defaultGenerator: renderCellInner, classNameGenerator: spec.labelClassNames, didMount: spec.labelDidMount, willUnmount: spec.labelWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: props.innerHeight } },\n                createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\", ref: this.innerInnerRef },\n                    createElement(ExpanderIcon, { depth: 0, hasChildren: true, isExpanded: props.isExpanded, onExpanderClick: this.onExpanderClick }),\n                    createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] })))))));\n    }\n}\nSpreadsheetGroupRow.addPropsEquality({\n    group: isGroupsEqual,\n});\nfunction renderCellInner(renderProps) {\n    return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nconst SPREADSHEET_COL_MIN_WIDTH = 20;\nclass SpreadsheetHeader extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.resizerElRefs = new RefMap(this._handleColResizerEl.bind(this));\n        this.colDraggings = {};\n    }\n    render() {\n        let { colSpecs, superHeaderRendering, rowInnerHeights } = this.props;\n        let renderProps = { view: this.context.viewApi };\n        let rowNodes = [];\n        rowInnerHeights = rowInnerHeights.slice(); // copy, because we're gonna pop\n        if (superHeaderRendering) {\n            let rowInnerHeight = rowInnerHeights.shift();\n            rowNodes.push(createElement(\"tr\", { key: \"row-super\", role: \"row\" },\n                createElement(ContentContainer, { elTag: \"th\", elClasses: [\n                        'fc-datagrid-cell',\n                        'fc-datagrid-cell-super',\n                    ], elAttrs: {\n                        role: 'columnheader',\n                        scope: 'colgroup',\n                        colSpan: colSpecs.length,\n                    }, renderProps: renderProps, generatorName: \"resourceAreaHeaderContent\", customGenerator: superHeaderRendering.headerContent, defaultGenerator: superHeaderRendering.headerDefault, classNameGenerator: superHeaderRendering.headerClassNames, didMount: superHeaderRendering.headerDidMount, willUnmount: superHeaderRendering.headerWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: rowInnerHeight } },\n                    createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-datagrid-cell-cushion', 'fc-scrollgrid-sync-inner'] }))))));\n        }\n        let rowInnerHeight = rowInnerHeights.shift();\n        rowNodes.push(createElement(\"tr\", { key: \"row\", role: \"row\" }, colSpecs.map((colSpec, i) => {\n            let isLastCol = i === (colSpecs.length - 1);\n            // need empty inner div for abs positioning for resizer\n            return (createElement(ContentContainer, { key: i, elTag: \"th\", elClasses: ['fc-datagrid-cell'], elAttrs: { role: 'columnheader' }, renderProps: renderProps, generatorName: \"resourceAreaHeaderContent\", customGenerator: colSpec.headerContent, defaultGenerator: colSpec.headerDefault, classNameGenerator: colSpec.headerClassNames, didMount: colSpec.headerDidMount, willUnmount: colSpec.headerWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: rowInnerHeight } },\n                createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" },\n                    colSpec.isMain && (createElement(\"span\", { className: \"fc-datagrid-expander fc-datagrid-expander-placeholder\" },\n                        createElement(\"span\", { className: \"fc-icon\" }))),\n                    createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] })),\n                !isLastCol && (createElement(\"div\", { className: \"fc-datagrid-cell-resizer\", ref: this.resizerElRefs.createRef(i) }))))));\n        })));\n        return (createElement(Fragment, null, rowNodes));\n    }\n    _handleColResizerEl(resizerEl, index) {\n        let { colDraggings } = this;\n        if (!resizerEl) {\n            let dragging = colDraggings[index];\n            if (dragging) {\n                dragging.destroy();\n                delete colDraggings[index];\n            }\n        }\n        else {\n            let dragging = this.initColResizing(resizerEl, parseInt(index, 10));\n            if (dragging) {\n                colDraggings[index] = dragging;\n            }\n        }\n    }\n    initColResizing(resizerEl, index) {\n        let { pluginHooks, isRtl } = this.context;\n        let { onColWidthChange } = this.props;\n        let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n        if (ElementDraggingImpl) {\n            let dragging = new ElementDraggingImpl(resizerEl);\n            let startWidth; // of just the single column\n            let currentWidths; // of all columns\n            dragging.emitter.on('dragstart', () => {\n                let allCells = findElements(elementClosest(resizerEl, 'tr'), 'th');\n                currentWidths = allCells.map((cellEl) => (cellEl.getBoundingClientRect().width));\n                startWidth = currentWidths[index];\n            });\n            dragging.emitter.on('dragmove', (pev) => {\n                currentWidths[index] = Math.max(startWidth + pev.deltaX * (isRtl ? -1 : 1), SPREADSHEET_COL_MIN_WIDTH);\n                if (onColWidthChange) {\n                    onColWidthChange(currentWidths.slice()); // send a copy since currentWidths continues to be mutated\n                }\n            });\n            dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n            return dragging;\n        }\n        return null;\n    }\n}\n\nclass ResourceTimelineLane extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.refineRenderProps = memoizeObjArg(refineRenderProps$1);\n        this.handleHeightChange = (innerEl, isStable) => {\n            if (this.props.onHeightChange) {\n                this.props.onHeightChange(\n                // would want to use own <tr> ref, but not guaranteed to be ready when this fires\n                elementClosest(innerEl, 'tr'), isStable);\n            }\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let renderProps = this.refineRenderProps({ resource: props.resource, context });\n        return (createElement(\"tr\", { ref: props.elRef },\n            createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                    'fc-timeline-lane',\n                    'fc-resource',\n                ], elAttrs: {\n                    'data-resource-id': props.resource.id,\n                }, renderProps: renderProps, generatorName: \"resourceLaneContent\", customGenerator: options.resourceLaneContent, classNameGenerator: options.resourceLaneClassNames, didMount: options.resourceLaneDidMount, willUnmount: options.resourceLaneWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-timeline-lane-frame\", style: { height: props.innerHeight } },\n                createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timeline-lane-misc'] }),\n                createElement(TimelineLane, { dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, nextDayThreshold: props.nextDayThreshold, businessHours: props.businessHours, eventStore: props.eventStore, eventUiBases: props.eventUiBases, dateSelection: props.dateSelection, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, timelineCoords: props.timelineCoords, onHeightChange: this.handleHeightChange, resourceId: props.resource.id })))))); // important NOT to do liquid-height. dont want to shrink height smaller than content\n    }\n}\n\n/*\nparallels the SpreadsheetGroupRow\n*/\nclass DividerRow extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { renderHooks } = props;\n        let renderProps = {\n            groupValue: props.groupValue,\n            view: context.viewApi,\n        };\n        return (createElement(\"tr\", { ref: props.elRef },\n            createElement(ContentContainer, { elTag: \"td\", elRef: props.elRef, elClasses: [\n                    'fc-timeline-lane',\n                    'fc-resource-group',\n                    context.theme.getClass('tableCellShaded'),\n                ], renderProps: renderProps, generatorName: \"resourceGroupLaneContent\", customGenerator: renderHooks.laneContent, classNameGenerator: renderHooks.laneClassNames, didMount: renderHooks.laneDidMount, willUnmount: renderHooks.laneWillUnmount }, (InnerContainer) => (createElement(InnerContainer, { elTag: \"div\", elStyle: { height: props.innerHeight } })))));\n    }\n}\n\nclass ResourceTimelineLanesBody extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { rowElRefs, innerHeights } = props;\n        return (createElement(\"tbody\", null, props.rowNodes.map((node, index) => {\n            if (node.group) {\n                return (createElement(DividerRow, { key: node.id, elRef: rowElRefs.createRef(node.id), groupValue: node.group.value, renderHooks: node.group.spec, innerHeight: innerHeights[index] || '' }));\n            }\n            if (node.resource) {\n                let resource = node.resource;\n                return (createElement(ResourceTimelineLane, Object.assign({ key: node.id, elRef: rowElRefs.createRef(node.id) }, props.splitProps[resource.id], { resource: resource, dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, nextDayThreshold: context.options.nextDayThreshold, businessHours: resource.businessHours || props.fallbackBusinessHours, innerHeight: innerHeights[index] || '', timelineCoords: props.slatCoords, onHeightChange: props.onRowHeightChange })));\n            }\n            return null;\n        })));\n    }\n}\n\nclass ResourceTimelineLanes extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n        this.rowElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        return (createElement(\"table\", { ref: this.rootElRef, \"aria-hidden\": true, className: 'fc-scrollgrid-sync-table ' + context.theme.getClass('table'), style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth,\n                height: props.minHeight,\n            } },\n            createElement(ResourceTimelineLanesBody, { rowElRefs: this.rowElRefs, rowNodes: props.rowNodes, dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, splitProps: props.splitProps, fallbackBusinessHours: props.fallbackBusinessHours, slatCoords: props.slatCoords, innerHeights: props.innerHeights, onRowHeightChange: props.onRowHeightChange })));\n    }\n    componentDidMount() {\n        this.updateCoords();\n    }\n    componentDidUpdate() {\n        this.updateCoords();\n    }\n    componentWillUnmount() {\n        if (this.props.onRowCoords) {\n            this.props.onRowCoords(null);\n        }\n    }\n    updateCoords() {\n        let { props } = this;\n        if (props.onRowCoords && props.clientWidth !== null) { // a populated clientWidth means sizing has stabilized\n            this.props.onRowCoords(new PositionCache(this.rootElRef.current, collectRowEls(this.rowElRefs.currentMap, props.rowNodes), false, true));\n        }\n    }\n}\nfunction collectRowEls(elMap, rowNodes) {\n    return rowNodes.map((rowNode) => elMap[rowNode.id]);\n}\n\nclass ResourceTimelineGrid extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.computeHasResourceBusinessHours = memoize(computeHasResourceBusinessHours);\n        this.resourceSplitter = new ResourceSplitter(); // doesn't let it do businessHours tho\n        this.bgSlicer = new TimelineLaneSlicer();\n        this.slatsRef = createRef(); // needed for Hit creation :(\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleEl = (el) => {\n            if (el) {\n                this.context.registerInteractiveComponent(this, { el });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n            if (this.props.onSlatCoords) {\n                this.props.onSlatCoords(slatCoords);\n            }\n        };\n        this.handleRowCoords = (rowCoords) => {\n            this.rowCoords = rowCoords;\n            if (this.props.onRowCoords) {\n                this.props.onRowCoords(rowCoords);\n            }\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { dateProfile, tDateProfile } = props;\n        let timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n        let hasResourceBusinessHours = this.computeHasResourceBusinessHours(props.rowNodes);\n        let splitProps = this.resourceSplitter.splitProps(props);\n        let bgLaneProps = splitProps[''];\n        let bgSlicedProps = this.bgSlicer.sliceProps(bgLaneProps, dateProfile, tDateProfile.isTimeScale ? null : props.nextDayThreshold, context, // wish we didn't need to pass in the rest of these args...\n        dateProfile, context.dateProfileGenerator, tDateProfile, context.dateEnv);\n        // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n        let slatCoords = state.slatCoords && state.slatCoords.dateProfile === props.dateProfile ? state.slatCoords : null;\n        return (createElement(\"div\", { ref: this.handleEl, className: [\n                'fc-timeline-body',\n                props.expandRows ? 'fc-timeline-body-expandrows' : '',\n            ].join(' '), style: { minWidth: props.tableMinWidth } },\n            createElement(NowTimer, { unit: timerUnit }, (nowDate, todayRange) => (createElement(Fragment, null,\n                createElement(TimelineSlats, { ref: this.slatsRef, dateProfile: dateProfile, tDateProfile: tDateProfile, nowDate: nowDate, todayRange: todayRange, clientWidth: props.clientWidth, tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, onCoords: this.handleSlatCoords, onScrollLeftRequest: props.onScrollLeftRequest }),\n                createElement(TimelineLaneBg, { businessHourSegs: hasResourceBusinessHours ? null : bgSlicedProps.businessHourSegs, bgEventSegs: bgSlicedProps.bgEventSegs, timelineCoords: slatCoords, \n                    // empty array will result in unnecessary rerenders?\n                    eventResizeSegs: (bgSlicedProps.eventResize ? bgSlicedProps.eventResize.segs : []), dateSelectionSegs: bgSlicedProps.dateSelectionSegs, nowDate: nowDate, todayRange: todayRange }),\n                createElement(ResourceTimelineLanes, { rowNodes: props.rowNodes, dateProfile: dateProfile, tDateProfile: props.tDateProfile, nowDate: nowDate, todayRange: todayRange, splitProps: splitProps, fallbackBusinessHours: hasResourceBusinessHours ? props.businessHours : null, clientWidth: props.clientWidth, minHeight: props.expandRows ? props.clientHeight : '', tableMinWidth: props.tableMinWidth, innerHeights: props.rowInnerHeights, slatCoords: slatCoords, onRowCoords: this.handleRowCoords, onRowHeightChange: props.onRowHeightChange }),\n                (context.options.nowIndicator && slatCoords && slatCoords.isDateInRange(nowDate)) && (createElement(\"div\", { className: \"fc-timeline-now-indicator-container\" },\n                    createElement(NowIndicatorContainer, { elClasses: ['fc-timeline-now-indicator-line'], elStyle: coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl), isAxis: false, date: nowDate }))))))));\n    }\n    // Hit System\n    // ------------------------------------------------------------------------------------------\n    queryHit(positionLeft, positionTop) {\n        let rowCoords = this.rowCoords;\n        let rowIndex = rowCoords.topToIndex(positionTop);\n        if (rowIndex != null) {\n            let resource = this.props.rowNodes[rowIndex].resource;\n            if (resource) { // not a group\n                let slatHit = this.slatsRef.current.positionToHit(positionLeft);\n                if (slatHit) {\n                    return {\n                        dateProfile: this.props.dateProfile,\n                        dateSpan: {\n                            range: slatHit.dateSpan.range,\n                            allDay: slatHit.dateSpan.allDay,\n                            resourceId: resource.id,\n                        },\n                        rect: {\n                            left: slatHit.left,\n                            right: slatHit.right,\n                            top: rowCoords.tops[rowIndex],\n                            bottom: rowCoords.bottoms[rowIndex],\n                        },\n                        dayEl: slatHit.dayEl,\n                        layer: 0,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n}\nfunction computeHasResourceBusinessHours(rowNodes) {\n    for (let node of rowNodes) {\n        let resource = node.resource;\n        if (resource && resource.businessHours) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars\n// RENAME?\nclass ResourceTimelineViewLayout extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.scrollGridRef = createRef();\n        this.timeBodyScrollerElRef = createRef();\n        this.spreadsheetHeaderChunkElRef = createRef();\n        this.rootElRef = createRef();\n        this.ensureScrollGridResizeId = 0;\n        this.state = {\n            resourceAreaWidthOverride: null,\n        };\n        /*\n        ghetto debounce. don't race with ScrollGrid's resizing delay. solves #6140\n        */\n        this.ensureScrollGridResize = () => {\n            if (this.ensureScrollGridResizeId) {\n                clearTimeout(this.ensureScrollGridResizeId);\n            }\n            this.ensureScrollGridResizeId = setTimeout(() => {\n                this.scrollGridRef.current.handleSizing(false);\n            }, config.SCROLLGRID_RESIZE_INTERVAL + 1);\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options } = context;\n        let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options);\n        let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options);\n        let sections = [\n            {\n                type: 'header',\n                key: 'header',\n                syncRowHeights: true,\n                isSticky: stickyHeaderDates,\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        elRef: this.spreadsheetHeaderChunkElRef,\n                        // TODO: allow the content to specify this. have general-purpose 'content' with obj with keys\n                        tableClassName: 'fc-datagrid-header',\n                        rowContent: props.spreadsheetHeaderRows,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        content: props.timeHeaderContent,\n                    },\n                ],\n            },\n            {\n                type: 'body',\n                key: 'body',\n                syncRowHeights: true,\n                liquid: true,\n                expandRows: Boolean(options.expandRows),\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        tableClassName: 'fc-datagrid-body',\n                        rowContent: props.spreadsheetBodyRows,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        scrollerElRef: this.timeBodyScrollerElRef,\n                        content: props.timeBodyContent,\n                    },\n                ],\n            },\n        ];\n        if (stickyFooterScrollbar) {\n            sections.push({\n                type: 'footer',\n                key: 'footer',\n                isSticky: true,\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        content: renderScrollShim,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        content: renderScrollShim,\n                    },\n                ],\n            });\n        }\n        let resourceAreaWidth = state.resourceAreaWidthOverride != null\n            ? state.resourceAreaWidthOverride\n            : options.resourceAreaWidth;\n        return (createElement(ScrollGrid, { ref: this.scrollGridRef, elRef: this.rootElRef, liquid: !props.isHeightAuto && !props.forPrint, forPrint: props.forPrint, collapsibleWidth: false, colGroups: [\n                { cols: props.spreadsheetCols, width: resourceAreaWidth },\n                { cols: [] },\n                { cols: props.timeCols },\n            ], sections: sections }));\n    }\n    forceTimeScroll(left) {\n        let scrollGrid = this.scrollGridRef.current;\n        scrollGrid.forceScrollLeft(2, left); // 2 = the time area\n    }\n    forceResourceScroll(top) {\n        let scrollGrid = this.scrollGridRef.current;\n        scrollGrid.forceScrollTop(1, top); // 1 = the body\n    }\n    getResourceScroll() {\n        let timeBodyScrollerEl = this.timeBodyScrollerElRef.current;\n        return timeBodyScrollerEl.scrollTop;\n    }\n    // Resource Area Resizing\n    // ------------------------------------------------------------------------------------------\n    // NOTE: a callback Ref for the resizer was firing multiple times with same elements (Preact)\n    // that's why we use spreadsheetResizerElRef instead\n    componentDidMount() {\n        this.initSpreadsheetResizing();\n    }\n    componentWillUnmount() {\n        this.destroySpreadsheetResizing();\n    }\n    initSpreadsheetResizing() {\n        let { isRtl, pluginHooks } = this.context;\n        let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n        let spreadsheetHeadEl = this.spreadsheetHeaderChunkElRef.current;\n        if (ElementDraggingImpl) {\n            let rootEl = this.rootElRef.current;\n            let dragging = this.spreadsheetResizerDragging = new ElementDraggingImpl(rootEl, '.fc-resource-timeline-divider');\n            let dragStartWidth;\n            let viewWidth;\n            dragging.emitter.on('dragstart', () => {\n                dragStartWidth = spreadsheetHeadEl.getBoundingClientRect().width;\n                viewWidth = rootEl.getBoundingClientRect().width;\n            });\n            dragging.emitter.on('dragmove', (pev) => {\n                let newWidth = dragStartWidth + pev.deltaX * (isRtl ? -1 : 1);\n                newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);\n                newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);\n                // scrollgrid will ignore resize requests if there are too many :|\n                this.setState({\n                    resourceAreaWidthOverride: newWidth,\n                }, this.ensureScrollGridResize);\n            });\n            dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n        }\n    }\n    destroySpreadsheetResizing() {\n        if (this.spreadsheetResizerDragging) {\n            this.spreadsheetResizerDragging.destroy();\n        }\n    }\n}\n\nclass ResourceTimelineView extends BaseComponent {\n    constructor(props, context) {\n        super(props, context);\n        this.processColOptions = memoize(processColOptions);\n        this.buildTimelineDateProfile = memoize(buildTimelineDateProfile);\n        this.hasNesting = memoize(hasNesting);\n        this.buildRowNodes = memoize(buildRowNodes);\n        this.layoutRef = createRef();\n        this.rowNodes = [];\n        this.renderedRowNodes = [];\n        this.buildRowIndex = memoize(buildRowIndex);\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n        };\n        this.handleRowCoords = (rowCoords) => {\n            this.rowCoords = rowCoords;\n            this.scrollResponder.update(false); // TODO: could eliminate this if rowCoords lived in state\n        };\n        this.handleMaxCushionWidth = (slotCushionMaxWidth) => {\n            this.setState({\n                slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth), // for less rerendering TODO: DRY\n            });\n        };\n        // Scrolling\n        // ------------------------------------------------------------------------------------------------------------------\n        // this is useful for scrolling prev/next dates while resource is scrolled down\n        this.handleScrollLeftRequest = (scrollLeft) => {\n            let layout = this.layoutRef.current;\n            layout.forceTimeScroll(scrollLeft);\n        };\n        this.handleScrollRequest = (request) => {\n            let { rowCoords } = this;\n            let layout = this.layoutRef.current;\n            let rowId = request.rowId || request.resourceId;\n            if (rowCoords) {\n                if (rowId) {\n                    let rowIdToIndex = this.buildRowIndex(this.renderedRowNodes);\n                    let index = rowIdToIndex[rowId];\n                    if (index != null) {\n                        let scrollTop = (request.fromBottom != null ?\n                            rowCoords.bottoms[index] - request.fromBottom : // pixels from bottom edge\n                            rowCoords.tops[index] // just use top edge\n                        );\n                        layout.forceResourceScroll(scrollTop);\n                    }\n                }\n                return true;\n            }\n            return null;\n        };\n        // Resource INDIVIDUAL-Column Area Resizing\n        // ------------------------------------------------------------------------------------------\n        this.handleColWidthChange = (colWidths) => {\n            this.setState({\n                spreadsheetColWidths: colWidths,\n            });\n        };\n        this.state = {\n            resourceAreaWidth: context.options.resourceAreaWidth,\n            spreadsheetColWidths: [],\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options, viewSpec } = context;\n        let { superHeaderRendering, groupSpecs, orderSpecs, isVGrouping, colSpecs } = this.processColOptions(context.options);\n        let tDateProfile = this.buildTimelineDateProfile(props.dateProfile, context.dateEnv, options, context.dateProfileGenerator);\n        let rowNodes = this.rowNodes = this.buildRowNodes(props.resourceStore, groupSpecs, orderSpecs, isVGrouping, props.resourceEntityExpansions, options.resourcesInitiallyExpanded);\n        let { slotMinWidth } = options;\n        let slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile));\n        return (createElement(ViewContainer, { elClasses: [\n                'fc-resource-timeline',\n                !this.hasNesting(rowNodes) && 'fc-resource-timeline-flat',\n                'fc-timeline',\n                options.eventOverlap === false ?\n                    'fc-timeline-overlap-disabled' :\n                    'fc-timeline-overlap-enabled',\n            ], viewSpec: viewSpec },\n            createElement(ResourceTimelineViewLayout, { ref: this.layoutRef, forPrint: props.forPrint, isHeightAuto: props.isHeightAuto, spreadsheetCols: buildSpreadsheetCols(colSpecs, state.spreadsheetColWidths, ''), spreadsheetHeaderRows: (contentArg) => (createElement(SpreadsheetHeader // TODO: rename to SpreadsheetHeaderRows\n                , { superHeaderRendering: superHeaderRendering, colSpecs: colSpecs, onColWidthChange: this.handleColWidthChange, rowInnerHeights: contentArg.rowSyncHeights })), spreadsheetBodyRows: (contentArg) => (createElement(Fragment, null, this.renderSpreadsheetRows(rowNodes, colSpecs, contentArg.rowSyncHeights))), timeCols: slatCols, timeHeaderContent: (contentArg) => (createElement(TimelineHeader, { clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, dateProfile: props.dateProfile, tDateProfile: tDateProfile, slatCoords: state.slatCoords, rowInnerHeights: contentArg.rowSyncHeights, onMaxCushionWidth: slotMinWidth ? null : this.handleMaxCushionWidth })), timeBodyContent: (contentArg) => (createElement(ResourceTimelineGrid, { dateProfile: props.dateProfile, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, expandRows: contentArg.expandRows, tDateProfile: tDateProfile, rowNodes: rowNodes, businessHours: props.businessHours, dateSelection: props.dateSelection, eventStore: props.eventStore, eventUiBases: props.eventUiBases, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, resourceStore: props.resourceStore, nextDayThreshold: context.options.nextDayThreshold, rowInnerHeights: contentArg.rowSyncHeights, onSlatCoords: this.handleSlatCoords, onRowCoords: this.handleRowCoords, onScrollLeftRequest: this.handleScrollLeftRequest, onRowHeightChange: contentArg.reportRowHeightChange })) })));\n    }\n    renderSpreadsheetRows(nodes, colSpecs, rowSyncHeights) {\n        return nodes.map((node, index) => {\n            if (node.group) {\n                return (createElement(SpreadsheetGroupRow, { key: node.id, id: node.id, spreadsheetColCnt: colSpecs.length, isExpanded: node.isExpanded, group: node.group, innerHeight: rowSyncHeights[index] || '' }));\n            }\n            if (node.resource) {\n                return (createElement(SpreadsheetRow, { key: node.id, colSpecs: colSpecs, rowSpans: node.rowSpans, depth: node.depth, isExpanded: node.isExpanded, hasChildren: node.hasChildren, resource: node.resource, innerHeight: rowSyncHeights[index] || '' }));\n            }\n            return null;\n        });\n    }\n    componentDidMount() {\n        this.renderedRowNodes = this.rowNodes;\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n    getSnapshotBeforeUpdate() {\n        if (!this.props.forPrint) { // because print-view is always zero?\n            return { resourceScroll: this.queryResourceScroll() };\n        }\n        return {};\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.renderedRowNodes = this.rowNodes;\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n        if (snapshot.resourceScroll) {\n            this.handleScrollRequest(snapshot.resourceScroll); // TODO: this gets triggered too often\n        }\n    }\n    componentWillUnmount() {\n        this.scrollResponder.detach();\n    }\n    computeFallbackSlotMinWidth(tDateProfile) {\n        return Math.max(30, ((this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel));\n    }\n    queryResourceScroll() {\n        let { rowCoords, renderedRowNodes } = this;\n        if (rowCoords) {\n            let layout = this.layoutRef.current;\n            let trBottoms = rowCoords.bottoms;\n            let scrollTop = layout.getResourceScroll();\n            let scroll = {};\n            for (let i = 0; i < trBottoms.length; i += 1) {\n                let rowNode = renderedRowNodes[i];\n                let elBottom = trBottoms[i] - scrollTop; // from the top of the scroller\n                if (elBottom > 0) {\n                    scroll.rowId = rowNode.id;\n                    scroll.fromBottom = elBottom;\n                    break;\n                }\n            }\n            return scroll;\n        }\n        return null;\n    }\n}\nResourceTimelineView.addStateEquality({\n    spreadsheetColWidths: isArraysEqual,\n});\nfunction buildRowIndex(rowNodes) {\n    let rowIdToIndex = {};\n    for (let i = 0; i < rowNodes.length; i += 1) {\n        rowIdToIndex[rowNodes[i].id] = i;\n    }\n    return rowIdToIndex;\n}\nfunction buildSpreadsheetCols(colSpecs, forcedWidths, fallbackWidth = '') {\n    return colSpecs.map((colSpec, i) => ({\n        className: colSpec.isMain ? 'fc-main-col' : '',\n        width: forcedWidths[i] || colSpec.width || fallbackWidth,\n    }));\n}\nfunction hasNesting(nodes) {\n    for (let node of nodes) {\n        if (node.group) {\n            return true;\n        }\n        if (node.resource) {\n            if (node.hasChildren) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction processColOptions(options) {\n    let allColSpecs = options.resourceAreaColumns || [];\n    let superHeaderRendering = null;\n    if (!allColSpecs.length) {\n        allColSpecs.push({\n            headerClassNames: options.resourceAreaHeaderClassNames,\n            headerContent: options.resourceAreaHeaderContent,\n            headerDefault: () => 'Resources',\n            headerDidMount: options.resourceAreaHeaderDidMount,\n            headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n        });\n    }\n    else if (options.resourceAreaHeaderContent) { // weird way to determine if content\n        superHeaderRendering = {\n            headerClassNames: options.resourceAreaHeaderClassNames,\n            headerContent: options.resourceAreaHeaderContent,\n            headerDidMount: options.resourceAreaHeaderDidMount,\n            headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n        };\n    }\n    let plainColSpecs = [];\n    let groupColSpecs = []; // part of the colSpecs, but filtered out in order to put first\n    let groupSpecs = [];\n    let isVGrouping = false;\n    for (let colSpec of allColSpecs) {\n        if (colSpec.group) {\n            groupColSpecs.push(Object.assign(Object.assign({}, colSpec), { cellClassNames: colSpec.cellClassNames || options.resourceGroupLabelClassNames, cellContent: colSpec.cellContent || options.resourceGroupLabelContent, cellDidMount: colSpec.cellDidMount || options.resourceGroupLabelDidMount, cellWillUnmount: colSpec.cellWillUnmount || options.resourceGroupLaneWillUnmount }));\n        }\n        else {\n            plainColSpecs.push(colSpec);\n        }\n    }\n    // BAD: mutates a user-supplied option\n    let mainColSpec = plainColSpecs[0];\n    mainColSpec.isMain = true;\n    mainColSpec.cellClassNames = mainColSpec.cellClassNames || options.resourceLabelClassNames;\n    mainColSpec.cellContent = mainColSpec.cellContent || options.resourceLabelContent;\n    mainColSpec.cellDidMount = mainColSpec.cellDidMount || options.resourceLabelDidMount;\n    mainColSpec.cellWillUnmount = mainColSpec.cellWillUnmount || options.resourceLabelWillUnmount;\n    if (groupColSpecs.length) {\n        groupSpecs = groupColSpecs;\n        isVGrouping = true;\n    }\n    else {\n        let hGroupField = options.resourceGroupField;\n        if (hGroupField) {\n            groupSpecs.push({\n                field: hGroupField,\n                labelClassNames: options.resourceGroupLabelClassNames,\n                labelContent: options.resourceGroupLabelContent,\n                labelDidMount: options.resourceGroupLabelDidMount,\n                labelWillUnmount: options.resourceGroupLabelWillUnmount,\n                laneClassNames: options.resourceGroupLaneClassNames,\n                laneContent: options.resourceGroupLaneContent,\n                laneDidMount: options.resourceGroupLaneDidMount,\n                laneWillUnmount: options.resourceGroupLaneWillUnmount,\n            });\n        }\n    }\n    let allOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n    let plainOrderSpecs = [];\n    for (let orderSpec of allOrderSpecs) {\n        let isGroup = false;\n        for (let groupSpec of groupSpecs) {\n            if (groupSpec.field === orderSpec.field) {\n                groupSpec.order = orderSpec.order; // -1, 0, 1\n                isGroup = true;\n                break;\n            }\n        }\n        if (!isGroup) {\n            plainOrderSpecs.push(orderSpec);\n        }\n    }\n    return {\n        superHeaderRendering,\n        isVGrouping,\n        groupSpecs,\n        colSpecs: groupColSpecs.concat(plainColSpecs),\n        orderSpecs: plainOrderSpecs,\n    };\n}\n\nexport { ResourceTimelineLane, ResourceTimelineView, SpreadsheetRow };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}