{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { UnionMode } from './union-mode.mjs';\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child `typeIds[offset]` is the id used in the type vector\n */\nexport var Union = /*#__PURE__*/function () {\n  function Union() {\n    _classCallCheck(this, Union);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(Union, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"mode\",\n    value: function mode() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : UnionMode.Sparse;\n    }\n  }, {\n    key: \"typeIds\",\n    value: function typeIds(index) {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n  }, {\n    key: \"typeIdsLength\",\n    value: function typeIdsLength() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n  }, {\n    key: \"typeIdsArray\",\n    value: function typeIdsArray() {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n  }], [{\n    key: \"getRootAsUnion\",\n    value: function getRootAsUnion(bb, obj) {\n      return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsUnion\",\n    value: function getSizePrefixedRootAsUnion(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startUnion\",\n    value: function startUnion(builder) {\n      builder.startObject(2);\n    }\n  }, {\n    key: \"addMode\",\n    value: function addMode(builder, mode) {\n      builder.addFieldInt16(0, mode, UnionMode.Sparse);\n    }\n  }, {\n    key: \"addTypeIds\",\n    value: function addTypeIds(builder, typeIdsOffset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n  }, {\n    key: \"createTypeIdsVector\",\n    value: function createTypeIdsVector(builder, data) {\n      builder.startVector(4, data.length, 4);\n      for (var i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n  }, {\n    key: \"startTypeIdsVector\",\n    value: function startTypeIdsVector(builder, numElems) {\n      builder.startVector(4, numElems, 4);\n    }\n  }, {\n    key: \"endUnion\",\n    value: function endUnion(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createUnion\",\n    value: function createUnion(builder, mode, typeIdsOffset) {\n      Union.startUnion(builder);\n      Union.addMode(builder, mode);\n      Union.addTypeIds(builder, typeIdsOffset);\n      return Union.endUnion(builder);\n    }\n  }]);\n  return Union;\n}();","map":{"version":3,"names":["flatbuffers","UnionMode","Union","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","mode","offset","__offset","readInt16","Sparse","typeIds","index","readInt32","__vector","typeIdsLength","__vector_len","typeIdsArray","Int32Array","bytes","buffer","byteOffset","getRootAsUnion","obj","position","getSizePrefixedRootAsUnion","setPosition","SIZE_PREFIX_LENGTH","startUnion","builder","startObject","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startVector","length","addInt32","endVector","startTypeIdsVector","numElems","endUnion","endObject","createUnion"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\union.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { UnionMode } from './union-mode.js';\n\n\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child `typeIds[offset]` is the id used in the type vector\n */\nexport class Union {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):Union {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsUnion(bb:flatbuffers.ByteBuffer, obj?:Union):Union {\n  return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsUnion(bb:flatbuffers.ByteBuffer, obj?:Union):Union {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nmode():UnionMode {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : UnionMode.Sparse;\n}\n\ntypeIds(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n}\n\ntypeIdsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\ntypeIdsArray():Int32Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nstatic startUnion(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addMode(builder:flatbuffers.Builder, mode:UnionMode) {\n  builder.addFieldInt16(0, mode, UnionMode.Sparse);\n}\n\nstatic addTypeIds(builder:flatbuffers.Builder, typeIdsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, typeIdsOffset, 0);\n}\n\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createTypeIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt32(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startTypeIdsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endUnion(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createUnion(builder:flatbuffers.Builder, mode:UnionMode, typeIdsOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Union.startUnion(builder);\n  Union.addMode(builder, mode);\n  Union.addTypeIds(builder, typeIdsOffset);\n  return Union.endUnion(builder);\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}