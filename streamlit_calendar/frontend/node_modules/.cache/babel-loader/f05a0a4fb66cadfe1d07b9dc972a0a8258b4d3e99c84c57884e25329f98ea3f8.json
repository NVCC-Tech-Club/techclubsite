{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { RecordBatch } from './record-batch.mjs';\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n */\nexport var DictionaryBatch = /*#__PURE__*/function () {\n  function DictionaryBatch() {\n    _classCallCheck(this, DictionaryBatch);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(DictionaryBatch, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n  }, {\n    key: \"data\",\n    value: function data(obj) {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id. If isDelta is false this dictionary\n     * should replace the existing dictionary.\n     */\n  }, {\n    key: \"isDelta\",\n    value: function isDelta() {\n      var offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n  }], [{\n    key: \"getRootAsDictionaryBatch\",\n    value: function getRootAsDictionaryBatch(bb, obj) {\n      return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsDictionaryBatch\",\n    value: function getSizePrefixedRootAsDictionaryBatch(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startDictionaryBatch\",\n    value: function startDictionaryBatch(builder) {\n      builder.startObject(3);\n    }\n  }, {\n    key: \"addId\",\n    value: function addId(builder, id) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n  }, {\n    key: \"addData\",\n    value: function addData(builder, dataOffset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n  }, {\n    key: \"addIsDelta\",\n    value: function addIsDelta(builder, isDelta) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n  }, {\n    key: \"endDictionaryBatch\",\n    value: function endDictionaryBatch(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }]);\n  return DictionaryBatch;\n}();","map":{"version":3,"names":["flatbuffers","RecordBatch","DictionaryBatch","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","id","offset","__offset","readInt64","createLong","data","obj","__indirect","isDelta","readInt8","getRootAsDictionaryBatch","readInt32","position","getSizePrefixedRootAsDictionaryBatch","setPosition","SIZE_PREFIX_LENGTH","startDictionaryBatch","builder","startObject","addId","addFieldInt64","addData","dataOffset","addFieldOffset","addIsDelta","addFieldInt8","endDictionaryBatch","endObject"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\dictionary-batch.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { RecordBatch } from './record-batch.js';\n\n\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n */\nexport class DictionaryBatch {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):DictionaryBatch {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nid():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\ndata(obj?:RecordBatch):RecordBatch|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new RecordBatch()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * If isDelta is true the values in the dictionary are to be appended to a\n * dictionary with the indicated id. If isDelta is false this dictionary\n * should replace the existing dictionary.\n */\nisDelta():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nstatic startDictionaryBatch(builder:flatbuffers.Builder) {\n  builder.startObject(3);\n}\n\nstatic addId(builder:flatbuffers.Builder, id:flatbuffers.Long) {\n  builder.addFieldInt64(0, id, builder.createLong(0, 0));\n}\n\nstatic addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, dataOffset, 0);\n}\n\nstatic addIsDelta(builder:flatbuffers.Builder, isDelta:boolean) {\n  builder.addFieldInt8(2, +isDelta, +false);\n}\n\nstatic endDictionaryBatch(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n"],"mappings":";;AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C,SAASC,WAAW,QAAQ,oBAAoB;AAGhD;;;;;;;;AAQA,WAAaC,eAAe;EAA5B,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;IACE,KAAAE,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAyDZ;EAACC,YAAA,CAAAJ,eAAA;IAAAK,GAAA;IAAAC,KAAA,EAxDD,SAAAC,OAAOC,CAAQ,EAAEN,EAAyB;MACxC,IAAI,CAACC,MAAM,GAAGK,CAAC;MACf,IAAI,CAACN,EAAE,GAAGA,EAAE;MACZ,OAAO,IAAI;IACb;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAWD,SAAAG,GAAA,EAAE;MACA,IAAMC,MAAM,GAAG,IAAI,CAACR,EAAG,CAACS,QAAQ,CAAC,IAAI,CAACR,MAAM,EAAE,CAAC,CAAC;MAChD,OAAOO,MAAM,GAAG,IAAI,CAACR,EAAG,CAACU,SAAS,CAAC,IAAI,CAACT,MAAM,GAAGO,MAAM,CAAC,GAAG,IAAI,CAACR,EAAG,CAACW,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IACtF;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAQ,KAAKC,GAAgB;MACnB,IAAML,MAAM,GAAG,IAAI,CAACR,EAAG,CAACS,QAAQ,CAAC,IAAI,CAACR,MAAM,EAAE,CAAC,CAAC;MAChD,OAAOO,MAAM,GAAG,CAACK,GAAG,IAAI,IAAIhB,WAAW,EAAE,EAAEQ,MAAM,CAAC,IAAI,CAACL,EAAG,CAACc,UAAU,CAAC,IAAI,CAACb,MAAM,GAAGO,MAAM,CAAC,EAAE,IAAI,CAACR,EAAG,CAAC,GAAG,IAAI;IAC/G;IAEA;;;;;EAAA;IAAAG,GAAA;IAAAC,KAAA,EAKA,SAAAW,QAAA,EAAO;MACL,IAAMP,MAAM,GAAG,IAAI,CAACR,EAAG,CAACS,QAAQ,CAAC,IAAI,CAACR,MAAM,EAAE,CAAC,CAAC;MAChD,OAAOO,MAAM,GAAG,CAAC,CAAC,IAAI,CAACR,EAAG,CAACgB,QAAQ,CAAC,IAAI,CAACf,MAAM,GAAGO,MAAM,CAAC,GAAG,KAAK;IACnE;EAAC;IAAAL,GAAA;IAAAC,KAAA,EA3BD,SAAAa,yBAAgCjB,EAAyB,EAAEa,GAAoB;MAC7E,OAAO,CAACA,GAAG,IAAI,IAAIf,eAAe,EAAE,EAAEO,MAAM,CAACL,EAAE,CAACkB,SAAS,CAAClB,EAAE,CAACmB,QAAQ,EAAE,CAAC,GAAGnB,EAAE,CAACmB,QAAQ,EAAE,EAAEnB,EAAE,CAAC;IAC/F;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAgB,qCAA4CpB,EAAyB,EAAEa,GAAoB;MACzFb,EAAE,CAACqB,WAAW,CAACrB,EAAE,CAACmB,QAAQ,EAAE,GAAGvB,WAAW,CAAC0B,kBAAkB,CAAC;MAC9D,OAAO,CAACT,GAAG,IAAI,IAAIf,eAAe,EAAE,EAAEO,MAAM,CAACL,EAAE,CAACkB,SAAS,CAAClB,EAAE,CAACmB,QAAQ,EAAE,CAAC,GAAGnB,EAAE,CAACmB,QAAQ,EAAE,EAAEnB,EAAE,CAAC;IAC/F;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAsBD,SAAAmB,qBAA4BC,OAA2B;MACrDA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;IACxB;EAAC;IAAAtB,GAAA;IAAAC,KAAA,EAED,SAAAsB,MAAaF,OAA2B,EAAEjB,EAAmB;MAC3DiB,OAAO,CAACG,aAAa,CAAC,CAAC,EAAEpB,EAAE,EAAEiB,OAAO,CAACb,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAwB,QAAeJ,OAA2B,EAAEK,UAA6B;MACvEL,OAAO,CAACM,cAAc,CAAC,CAAC,EAAED,UAAU,EAAE,CAAC,CAAC;IAC1C;EAAC;IAAA1B,GAAA;IAAAC,KAAA,EAED,SAAA2B,WAAkBP,OAA2B,EAAET,OAAe;MAC5DS,OAAO,CAACQ,YAAY,CAAC,CAAC,EAAE,CAACjB,OAAO,EAAE,CAAC,KAAK,CAAC;IAC3C;EAAC;IAAAZ,GAAA;IAAAC,KAAA,EAED,SAAA6B,mBAA0BT,OAA2B;MACnD,IAAMhB,MAAM,GAAGgB,OAAO,CAACU,SAAS,EAAE;MAClC,OAAO1B,MAAM;IACf;EAAC;EAAA,OAAAV,eAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}