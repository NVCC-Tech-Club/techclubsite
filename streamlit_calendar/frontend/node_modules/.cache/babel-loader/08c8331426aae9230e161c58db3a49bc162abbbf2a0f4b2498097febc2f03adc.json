{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _toConsumableArray from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(readAllSync);\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from \"tslib\";\nimport { makeData } from '../data.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Struct } from '../type.mjs';\nimport { MessageHeader } from '../enum.mjs';\nimport { Footer } from './metadata/file.mjs';\nimport streamAdapters from '../io/adapters.mjs';\nimport { ByteStream, AsyncByteStream } from '../io/stream.mjs';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file.mjs';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader.mjs';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.mjs';\nimport { ITERATOR_DONE, ReadableInterop } from '../io/interfaces.mjs';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message.mjs';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat.mjs';\nexport var RecordBatchReader = /*#__PURE__*/function (_ReadableInterop, _Symbol$iterator, _Symbol$asyncIterator) {\n  _inherits(RecordBatchReader, _ReadableInterop);\n  var _super2 = _createSuper(RecordBatchReader);\n  function RecordBatchReader(impl) {\n    var _this;\n    _classCallCheck(this, RecordBatchReader);\n    _this = _super2.call(this);\n    _this._impl = impl;\n    return _this;\n  }\n  _createClass(RecordBatchReader, [{\n    key: \"closed\",\n    get: function get() {\n      return this._impl.closed;\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._impl.schema;\n    }\n  }, {\n    key: \"autoDestroy\",\n    get: function get() {\n      return this._impl.autoDestroy;\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._impl.dictionaries;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._impl.numDictionaries;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._impl.numRecordBatches;\n    }\n  }, {\n    key: \"footer\",\n    get: function get() {\n      return this._impl.isFile() ? this._impl.footer : null;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return this._impl.isSync();\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return this._impl.isAsync();\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return this._impl.isFile();\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return this._impl.isStream();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return this._impl.next();\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this._impl.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this._impl.return(value);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this._impl.cancel();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._impl.reset(schema);\n      this._DOMStream = undefined;\n      this._nodeStream = undefined;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      var _this2 = this;\n      var opening = this._impl.open(options);\n      return isPromise(opening) ? opening.then(function () {\n        return _this2;\n      }) : this;\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream() {\n      var _this3 = this;\n      return streamAdapters.toDOMStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this3;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this3;\n      }));\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream() {\n      var _this4 = this;\n      return streamAdapters.toNodeStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this4;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this4;\n      }), {\n        objectMode: true\n      });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(\n    // @ts-ignore\n    writableStrategy,\n    // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(source) {\n      var _this5 = this;\n      if (source instanceof RecordBatchReader) {\n        return source;\n      } else if (isArrowJSON(source)) {\n        return fromArrowJSON(source);\n      } else if (isFileHandle(source)) {\n        return fromFileHandle(source);\n      } else if (isPromise(source)) {\n        return function () {\n          return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = RecordBatchReader;\n                  _context.next = 3;\n                  return source;\n                case 3:\n                  _context.t1 = _context.sent;\n                  _context.next = 6;\n                  return _context.t0.from.call(_context.t0, _context.t1);\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n        }();\n      } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n        return fromAsyncByteStream(new AsyncByteStream(source));\n      }\n      return fromByteStream(new ByteStream(source));\n    }\n    /** @nocollapse */\n  }, {\n    key: \"readAll\",\n    value: function readAll(source) {\n      if (source instanceof RecordBatchReader) {\n        return source.isSync() ? readAllSync(source) : readAllAsync(source);\n      } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n        return readAllSync(source);\n      }\n      return readAllAsync(source);\n    }\n  }]);\n  return RecordBatchReader;\n}(ReadableInterop, Symbol.iterator, Symbol.asyncIterator);\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport var RecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader, _Symbol$iterator2, _Symbol$asyncIterator2) {\n  _inherits(RecordBatchStreamReader, _RecordBatchReader);\n  var _super3 = _createSuper(RecordBatchStreamReader);\n  function RecordBatchStreamReader(_impl) {\n    var _this6;\n    _classCallCheck(this, RecordBatchStreamReader);\n    _this6 = _super3.call(this, _impl);\n    _this6._impl = _impl;\n    return _this6;\n  }\n  _createClass(RecordBatchStreamReader, [{\n    key: \"readAll\",\n    value: function readAll() {\n      return _toConsumableArray(this);\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _a() {\n        return _regeneratorRuntime().wrap(function _a$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = __await;\n              return _context2.delegateYield(__asyncDelegator(__asyncValues(this[Symbol.iterator]())), \"t1\", 2);\n            case 2:\n              _context2.t2 = _context2.t1;\n              _context2.next = 5;\n              return (0, _context2.t0)(_context2.t2);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _a, this);\n      }));\n    }\n  }]);\n  return RecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var AsyncRecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader2, _Symbol$iterator3, _Symbol$asyncIterator3) {\n  _inherits(AsyncRecordBatchStreamReader, _RecordBatchReader2);\n  var _super4 = _createSuper(AsyncRecordBatchStreamReader);\n  function AsyncRecordBatchStreamReader(_impl) {\n    var _this7;\n    _classCallCheck(this, AsyncRecordBatchStreamReader);\n    _this7 = _super4.call(this, _impl);\n    _this7._impl = _impl;\n    return _this7;\n  }\n  _createClass(AsyncRecordBatchStreamReader, [{\n    key: \"readAll\",\n    value: function readAll() {\n      var e_1, _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var batches, _b, _c, batch;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              batches = new Array();\n              _context3.prev = 1;\n              _b = __asyncValues(this);\n            case 3:\n              _context3.next = 5;\n              return _b.next();\n            case 5:\n              _c = _context3.sent;\n              if (_c.done) {\n                _context3.next = 11;\n                break;\n              }\n              batch = _c.value;\n              batches.push(batch);\n            case 9:\n              _context3.next = 3;\n              break;\n            case 11:\n              _context3.next = 16;\n              break;\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              e_1 = {\n                error: _context3.t0\n              };\n            case 16:\n              _context3.prev = 16;\n              _context3.prev = 17;\n              if (!(_c && !_c.done && (_a = _b.return))) {\n                _context3.next = 21;\n                break;\n              }\n              _context3.next = 21;\n              return _a.call(_b);\n            case 21:\n              _context3.prev = 21;\n              if (!e_1) {\n                _context3.next = 24;\n                break;\n              }\n              throw e_1.error;\n            case 24:\n              return _context3.finish(21);\n            case 25:\n              return _context3.finish(16);\n            case 26:\n              return _context3.abrupt(\"return\", batches);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, this, [[1, 13, 16, 26], [17,, 21, 25]]);\n      }));\n    }\n  }, {\n    key: _Symbol$iterator3,\n    value: function value() {\n      throw new Error(\"AsyncRecordBatchStreamReader is not Iterable\");\n    }\n  }, {\n    key: _Symbol$asyncIterator3,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }]);\n  return AsyncRecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var RecordBatchFileReader = /*#__PURE__*/function (_RecordBatchStreamRea) {\n  _inherits(RecordBatchFileReader, _RecordBatchStreamRea);\n  var _super5 = _createSuper(RecordBatchFileReader);\n  function RecordBatchFileReader(_impl) {\n    var _this8;\n    _classCallCheck(this, RecordBatchFileReader);\n    _this8 = _super5.call(this, _impl);\n    _this8._impl = _impl;\n    return _this8;\n  }\n  return _createClass(RecordBatchFileReader);\n}(RecordBatchStreamReader);\n/** @ignore */\nexport var AsyncRecordBatchFileReader = /*#__PURE__*/function (_AsyncRecordBatchStre) {\n  _inherits(AsyncRecordBatchFileReader, _AsyncRecordBatchStre);\n  var _super6 = _createSuper(AsyncRecordBatchFileReader);\n  function AsyncRecordBatchFileReader(_impl) {\n    var _this9;\n    _classCallCheck(this, AsyncRecordBatchFileReader);\n    _this9 = _super6.call(this, _impl);\n    _this9._impl = _impl;\n    return _this9;\n  }\n  return _createClass(AsyncRecordBatchFileReader);\n}(AsyncRecordBatchStreamReader);\n/** @ignore */\nvar RecordBatchReaderImpl = /*#__PURE__*/function () {\n  function RecordBatchReaderImpl() {\n    var dictionaries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n    _classCallCheck(this, RecordBatchReaderImpl);\n    this.closed = false;\n    this.autoDestroy = true;\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.dictionaries = dictionaries;\n  }\n  _createClass(RecordBatchReaderImpl, [{\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._dictionaryIndex;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._recordBatchIndex;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return false;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return false;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return false;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return false;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._dictionaryIndex = 0;\n      this._recordBatchIndex = 0;\n      this.schema = schema;\n      this.dictionaries = new Map();\n      return this;\n    }\n  }, {\n    key: \"_loadRecordBatch\",\n    value: function _loadRecordBatch(header, body) {\n      var children = this._loadVectors(header, body, this.schema.fields);\n      var data = makeData({\n        type: new Struct(this.schema.fields),\n        length: header.length,\n        children: children\n      });\n      return new RecordBatch(this.schema, data);\n    }\n  }, {\n    key: \"_loadDictionaryBatch\",\n    value: function _loadDictionaryBatch(header, body) {\n      var id = header.id,\n        isDelta = header.isDelta;\n      var dictionaries = this.dictionaries,\n        schema = this.schema;\n      var dictionary = dictionaries.get(id);\n      if (isDelta || !dictionary) {\n        var type = schema.dictionaries.get(id);\n        var data = this._loadVectors(header.data, body, [type]);\n        return (dictionary && isDelta ? dictionary.concat(new Vector(data)) : new Vector(data)).memoize();\n      }\n      return dictionary.memoize();\n    }\n  }, {\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchReaderImpl;\n}();\n/** @ignore */\nvar RecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp, _Symbol$iterator4) {\n  _inherits(RecordBatchStreamReaderImpl, _RecordBatchReaderImp);\n  var _super7 = _createSuper(RecordBatchStreamReaderImpl);\n  function RecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this10;\n    _classCallCheck(this, RecordBatchStreamReaderImpl);\n    _this10 = _super7.call(this, dictionaries);\n    _this10._reader = !isArrowJSON(source) ? new MessageReader(_this10._handle = source) : new JSONMessageReader(_this10._handle = source);\n    return _this10;\n  }\n  _createClass(RecordBatchStreamReaderImpl, [{\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$iterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.closed && (this.closed = true)) {\n        this.reset()._reader.return();\n        this._reader = null;\n        this.dictionaries = null;\n      }\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed) {\n        this.autoDestroy = shouldAutoDestroy(this, options);\n        if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n          this.cancel();\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.throw(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.return(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.closed) {\n        return ITERATOR_DONE;\n      }\n      var message;\n      var reader = this._reader;\n      while (message = this._readNextMessageAndValidate()) {\n        if (message.isSchema()) {\n          this.reset(message.header());\n        } else if (message.isRecordBatch()) {\n          this._recordBatchIndex++;\n          var header = message.header();\n          var buffer = reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return {\n            done: false,\n            value: recordBatch\n          };\n        } else if (message.isDictionaryBatch()) {\n          this._dictionaryIndex++;\n          var _header = message.header();\n          var _buffer = reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(_header, _buffer);\n          this.dictionaries.set(_header.id, vector);\n        }\n      }\n      if (this.schema && this._recordBatchIndex === 0) {\n        this._recordBatchIndex++;\n        return {\n          done: false,\n          value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n        };\n      }\n      return this.return();\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      return this._reader.readMessage(type);\n    }\n  }]);\n  return RecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.iterator);\n/** @ignore */\nvar AsyncRecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp2, _Symbol$asyncIterator4) {\n  _inherits(AsyncRecordBatchStreamReaderImpl, _RecordBatchReaderImp2);\n  var _super8 = _createSuper(AsyncRecordBatchStreamReaderImpl);\n  function AsyncRecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this11;\n    _classCallCheck(this, AsyncRecordBatchStreamReaderImpl);\n    _this11 = _super8.call(this, dictionaries);\n    _this11._reader = new AsyncMessageReader(_this11._handle = source);\n    return _this11;\n  }\n  _createClass(AsyncRecordBatchStreamReaderImpl, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$asyncIterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!this.closed && (this.closed = true))) {\n                _context4.next = 5;\n                break;\n              }\n              _context4.next = 3;\n              return this.reset()._reader.return();\n            case 3:\n              this._reader = null;\n              this.dictionaries = null;\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (this.closed) {\n                _context5.next = 10;\n                break;\n              }\n              this.autoDestroy = shouldAutoDestroy(this, options);\n              _context5.t0 = this.schema;\n              if (_context5.t0) {\n                _context5.next = 7;\n                break;\n              }\n              _context5.next = 6;\n              return this._reader.readSchema();\n            case 6:\n              _context5.t0 = this.schema = _context5.sent;\n            case 7:\n              if (_context5.t0) {\n                _context5.next = 10;\n                break;\n              }\n              _context5.next = 10;\n              return this.cancel();\n            case 10:\n              return _context5.abrupt(\"return\", this);\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 3;\n              return this.reset()._reader.throw(value);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n              return _context6.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context7.next = 4;\n                break;\n              }\n              _context7.next = 3;\n              return this.reset()._reader.return(value);\n            case 3:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 4:\n              return _context7.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var message, reader, header, buffer, recordBatch, _header2, _buffer2, vector;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!this.closed) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\", ITERATOR_DONE);\n            case 2:\n              reader = this._reader;\n            case 3:\n              _context8.next = 5;\n              return this._readNextMessageAndValidate();\n            case 5:\n              if (!(message = _context8.sent)) {\n                _context8.next = 31;\n                break;\n              }\n              if (!message.isSchema()) {\n                _context8.next = 11;\n                break;\n              }\n              _context8.next = 9;\n              return this.reset(message.header());\n            case 9:\n              _context8.next = 29;\n              break;\n            case 11:\n              if (!message.isRecordBatch()) {\n                _context8.next = 21;\n                break;\n              }\n              this._recordBatchIndex++;\n              header = message.header();\n              _context8.next = 16;\n              return reader.readMessageBody(message.bodyLength);\n            case 16:\n              buffer = _context8.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context8.abrupt(\"return\", {\n                done: false,\n                value: recordBatch\n              });\n            case 21:\n              if (!message.isDictionaryBatch()) {\n                _context8.next = 29;\n                break;\n              }\n              this._dictionaryIndex++;\n              _header2 = message.header();\n              _context8.next = 26;\n              return reader.readMessageBody(message.bodyLength);\n            case 26:\n              _buffer2 = _context8.sent;\n              vector = this._loadDictionaryBatch(_header2, _buffer2);\n              this.dictionaries.set(_header2.id, vector);\n            case 29:\n              _context8.next = 3;\n              break;\n            case 31:\n              if (!(this.schema && this._recordBatchIndex === 0)) {\n                _context8.next = 34;\n                break;\n              }\n              this._recordBatchIndex++;\n              return _context8.abrupt(\"return\", {\n                done: false,\n                value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n              });\n            case 34:\n              _context8.next = 36;\n              return this.return();\n            case 36:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 37:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._reader.readMessage(type);\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n  }]);\n  return AsyncRecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.asyncIterator);\n/** @ignore */\nvar RecordBatchFileReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea2) {\n  _inherits(RecordBatchFileReaderImpl, _RecordBatchStreamRea2);\n  var _super9 = _createSuper(RecordBatchFileReaderImpl);\n  function RecordBatchFileReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchFileReaderImpl);\n    return _super9.call(this, source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n  }\n  _createClass(RecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed && !this._footer) {\n        this.schema = (this._footer = this._readFooter()).schema;\n        var _iterator = _createForOfIteratorHelper(this._footer.dictionaryBatches()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var block = _step.value;\n            block && this._readDictionaryBatch(this._dictionaryIndex++);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return _get(_getPrototypeOf(RecordBatchFileReaderImpl.prototype), \"open\", this).call(this, options);\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      var _a;\n      if (this.closed) {\n        return null;\n      }\n      if (!this._footer) {\n        this.open();\n      }\n      var block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.RecordBatch);\n        if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return recordBatch;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function _readDictionaryBatch(index) {\n      var _a;\n      var block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n        if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(header, buffer);\n          this.dictionaries.set(header.id, vector);\n        }\n      }\n    }\n  }, {\n    key: \"_readFooter\",\n    value: function _readFooter() {\n      var _handle = this._handle;\n      var offset = _handle.size - magicAndPadding;\n      var length = _handle.readInt32(offset);\n      var buffer = _handle.readAt(offset - length, length);\n      return Footer.decode(buffer);\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      var _a;\n      if (!this._footer) {\n        this.open();\n      }\n      if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n        var block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(this._recordBatchIndex);\n        if (block && this._handle.seek(block.offset)) {\n          return this._reader.readMessage(type);\n        }\n      }\n      return null;\n    }\n  }]);\n  return RecordBatchFileReaderImpl;\n}(RecordBatchStreamReaderImpl);\n/** @ignore */\nvar AsyncRecordBatchFileReaderImpl = /*#__PURE__*/function (_AsyncRecordBatchStre2) {\n  _inherits(AsyncRecordBatchFileReaderImpl, _AsyncRecordBatchStre2);\n  var _super10 = _createSuper(AsyncRecordBatchFileReaderImpl);\n  function AsyncRecordBatchFileReaderImpl(source) {\n    _classCallCheck(this, AsyncRecordBatchFileReaderImpl);\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n    var byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n    var dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n    return _super10.call(this, source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n  }\n  _createClass(AsyncRecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      var _this12 = this;\n      var _super = Object.create(null, {\n        open: {\n          get: function get() {\n            return _get(_getPrototypeOf(AsyncRecordBatchFileReaderImpl.prototype), \"open\", _this12);\n          }\n        }\n      });\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _iterator2, _step2, block;\n        return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!(!this.closed && !this._footer)) {\n                _context10.next = 23;\n                break;\n              }\n              _context10.next = 3;\n              return this._readFooter();\n            case 3:\n              this.schema = (this._footer = _context10.sent).schema;\n              _iterator2 = _createForOfIteratorHelper(this._footer.dictionaryBatches());\n              _context10.prev = 5;\n              _iterator2.s();\n            case 7:\n              if ((_step2 = _iterator2.n()).done) {\n                _context10.next = 15;\n                break;\n              }\n              block = _step2.value;\n              _context10.t0 = block;\n              if (!_context10.t0) {\n                _context10.next = 13;\n                break;\n              }\n              _context10.next = 13;\n              return this._readDictionaryBatch(this._dictionaryIndex++);\n            case 13:\n              _context10.next = 7;\n              break;\n            case 15:\n              _context10.next = 20;\n              break;\n            case 17:\n              _context10.prev = 17;\n              _context10.t1 = _context10[\"catch\"](5);\n              _iterator2.e(_context10.t1);\n            case 20:\n              _context10.prev = 20;\n              _iterator2.f();\n              return _context10.finish(20);\n            case 23:\n              _context10.next = 25;\n              return _super.open.call(this, options);\n            case 25:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 26:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee9, this, [[5, 17, 20, 23]]);\n      }));\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var block, message, header, buffer, recordBatch;\n        return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!this.closed) {\n                _context11.next = 2;\n                break;\n              }\n              return _context11.abrupt(\"return\", null);\n            case 2:\n              if (this._footer) {\n                _context11.next = 5;\n                break;\n              }\n              _context11.next = 5;\n              return this.open();\n            case 5:\n              block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);\n              _context11.t0 = block;\n              if (!_context11.t0) {\n                _context11.next = 11;\n                break;\n              }\n              _context11.next = 10;\n              return this._handle.seek(block.offset);\n            case 10:\n              _context11.t0 = _context11.sent;\n            case 11:\n              if (!_context11.t0) {\n                _context11.next = 22;\n                break;\n              }\n              _context11.next = 14;\n              return this._reader.readMessage(MessageHeader.RecordBatch);\n            case 14:\n              message = _context11.sent;\n              if (!(message === null || message === void 0 ? void 0 : message.isRecordBatch())) {\n                _context11.next = 22;\n                break;\n              }\n              header = message.header();\n              _context11.next = 19;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 19:\n              buffer = _context11.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context11.abrupt(\"return\", recordBatch);\n            case 22:\n              return _context11.abrupt(\"return\", null);\n            case 23:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function _readDictionaryBatch(index) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var block, message, header, buffer, vector;\n        return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);\n              _context12.t0 = block;\n              if (!_context12.t0) {\n                _context12.next = 6;\n                break;\n              }\n              _context12.next = 5;\n              return this._handle.seek(block.offset);\n            case 5:\n              _context12.t0 = _context12.sent;\n            case 6:\n              if (!_context12.t0) {\n                _context12.next = 17;\n                break;\n              }\n              _context12.next = 9;\n              return this._reader.readMessage(MessageHeader.DictionaryBatch);\n            case 9:\n              message = _context12.sent;\n              if (!(message === null || message === void 0 ? void 0 : message.isDictionaryBatch())) {\n                _context12.next = 17;\n                break;\n              }\n              header = message.header();\n              _context12.next = 14;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 14:\n              buffer = _context12.sent;\n              vector = this._loadDictionaryBatch(header, buffer);\n              this.dictionaries.set(header.id, vector);\n            case 17:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee11, this);\n      }));\n    }\n  }, {\n    key: \"_readFooter\",\n    value: function _readFooter() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var _handle, offset, length, buffer;\n        return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _handle = this._handle;\n              _context13.t0 = _handle._pending;\n              if (!_context13.t0) {\n                _context13.next = 5;\n                break;\n              }\n              _context13.next = 5;\n              return _handle._pending;\n            case 5:\n              offset = _handle.size - magicAndPadding;\n              _context13.next = 8;\n              return _handle.readInt32(offset);\n            case 8:\n              length = _context13.sent;\n              _context13.next = 11;\n              return _handle.readAt(offset - length, length);\n            case 11:\n              buffer = _context13.sent;\n              return _context13.abrupt(\"return\", Footer.decode(buffer));\n            case 13:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              if (this._footer) {\n                _context14.next = 3;\n                break;\n              }\n              _context14.next = 3;\n              return this.open();\n            case 3:\n              if (!(this._footer && this._recordBatchIndex < this.numRecordBatches)) {\n                _context14.next = 14;\n                break;\n              }\n              block = this._footer.getRecordBatch(this._recordBatchIndex);\n              _context14.t0 = block;\n              if (!_context14.t0) {\n                _context14.next = 10;\n                break;\n              }\n              _context14.next = 9;\n              return this._handle.seek(block.offset);\n            case 9:\n              _context14.t0 = _context14.sent;\n            case 10:\n              if (!_context14.t0) {\n                _context14.next = 14;\n                break;\n              }\n              _context14.next = 13;\n              return this._reader.readMessage(type);\n            case 13:\n              return _context14.abrupt(\"return\", _context14.sent);\n            case 14:\n              return _context14.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee13, this);\n      }));\n    }\n  }]);\n  return AsyncRecordBatchFileReaderImpl;\n}(AsyncRecordBatchStreamReaderImpl);\n/** @ignore */\nvar RecordBatchJSONReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea3) {\n  _inherits(RecordBatchJSONReaderImpl, _RecordBatchStreamRea3);\n  var _super11 = _createSuper(RecordBatchJSONReaderImpl);\n  function RecordBatchJSONReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchJSONReaderImpl);\n    return _super11.call(this, source, dictionaries);\n  }\n  _createClass(RecordBatchJSONReaderImpl, [{\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchJSONReaderImpl;\n}(RecordBatchStreamReaderImpl); //\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n  return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction readAllSync(source) {\n  var reader;\n  return _regeneratorRuntime().wrap(function readAllSync$(_context15) {\n    while (1) switch (_context15.prev = _context15.next) {\n      case 0:\n        reader = RecordBatchReader.from(source);\n        _context15.prev = 1;\n        if (reader.open({\n          autoDestroy: false\n        }).closed) {\n          _context15.next = 6;\n          break;\n        }\n      case 3:\n        _context15.next = 5;\n        return reader;\n      case 5:\n        if (!reader.reset().open().closed) {\n          _context15.next = 3;\n          break;\n        }\n      case 6:\n        _context15.prev = 6;\n        reader.cancel();\n        return _context15.finish(6);\n      case 9:\n      case \"end\":\n        return _context15.stop();\n    }\n  }, _marked, null, [[1,, 6, 9]]);\n}\n/** @ignore */\nfunction readAllAsync(source) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function readAllAsync_1() {\n    var reader;\n    return _regeneratorRuntime().wrap(function readAllAsync_1$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return __await(RecordBatchReader.from(source));\n        case 2:\n          reader = _context16.sent;\n          _context16.prev = 3;\n          _context16.next = 6;\n          return __await(reader.open({\n            autoDestroy: false\n          }));\n        case 6:\n          if (_context16.sent.closed) {\n            _context16.next = 14;\n            break;\n          }\n        case 7:\n          _context16.next = 9;\n          return __await(reader);\n        case 9:\n          _context16.next = 11;\n          return _context16.sent;\n        case 11:\n          _context16.next = 13;\n          return __await(reader.reset().open());\n        case 13:\n          if (!_context16.sent.closed) {\n            _context16.next = 7;\n            break;\n          }\n        case 14:\n          _context16.prev = 14;\n          _context16.next = 17;\n          return __await(reader.cancel());\n        case 17:\n          return _context16.finish(14);\n        case 18:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, readAllAsync_1, null, [[3,, 14, 18]]);\n  }));\n}\n/** @ignore */\nfunction fromArrowJSON(source) {\n  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n  var bytes = source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n    return _regeneratorRuntime().wrap(function _callee14$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee14);\n  })()));\n}\n/** @ignore */\nfunction fromAsyncByteStream(source) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n    var bytes;\n    return _regeneratorRuntime().wrap(function _callee16$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return source.peek(magicLength + 7 & ~7);\n        case 2:\n          bytes = _context19.sent;\n          if (!(bytes && bytes.byteLength >= 4)) {\n            _context19.next = 18;\n            break;\n          }\n          if (checkForMagicArrowString(bytes)) {\n            _context19.next = 8;\n            break;\n          }\n          _context19.t1 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));\n          _context19.next = 15;\n          break;\n        case 8:\n          _context19.t2 = RecordBatchFileReader;\n          _context19.t3 = RecordBatchFileReaderImpl;\n          _context19.next = 12;\n          return source.read();\n        case 12:\n          _context19.t4 = _context19.sent;\n          _context19.t5 = new _context19.t3(_context19.t4);\n          _context19.t1 = new _context19.t2(_context19.t5);\n        case 15:\n          _context19.t0 = _context19.t1;\n          _context19.next = 19;\n          break;\n        case 18:\n          _context19.t0 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function () {\n            return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n              return _regeneratorRuntime().wrap(function _callee15$(_context18) {\n                while (1) switch (_context18.prev = _context18.next) {\n                  case 0:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }, _callee15);\n            }));\n          }()));\n        case 19:\n          return _context19.abrupt(\"return\", _context19.t0);\n        case 20:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee16);\n  }));\n}\n/** @ignore */\nfunction fromFileHandle(source) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n    var _yield$source$stat, size, file;\n    return _regeneratorRuntime().wrap(function _callee17$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return source.stat();\n        case 2:\n          _yield$source$stat = _context20.sent;\n          size = _yield$source$stat.size;\n          file = new AsyncRandomAccessFile(source, size);\n          _context20.t0 = size >= magicX2AndPadding;\n          if (!_context20.t0) {\n            _context20.next = 12;\n            break;\n          }\n          _context20.t1 = checkForMagicArrowString;\n          _context20.next = 10;\n          return file.readAt(0, magicLength + 7 & ~7);\n        case 10:\n          _context20.t2 = _context20.sent;\n          _context20.t0 = (0, _context20.t1)(_context20.t2);\n        case 12:\n          if (!_context20.t0) {\n            _context20.next = 14;\n            break;\n          }\n          return _context20.abrupt(\"return\", new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file)));\n        case 14:\n          return _context20.abrupt(\"return\", new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file)));\n        case 15:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee17);\n  }));\n}","map":{"version":3,"names":["readAllSync","makeData","Vector","Struct","MessageHeader","Footer","streamAdapters","ByteStream","AsyncByteStream","RandomAccessFile","AsyncRandomAccessFile","VectorLoader","JSONVectorLoader","RecordBatch","_InternalEmptyPlaceholderRecordBatch","ITERATOR_DONE","ReadableInterop","MessageReader","AsyncMessageReader","JSONMessageReader","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","isPromise","isIterable","isAsyncIterable","isIteratorResult","isArrowJSON","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","RecordBatchReader","_ReadableInterop","_Symbol$iterator","_Symbol$asyncIterator","_inherits","_super2","_createSuper","impl","_this","_classCallCheck","call","_impl","_createClass","key","get","closed","schema","autoDestroy","dictionaries","numDictionaries","numRecordBatches","isFile","footer","value","isSync","isAsync","isStream","next","_throw","throw","_return","return","cancel","reset","_DOMStream","undefined","_nodeStream","open","options","_this2","opening","then","readRecordBatch","index","Symbol","iterator","asyncIterator","toDOMStream","_this3","_defineProperty","toNodeStream","_this4","objectMode","throughNode","Error","throughDOM","writableStrategy","readableStrategy","from","source","_this5","fromArrowJSON","fromFileHandle","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","t0","t1","sent","abrupt","stop","fromAsyncByteStream","fromByteStream","readAll","readAllAsync","ArrayBuffer","isView","RecordBatchStreamReader","_RecordBatchReader","_Symbol$iterator2","_Symbol$asyncIterator2","_super3","_this6","_toConsumableArray","__asyncGenerator","arguments","_a","_a$","_context2","__await","delegateYield","__asyncDelegator","__asyncValues","t2","AsyncRecordBatchStreamReader","_RecordBatchReader2","_Symbol$iterator3","_Symbol$asyncIterator3","_super4","_this7","batches","Array","_context3","_b","_c","done","batch","push","_callee2","RecordBatchFileReader","_RecordBatchStreamRea","_super5","_this8","AsyncRecordBatchFileReader","_AsyncRecordBatchStre","_super6","_this9","RecordBatchReaderImpl","length","Map","_dictionaryIndex","_recordBatchIndex","_loadRecordBatch","header","body","children","_loadVectors","fields","data","type","_loadDictionaryBatch","id","isDelta","dictionary","concat","memoize","types","nodes","buffers","visitMany","RecordBatchStreamReaderImpl","_RecordBatchReaderImp","_Symbol$iterator4","_super7","_this10","_reader","_handle","shouldAutoDestroy","readSchema","message","reader","_readNextMessageAndValidate","isSchema","isRecordBatch","buffer","readMessageBody","bodyLength","recordBatch","isDictionaryBatch","vector","set","readMessage","AsyncRecordBatchStreamReaderImpl","_RecordBatchReaderImp2","_Symbol$asyncIterator4","_super8","_this11","_context4","_callee3","_context5","_callee4","_context6","_callee5","_context7","_callee6","_context8","_callee7","_context9","_callee8","RecordBatchFileReaderImpl","_RecordBatchStreamRea2","_super9","_footer","_readFooter","_iterator","_createForOfIteratorHelper","dictionaryBatches","_step","s","n","block","_readDictionaryBatch","err","e","f","_get","_getPrototypeOf","prototype","getRecordBatch","seek","offset","getDictionaryBatch","DictionaryBatch","size","readInt32","readAt","decode","AsyncRecordBatchFileReaderImpl","_AsyncRecordBatchStre2","_super10","_len","rest","_key","byteLength","shift","_this12","_context10","_iterator2","_step2","finish","_super","_callee9","_context11","_callee10","_context12","_callee11","_context13","_pending","_callee12","_context14","_callee13","RecordBatchJSONReaderImpl","_RecordBatchStreamRea3","_super11","self","readAllSync$","_context15","_marked","_context16","bytes","peek","read","_callee14","_callee14$","_context17","_context19","t3","t4","t5","_callee15","_callee15$","_context18","_callee16","stat","_yield$source$stat","_context20","file","_callee17"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\ipc\\reader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { makeData } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { DataType, Struct, TypeMap } from '../type.js';\nimport { MessageHeader } from '../enum.js';\nimport { Footer } from './metadata/file.js';\nimport { Schema, Field } from '../schema.js';\nimport streamAdapters from '../io/adapters.js';\nimport { Message } from './metadata/message.js';\nimport * as metadata from './metadata/message.js';\nimport { ArrayBufferViewInput } from '../util/buffer.js';\nimport { ByteStream, AsyncByteStream } from '../io/stream.js';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file.js';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader.js';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.js';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces.js';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message.js';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat.js';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean };\n/** @ignore */ type RecordBatchReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends TypeMap = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends TypeMap = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends TypeMap = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>>this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>>this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends TypeMap>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>; readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends TypeMap = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends TypeMap = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends TypeMap = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg4): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    public static from<T extends TypeMap = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends TypeMap = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends TypeMap = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg4): AsyncIterableIterator<AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends TypeMap = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchReaders<T>>;\n    /** @nocollapse */\n    public static readAll<T extends TypeMap = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super(_impl); }\n    public readAll() { return [...this]; }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super(_impl); }\n    public async readAll() {\n        const batches = new Array<RecordBatch<T>>();\n        for await (const batch of this) { batches.push(batch); }\n        return batches;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends TypeMap = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super(_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends TypeMap = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super(_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends TypeMap = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends TypeMap = any> extends RecordBatchStreamReader<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends TypeMap = any> extends AsyncRecordBatchStreamReader<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends TypeMap = any> =\n    RecordBatchJSONReaderImpl<T> |\n    RecordBatchFileReaderImpl<T> |\n    RecordBatchStreamReaderImpl<T> |\n    AsyncRecordBatchFileReaderImpl<T> |\n    AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends TypeMap = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends TypeMap = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends TypeMap = any> implements RecordBatchReaderImpl<T> {\n\n    declare public schema: Schema<T>;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any>schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        const children = this._loadVectors(header, body, this.schema.fields);\n        const data = makeData({ type: new Struct(this.schema.fields), length: header.length, children });\n        return new RecordBatch(this.schema, data);\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            const data = this._loadVectors(header.data, body, [type]);\n            return (dictionary && isDelta ? dictionary.concat(\n                new Vector(data)) :\n                new Vector(data)).memoize() as Vector;\n        }\n        return dictionary.memoize();\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any>null;\n            this.dictionaries = <any>null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends TypeMap = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any>null;\n            this.dictionaries = <any>null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n\n    protected _footer?: Footer;\n    declare protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer?.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message?.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer?.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message?.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer?.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends TypeMap = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    declare protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number>rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>>rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer?.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message?.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer?.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message?.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends TypeMap = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends TypeMap = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any>source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends TypeMap = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any>source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends TypeMap>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends TypeMap>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function* (): any { }()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends TypeMap>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function* (): any { }()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends TypeMap>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding && checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n        return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}