{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ByteBuffer } from \"./byte-buffer\";\nimport { SIZEOF_SHORT, SIZE_PREFIX_LENGTH, SIZEOF_INT, FILE_IDENTIFIER_LENGTH } from \"./constants\";\nimport { Long } from \"./long\";\nexport var Builder = /*#__PURE__*/function () {\n  /**\r\n   * Create a FlatBufferBuilder.\r\n   */\n  function Builder(opt_initial_size) {\n    _classCallCheck(this, Builder);\n    /** Minimum alignment encountered so far. */\n    this.minalign = 1;\n    /** The vtable for the current table. */\n    this.vtable = null;\n    /** The amount of fields we're actually using. */\n    this.vtable_in_use = 0;\n    /** Whether we are currently serializing a table. */\n    this.isNested = false;\n    /** Starting offset of the current struct/table. */\n    this.object_start = 0;\n    /** List of offsets of all vtables. */\n    this.vtables = [];\n    /** For the current vector being built. */\n    this.vector_num_elems = 0;\n    /** False omits default values from the serialized data */\n    this.force_defaults = false;\n    this.string_maps = null;\n    var initial_size;\n    if (!opt_initial_size) {\n      initial_size = 1024;\n    } else {\n      initial_size = opt_initial_size;\n    }\n    /**\r\n     * @type {ByteBuffer}\r\n     * @private\r\n     */\n    this.bb = ByteBuffer.allocate(initial_size);\n    this.space = initial_size;\n  }\n  _createClass(Builder, [{\n    key: \"clear\",\n    value: function clear() {\n      this.bb.clear();\n      this.space = this.bb.capacity();\n      this.minalign = 1;\n      this.vtable = null;\n      this.vtable_in_use = 0;\n      this.isNested = false;\n      this.object_start = 0;\n      this.vtables = [];\n      this.vector_num_elems = 0;\n      this.force_defaults = false;\n      this.string_maps = null;\n    }\n    /**\r\n     * In order to save space, fields that are set to their default value\r\n     * don't get serialized into the buffer. Forcing defaults provides a\r\n     * way to manually disable this optimization.\r\n     *\r\n     * @param forceDefaults true always serializes default values\r\n     */\n  }, {\n    key: \"forceDefaults\",\n    value: function forceDefaults(_forceDefaults) {\n      this.force_defaults = _forceDefaults;\n    }\n    /**\r\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\r\n     * called finish(). The actual data starts at the ByteBuffer's current position,\r\n     * not necessarily at 0.\r\n     */\n  }, {\n    key: \"dataBuffer\",\n    value: function dataBuffer() {\n      return this.bb;\n    }\n    /**\r\n     * Get the bytes representing the FlatBuffer. Only call this after you've\r\n     * called finish().\r\n     */\n  }, {\n    key: \"asUint8Array\",\n    value: function asUint8Array() {\n      return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n    }\n    /**\r\n     * Prepare to write an element of `size` after `additional_bytes` have been\r\n     * written, e.g. if you write a string, you need to align such the int length\r\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\r\n     * you need to do is alignment, `additional_bytes` will be 0.\r\n     *\r\n     * @param size This is the of the new element to write\r\n     * @param additional_bytes The padding size\r\n     */\n  }, {\n    key: \"prep\",\n    value: function prep(size, additional_bytes) {\n      // Track the biggest thing we've ever aligned to.\n      if (size > this.minalign) {\n        this.minalign = size;\n      }\n      // Find the amount of alignment needed such that `size` is properly\n      // aligned after `additional_bytes`\n      var align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;\n      // Reallocate the buffer if needed.\n      while (this.space < align_size + size + additional_bytes) {\n        var old_buf_size = this.bb.capacity();\n        this.bb = Builder.growByteBuffer(this.bb);\n        this.space += this.bb.capacity() - old_buf_size;\n      }\n      this.pad(align_size);\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(byte_size) {\n      for (var i = 0; i < byte_size; i++) {\n        this.bb.writeInt8(--this.space, 0);\n      }\n    }\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(value) {\n      this.bb.writeInt8(this.space -= 1, value);\n    }\n  }, {\n    key: \"writeInt16\",\n    value: function writeInt16(value) {\n      this.bb.writeInt16(this.space -= 2, value);\n    }\n  }, {\n    key: \"writeInt32\",\n    value: function writeInt32(value) {\n      this.bb.writeInt32(this.space -= 4, value);\n    }\n  }, {\n    key: \"writeInt64\",\n    value: function writeInt64(value) {\n      this.bb.writeInt64(this.space -= 8, value);\n    }\n  }, {\n    key: \"writeFloat32\",\n    value: function writeFloat32(value) {\n      this.bb.writeFloat32(this.space -= 4, value);\n    }\n  }, {\n    key: \"writeFloat64\",\n    value: function writeFloat64(value) {\n      this.bb.writeFloat64(this.space -= 8, value);\n    }\n    /**\r\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int8` to add the the buffer.\r\n     */\n  }, {\n    key: \"addInt8\",\n    value: function addInt8(value) {\n      this.prep(1, 0);\n      this.writeInt8(value);\n    }\n    /**\r\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int16` to add the the buffer.\r\n     */\n  }, {\n    key: \"addInt16\",\n    value: function addInt16(value) {\n      this.prep(2, 0);\n      this.writeInt16(value);\n    }\n    /**\r\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int32` to add the the buffer.\r\n     */\n  }, {\n    key: \"addInt32\",\n    value: function addInt32(value) {\n      this.prep(4, 0);\n      this.writeInt32(value);\n    }\n    /**\r\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int64` to add the the buffer.\r\n     */\n  }, {\n    key: \"addInt64\",\n    value: function addInt64(value) {\n      this.prep(8, 0);\n      this.writeInt64(value);\n    }\n    /**\r\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float32` to add the the buffer.\r\n     */\n  }, {\n    key: \"addFloat32\",\n    value: function addFloat32(value) {\n      this.prep(4, 0);\n      this.writeFloat32(value);\n    }\n    /**\r\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float64` to add the the buffer.\r\n     */\n  }, {\n    key: \"addFloat64\",\n    value: function addFloat64(value) {\n      this.prep(8, 0);\n      this.writeFloat64(value);\n    }\n  }, {\n    key: \"addFieldInt8\",\n    value: function addFieldInt8(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addInt8(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldInt16\",\n    value: function addFieldInt16(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addInt16(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldInt32\",\n    value: function addFieldInt32(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addInt32(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldInt64\",\n    value: function addFieldInt64(voffset, value, defaultValue) {\n      if (this.force_defaults || !value.equals(defaultValue)) {\n        this.addInt64(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldFloat32\",\n    value: function addFieldFloat32(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addFloat32(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldFloat64\",\n    value: function addFieldFloat64(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addFloat64(value);\n        this.slot(voffset);\n      }\n    }\n  }, {\n    key: \"addFieldOffset\",\n    value: function addFieldOffset(voffset, value, defaultValue) {\n      if (this.force_defaults || value != defaultValue) {\n        this.addOffset(value);\n        this.slot(voffset);\n      }\n    }\n    /**\r\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\r\n     */\n  }, {\n    key: \"addFieldStruct\",\n    value: function addFieldStruct(voffset, value, defaultValue) {\n      if (value != defaultValue) {\n        this.nested(value);\n        this.slot(voffset);\n      }\n    }\n    /**\r\n     * Structures are always stored inline, they need to be created right\r\n     * where they're used.  You'll get this assertion failure if you\r\n     * created it elsewhere.\r\n     */\n  }, {\n    key: \"nested\",\n    value: function nested(obj) {\n      if (obj != this.offset()) {\n        throw new Error('FlatBuffers: struct must be serialized inline.');\n      }\n    }\n    /**\r\n     * Should not be creating any other object, string or vector\r\n     * while an object is being constructed\r\n     */\n  }, {\n    key: \"notNested\",\n    value: function notNested() {\n      if (this.isNested) {\n        throw new Error('FlatBuffers: object serialization must not be nested.');\n      }\n    }\n    /**\r\n     * Set the current vtable at `voffset` to the current location in the buffer.\r\n     */\n  }, {\n    key: \"slot\",\n    value: function slot(voffset) {\n      if (this.vtable !== null) this.vtable[voffset] = this.offset();\n    }\n    /**\r\n     * @returns Offset relative to the end of the buffer.\r\n     */\n  }, {\n    key: \"offset\",\n    value: function offset() {\n      return this.bb.capacity() - this.space;\n    }\n    /**\r\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\r\n     * the end of the new buffer (since we build the buffer backwards).\r\n     *\r\n     * @param bb The current buffer with the existing data\r\n     * @returns A new byte buffer with the old data copied\r\n     * to it. The data is located at the end of the buffer.\r\n     *\r\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\r\n     * it a uint8Array we need to suppress the type check:\r\n     * @suppress {checkTypes}\r\n     */\n  }, {\n    key: \"addOffset\",\n    value:\n    /**\r\n     * Adds on offset, relative to where it will be written.\r\n     *\r\n     * @param offset The offset to add.\r\n     */\n    function addOffset(offset) {\n      this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.\n      this.writeInt32(this.offset() - offset + SIZEOF_INT);\n    }\n    /**\r\n     * Start encoding a new object in the buffer.  Users will not usually need to\r\n     * call this directly. The FlatBuffers compiler will generate helper methods\r\n     * that call this method internally.\r\n     */\n  }, {\n    key: \"startObject\",\n    value: function startObject(numfields) {\n      this.notNested();\n      if (this.vtable == null) {\n        this.vtable = [];\n      }\n      this.vtable_in_use = numfields;\n      for (var i = 0; i < numfields; i++) {\n        this.vtable[i] = 0; // This will push additional elements as needed\n      }\n\n      this.isNested = true;\n      this.object_start = this.offset();\n    }\n    /**\r\n     * Finish off writing the object that is under construction.\r\n     *\r\n     * @returns The offset to the object inside `dataBuffer`\r\n     */\n  }, {\n    key: \"endObject\",\n    value: function endObject() {\n      if (this.vtable == null || !this.isNested) {\n        throw new Error('FlatBuffers: endObject called without startObject');\n      }\n      this.addInt32(0);\n      var vtableloc = this.offset();\n      // Trim trailing zeroes.\n      var i = this.vtable_in_use - 1;\n      // eslint-disable-next-line no-empty\n      for (; i >= 0 && this.vtable[i] == 0; i--) {}\n      var trimmed_size = i + 1;\n      // Write out the current vtable.\n      for (; i >= 0; i--) {\n        // Offset relative to the start of the table.\n        this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n      }\n      var standard_fields = 2; // The fields below:\n      this.addInt16(vtableloc - this.object_start);\n      var len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\n      this.addInt16(len);\n      // Search for an existing vtable that matches the current one.\n      var existing_vtable = 0;\n      var vt1 = this.space;\n      outer_loop: for (i = 0; i < this.vtables.length; i++) {\n        var vt2 = this.bb.capacity() - this.vtables[i];\n        if (len == this.bb.readInt16(vt2)) {\n          for (var j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\n            if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n              continue outer_loop;\n            }\n          }\n          existing_vtable = this.vtables[i];\n          break;\n        }\n      }\n      if (existing_vtable) {\n        // Found a match:\n        // Remove the current vtable.\n        this.space = this.bb.capacity() - vtableloc;\n        // Point table to existing vtable.\n        this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n      } else {\n        // No match:\n        // Add the location of the current vtable to the list of vtables.\n        this.vtables.push(this.offset());\n        // Point table to current vtable.\n        this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n      }\n      this.isNested = false;\n      return vtableloc;\n    }\n    /**\r\n     * Finalize a buffer, poiting to the given `root_table`.\r\n     */\n  }, {\n    key: \"finish\",\n    value: function finish(root_table, opt_file_identifier, opt_size_prefix) {\n      var size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\n      if (opt_file_identifier) {\n        var file_identifier = opt_file_identifier;\n        this.prep(this.minalign, SIZEOF_INT + FILE_IDENTIFIER_LENGTH + size_prefix);\n        if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\n          throw new Error('FlatBuffers: file identifier must be length ' + FILE_IDENTIFIER_LENGTH);\n        }\n        for (var i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n          this.writeInt8(file_identifier.charCodeAt(i));\n        }\n      }\n      this.prep(this.minalign, SIZEOF_INT + size_prefix);\n      this.addOffset(root_table);\n      if (size_prefix) {\n        this.addInt32(this.bb.capacity() - this.space);\n      }\n      this.bb.setPosition(this.space);\n    }\n    /**\r\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\r\n     */\n  }, {\n    key: \"finishSizePrefixed\",\n    value: function finishSizePrefixed(root_table, opt_file_identifier) {\n      this.finish(root_table, opt_file_identifier, true);\n    }\n    /**\r\n     * This checks a required field has been set in a given table that has\r\n     * just been constructed.\r\n     */\n  }, {\n    key: \"requiredField\",\n    value: function requiredField(table, field) {\n      var table_start = this.bb.capacity() - table;\n      var vtable_start = table_start - this.bb.readInt32(table_start);\n      var ok = this.bb.readInt16(vtable_start + field) != 0;\n      // If this fails, the caller will show what field needs to be set.\n      if (!ok) {\n        throw new Error('FlatBuffers: field ' + field + ' must be set');\n      }\n    }\n    /**\r\n     * Start a new array/vector of objects.  Users usually will not call\r\n     * this directly. The FlatBuffers compiler will create a start/end\r\n     * method for vector types in generated code.\r\n     *\r\n     * @param elem_size The size of each element in the array\r\n     * @param num_elems The number of elements in the array\r\n     * @param alignment The alignment of the array\r\n     */\n  }, {\n    key: \"startVector\",\n    value: function startVector(elem_size, num_elems, alignment) {\n      this.notNested();\n      this.vector_num_elems = num_elems;\n      this.prep(SIZEOF_INT, elem_size * num_elems);\n      this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n    }\n    /**\r\n     * Finish off the creation of an array and all its elements. The array must be\r\n     * created with `startVector`.\r\n     *\r\n     * @returns The offset at which the newly created array\r\n     * starts.\r\n     */\n  }, {\n    key: \"endVector\",\n    value: function endVector() {\n      this.writeInt32(this.vector_num_elems);\n      return this.offset();\n    }\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has\r\n     * already been seen, we return the offset of the already written string\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\n  }, {\n    key: \"createSharedString\",\n    value: function createSharedString(s) {\n      if (!s) {\n        return 0;\n      }\n      if (!this.string_maps) {\n        this.string_maps = new Map();\n      }\n      if (this.string_maps.has(s)) {\n        return this.string_maps.get(s);\n      }\n      var offset = this.createString(s);\n      this.string_maps.set(s, offset);\n      return offset;\n    }\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\r\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\n  }, {\n    key: \"createString\",\n    value: function createString(s) {\n      if (!s) {\n        return 0;\n      }\n      var utf8;\n      if (s instanceof Uint8Array) {\n        utf8 = s;\n      } else {\n        utf8 = [];\n        var i = 0;\n        while (i < s.length) {\n          var codePoint = void 0;\n          // Decode UTF-16\n          var a = s.charCodeAt(i++);\n          if (a < 0xD800 || a >= 0xDC00) {\n            codePoint = a;\n          } else {\n            var b = s.charCodeAt(i++);\n            codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n          }\n          // Encode UTF-8\n          if (codePoint < 0x80) {\n            utf8.push(codePoint);\n          } else {\n            if (codePoint < 0x800) {\n              utf8.push(codePoint >> 6 & 0x1F | 0xC0);\n            } else {\n              if (codePoint < 0x10000) {\n                utf8.push(codePoint >> 12 & 0x0F | 0xE0);\n              } else {\n                utf8.push(codePoint >> 18 & 0x07 | 0xF0, codePoint >> 12 & 0x3F | 0x80);\n              }\n              utf8.push(codePoint >> 6 & 0x3F | 0x80);\n            }\n            utf8.push(codePoint & 0x3F | 0x80);\n          }\n        }\n      }\n      this.addInt8(0);\n      this.startVector(1, utf8.length, 1);\n      this.bb.setPosition(this.space -= utf8.length);\n      for (var _i = 0, offset = this.space, bytes = this.bb.bytes(); _i < utf8.length; _i++) {\n        bytes[offset++] = utf8[_i];\n      }\n      return this.endVector();\n    }\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */\n  }, {\n    key: \"createLong\",\n    value: function createLong(low, high) {\n      return Long.create(low, high);\n    }\n    /**\r\n     * A helper function to pack an object\r\n     *\r\n     * @returns offset of obj\r\n     */\n  }, {\n    key: \"createObjectOffset\",\n    value: function createObjectOffset(obj) {\n      if (obj === null) {\n        return 0;\n      }\n      if (typeof obj === 'string') {\n        return this.createString(obj);\n      } else {\n        return obj.pack(this);\n      }\n    }\n    /**\r\n     * A helper function to pack a list of object\r\n     *\r\n     * @returns list of offsets of each non null object\r\n     */\n  }, {\n    key: \"createObjectOffsetList\",\n    value: function createObjectOffsetList(list) {\n      var ret = [];\n      for (var i = 0; i < list.length; ++i) {\n        var val = list[i];\n        if (val !== null) {\n          ret.push(this.createObjectOffset(val));\n        } else {\n          throw new Error('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');\n        }\n      }\n      return ret;\n    }\n  }, {\n    key: \"createStructOffsetList\",\n    value: function createStructOffsetList(list, startFunc) {\n      startFunc(this, list.length);\n      this.createObjectOffsetList(list);\n      return this.endVector();\n    }\n  }], [{\n    key: \"growByteBuffer\",\n    value: function growByteBuffer(bb) {\n      var old_buf_size = bb.capacity();\n      // Ensure we don't grow beyond what fits in an int.\n      if (old_buf_size & 0xC0000000) {\n        throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n      }\n      var new_buf_size = old_buf_size << 1;\n      var nbb = ByteBuffer.allocate(new_buf_size);\n      nbb.setPosition(new_buf_size - old_buf_size);\n      nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n      return nbb;\n    }\n  }]);\n  return Builder;\n}();","map":{"version":3,"names":["ByteBuffer","SIZEOF_SHORT","SIZE_PREFIX_LENGTH","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Long","Builder","opt_initial_size","_classCallCheck","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","string_maps","initial_size","bb","allocate","space","_createClass","key","value","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","i","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","equals","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","startObject","numfields","endObject","vtableloc","trimmed_size","standard_fields","len","existing_vtable","vt1","outer_loop","length","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","charCodeAt","setPosition","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","ok","startVector","elem_size","num_elems","alignment","endVector","createSharedString","s","Map","has","get","createString","set","utf8","Uint8Array","codePoint","a","b","createLong","low","high","create","createObjectOffset","pack","createObjectOffsetList","list","ret","val","createStructOffsetList","startFunc","new_buf_size","nbb"],"sources":["C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/flatbuffers/mjs/builder.js"],"sourcesContent":["import { ByteBuffer } from \"./byte-buffer\";\r\nimport { SIZEOF_SHORT, SIZE_PREFIX_LENGTH, SIZEOF_INT, FILE_IDENTIFIER_LENGTH } from \"./constants\";\r\nimport { Long } from \"./long\";\r\nexport class Builder {\r\n    /**\r\n     * Create a FlatBufferBuilder.\r\n     */\r\n    constructor(opt_initial_size) {\r\n        /** Minimum alignment encountered so far. */\r\n        this.minalign = 1;\r\n        /** The vtable for the current table. */\r\n        this.vtable = null;\r\n        /** The amount of fields we're actually using. */\r\n        this.vtable_in_use = 0;\r\n        /** Whether we are currently serializing a table. */\r\n        this.isNested = false;\r\n        /** Starting offset of the current struct/table. */\r\n        this.object_start = 0;\r\n        /** List of offsets of all vtables. */\r\n        this.vtables = [];\r\n        /** For the current vector being built. */\r\n        this.vector_num_elems = 0;\r\n        /** False omits default values from the serialized data */\r\n        this.force_defaults = false;\r\n        this.string_maps = null;\r\n        let initial_size;\r\n        if (!opt_initial_size) {\r\n            initial_size = 1024;\r\n        }\r\n        else {\r\n            initial_size = opt_initial_size;\r\n        }\r\n        /**\r\n         * @type {ByteBuffer}\r\n         * @private\r\n         */\r\n        this.bb = ByteBuffer.allocate(initial_size);\r\n        this.space = initial_size;\r\n    }\r\n    clear() {\r\n        this.bb.clear();\r\n        this.space = this.bb.capacity();\r\n        this.minalign = 1;\r\n        this.vtable = null;\r\n        this.vtable_in_use = 0;\r\n        this.isNested = false;\r\n        this.object_start = 0;\r\n        this.vtables = [];\r\n        this.vector_num_elems = 0;\r\n        this.force_defaults = false;\r\n        this.string_maps = null;\r\n    }\r\n    /**\r\n     * In order to save space, fields that are set to their default value\r\n     * don't get serialized into the buffer. Forcing defaults provides a\r\n     * way to manually disable this optimization.\r\n     *\r\n     * @param forceDefaults true always serializes default values\r\n     */\r\n    forceDefaults(forceDefaults) {\r\n        this.force_defaults = forceDefaults;\r\n    }\r\n    /**\r\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\r\n     * called finish(). The actual data starts at the ByteBuffer's current position,\r\n     * not necessarily at 0.\r\n     */\r\n    dataBuffer() {\r\n        return this.bb;\r\n    }\r\n    /**\r\n     * Get the bytes representing the FlatBuffer. Only call this after you've\r\n     * called finish().\r\n     */\r\n    asUint8Array() {\r\n        return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\r\n    }\r\n    /**\r\n     * Prepare to write an element of `size` after `additional_bytes` have been\r\n     * written, e.g. if you write a string, you need to align such the int length\r\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\r\n     * you need to do is alignment, `additional_bytes` will be 0.\r\n     *\r\n     * @param size This is the of the new element to write\r\n     * @param additional_bytes The padding size\r\n     */\r\n    prep(size, additional_bytes) {\r\n        // Track the biggest thing we've ever aligned to.\r\n        if (size > this.minalign) {\r\n            this.minalign = size;\r\n        }\r\n        // Find the amount of alignment needed such that `size` is properly\r\n        // aligned after `additional_bytes`\r\n        const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\r\n        // Reallocate the buffer if needed.\r\n        while (this.space < align_size + size + additional_bytes) {\r\n            const old_buf_size = this.bb.capacity();\r\n            this.bb = Builder.growByteBuffer(this.bb);\r\n            this.space += this.bb.capacity() - old_buf_size;\r\n        }\r\n        this.pad(align_size);\r\n    }\r\n    pad(byte_size) {\r\n        for (let i = 0; i < byte_size; i++) {\r\n            this.bb.writeInt8(--this.space, 0);\r\n        }\r\n    }\r\n    writeInt8(value) {\r\n        this.bb.writeInt8(this.space -= 1, value);\r\n    }\r\n    writeInt16(value) {\r\n        this.bb.writeInt16(this.space -= 2, value);\r\n    }\r\n    writeInt32(value) {\r\n        this.bb.writeInt32(this.space -= 4, value);\r\n    }\r\n    writeInt64(value) {\r\n        this.bb.writeInt64(this.space -= 8, value);\r\n    }\r\n    writeFloat32(value) {\r\n        this.bb.writeFloat32(this.space -= 4, value);\r\n    }\r\n    writeFloat64(value) {\r\n        this.bb.writeFloat64(this.space -= 8, value);\r\n    }\r\n    /**\r\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int8` to add the the buffer.\r\n     */\r\n    addInt8(value) {\r\n        this.prep(1, 0);\r\n        this.writeInt8(value);\r\n    }\r\n    /**\r\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int16` to add the the buffer.\r\n     */\r\n    addInt16(value) {\r\n        this.prep(2, 0);\r\n        this.writeInt16(value);\r\n    }\r\n    /**\r\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int32` to add the the buffer.\r\n     */\r\n    addInt32(value) {\r\n        this.prep(4, 0);\r\n        this.writeInt32(value);\r\n    }\r\n    /**\r\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int64` to add the the buffer.\r\n     */\r\n    addInt64(value) {\r\n        this.prep(8, 0);\r\n        this.writeInt64(value);\r\n    }\r\n    /**\r\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float32` to add the the buffer.\r\n     */\r\n    addFloat32(value) {\r\n        this.prep(4, 0);\r\n        this.writeFloat32(value);\r\n    }\r\n    /**\r\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float64` to add the the buffer.\r\n     */\r\n    addFloat64(value) {\r\n        this.prep(8, 0);\r\n        this.writeFloat64(value);\r\n    }\r\n    addFieldInt8(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt8(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt16(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt16(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt32(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addInt32(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldInt64(voffset, value, defaultValue) {\r\n        if (this.force_defaults || !value.equals(defaultValue)) {\r\n            this.addInt64(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldFloat32(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addFloat32(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldFloat64(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addFloat64(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    addFieldOffset(voffset, value, defaultValue) {\r\n        if (this.force_defaults || value != defaultValue) {\r\n            this.addOffset(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    /**\r\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\r\n     */\r\n    addFieldStruct(voffset, value, defaultValue) {\r\n        if (value != defaultValue) {\r\n            this.nested(value);\r\n            this.slot(voffset);\r\n        }\r\n    }\r\n    /**\r\n     * Structures are always stored inline, they need to be created right\r\n     * where they're used.  You'll get this assertion failure if you\r\n     * created it elsewhere.\r\n     */\r\n    nested(obj) {\r\n        if (obj != this.offset()) {\r\n            throw new Error('FlatBuffers: struct must be serialized inline.');\r\n        }\r\n    }\r\n    /**\r\n     * Should not be creating any other object, string or vector\r\n     * while an object is being constructed\r\n     */\r\n    notNested() {\r\n        if (this.isNested) {\r\n            throw new Error('FlatBuffers: object serialization must not be nested.');\r\n        }\r\n    }\r\n    /**\r\n     * Set the current vtable at `voffset` to the current location in the buffer.\r\n     */\r\n    slot(voffset) {\r\n        if (this.vtable !== null)\r\n            this.vtable[voffset] = this.offset();\r\n    }\r\n    /**\r\n     * @returns Offset relative to the end of the buffer.\r\n     */\r\n    offset() {\r\n        return this.bb.capacity() - this.space;\r\n    }\r\n    /**\r\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\r\n     * the end of the new buffer (since we build the buffer backwards).\r\n     *\r\n     * @param bb The current buffer with the existing data\r\n     * @returns A new byte buffer with the old data copied\r\n     * to it. The data is located at the end of the buffer.\r\n     *\r\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\r\n     * it a uint8Array we need to suppress the type check:\r\n     * @suppress {checkTypes}\r\n     */\r\n    static growByteBuffer(bb) {\r\n        const old_buf_size = bb.capacity();\r\n        // Ensure we don't grow beyond what fits in an int.\r\n        if (old_buf_size & 0xC0000000) {\r\n            throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\r\n        }\r\n        const new_buf_size = old_buf_size << 1;\r\n        const nbb = ByteBuffer.allocate(new_buf_size);\r\n        nbb.setPosition(new_buf_size - old_buf_size);\r\n        nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\r\n        return nbb;\r\n    }\r\n    /**\r\n     * Adds on offset, relative to where it will be written.\r\n     *\r\n     * @param offset The offset to add.\r\n     */\r\n    addOffset(offset) {\r\n        this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.\r\n        this.writeInt32(this.offset() - offset + SIZEOF_INT);\r\n    }\r\n    /**\r\n     * Start encoding a new object in the buffer.  Users will not usually need to\r\n     * call this directly. The FlatBuffers compiler will generate helper methods\r\n     * that call this method internally.\r\n     */\r\n    startObject(numfields) {\r\n        this.notNested();\r\n        if (this.vtable == null) {\r\n            this.vtable = [];\r\n        }\r\n        this.vtable_in_use = numfields;\r\n        for (let i = 0; i < numfields; i++) {\r\n            this.vtable[i] = 0; // This will push additional elements as needed\r\n        }\r\n        this.isNested = true;\r\n        this.object_start = this.offset();\r\n    }\r\n    /**\r\n     * Finish off writing the object that is under construction.\r\n     *\r\n     * @returns The offset to the object inside `dataBuffer`\r\n     */\r\n    endObject() {\r\n        if (this.vtable == null || !this.isNested) {\r\n            throw new Error('FlatBuffers: endObject called without startObject');\r\n        }\r\n        this.addInt32(0);\r\n        const vtableloc = this.offset();\r\n        // Trim trailing zeroes.\r\n        let i = this.vtable_in_use - 1;\r\n        // eslint-disable-next-line no-empty\r\n        for (; i >= 0 && this.vtable[i] == 0; i--) { }\r\n        const trimmed_size = i + 1;\r\n        // Write out the current vtable.\r\n        for (; i >= 0; i--) {\r\n            // Offset relative to the start of the table.\r\n            this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\r\n        }\r\n        const standard_fields = 2; // The fields below:\r\n        this.addInt16(vtableloc - this.object_start);\r\n        const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\r\n        this.addInt16(len);\r\n        // Search for an existing vtable that matches the current one.\r\n        let existing_vtable = 0;\r\n        const vt1 = this.space;\r\n        outer_loop: for (i = 0; i < this.vtables.length; i++) {\r\n            const vt2 = this.bb.capacity() - this.vtables[i];\r\n            if (len == this.bb.readInt16(vt2)) {\r\n                for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\r\n                    if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\r\n                        continue outer_loop;\r\n                    }\r\n                }\r\n                existing_vtable = this.vtables[i];\r\n                break;\r\n            }\r\n        }\r\n        if (existing_vtable) {\r\n            // Found a match:\r\n            // Remove the current vtable.\r\n            this.space = this.bb.capacity() - vtableloc;\r\n            // Point table to existing vtable.\r\n            this.bb.writeInt32(this.space, existing_vtable - vtableloc);\r\n        }\r\n        else {\r\n            // No match:\r\n            // Add the location of the current vtable to the list of vtables.\r\n            this.vtables.push(this.offset());\r\n            // Point table to current vtable.\r\n            this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\r\n        }\r\n        this.isNested = false;\r\n        return vtableloc;\r\n    }\r\n    /**\r\n     * Finalize a buffer, poiting to the given `root_table`.\r\n     */\r\n    finish(root_table, opt_file_identifier, opt_size_prefix) {\r\n        const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\r\n        if (opt_file_identifier) {\r\n            const file_identifier = opt_file_identifier;\r\n            this.prep(this.minalign, SIZEOF_INT +\r\n                FILE_IDENTIFIER_LENGTH + size_prefix);\r\n            if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\r\n                throw new Error('FlatBuffers: file identifier must be length ' +\r\n                    FILE_IDENTIFIER_LENGTH);\r\n            }\r\n            for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\r\n                this.writeInt8(file_identifier.charCodeAt(i));\r\n            }\r\n        }\r\n        this.prep(this.minalign, SIZEOF_INT + size_prefix);\r\n        this.addOffset(root_table);\r\n        if (size_prefix) {\r\n            this.addInt32(this.bb.capacity() - this.space);\r\n        }\r\n        this.bb.setPosition(this.space);\r\n    }\r\n    /**\r\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\r\n     */\r\n    finishSizePrefixed(root_table, opt_file_identifier) {\r\n        this.finish(root_table, opt_file_identifier, true);\r\n    }\r\n    /**\r\n     * This checks a required field has been set in a given table that has\r\n     * just been constructed.\r\n     */\r\n    requiredField(table, field) {\r\n        const table_start = this.bb.capacity() - table;\r\n        const vtable_start = table_start - this.bb.readInt32(table_start);\r\n        const ok = this.bb.readInt16(vtable_start + field) != 0;\r\n        // If this fails, the caller will show what field needs to be set.\r\n        if (!ok) {\r\n            throw new Error('FlatBuffers: field ' + field + ' must be set');\r\n        }\r\n    }\r\n    /**\r\n     * Start a new array/vector of objects.  Users usually will not call\r\n     * this directly. The FlatBuffers compiler will create a start/end\r\n     * method for vector types in generated code.\r\n     *\r\n     * @param elem_size The size of each element in the array\r\n     * @param num_elems The number of elements in the array\r\n     * @param alignment The alignment of the array\r\n     */\r\n    startVector(elem_size, num_elems, alignment) {\r\n        this.notNested();\r\n        this.vector_num_elems = num_elems;\r\n        this.prep(SIZEOF_INT, elem_size * num_elems);\r\n        this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\r\n    }\r\n    /**\r\n     * Finish off the creation of an array and all its elements. The array must be\r\n     * created with `startVector`.\r\n     *\r\n     * @returns The offset at which the newly created array\r\n     * starts.\r\n     */\r\n    endVector() {\r\n        this.writeInt32(this.vector_num_elems);\r\n        return this.offset();\r\n    }\r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has\r\n     * already been seen, we return the offset of the already written string\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createSharedString(s) {\r\n        if (!s) {\r\n            return 0;\r\n        }\r\n        if (!this.string_maps) {\r\n            this.string_maps = new Map();\r\n        }\r\n        if (this.string_maps.has(s)) {\r\n            return this.string_maps.get(s);\r\n        }\r\n        const offset = this.createString(s);\r\n        this.string_maps.set(s, offset);\r\n        return offset;\r\n    }\r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\r\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createString(s) {\r\n        if (!s) {\r\n            return 0;\r\n        }\r\n        let utf8;\r\n        if (s instanceof Uint8Array) {\r\n            utf8 = s;\r\n        }\r\n        else {\r\n            utf8 = [];\r\n            let i = 0;\r\n            while (i < s.length) {\r\n                let codePoint;\r\n                // Decode UTF-16\r\n                const a = s.charCodeAt(i++);\r\n                if (a < 0xD800 || a >= 0xDC00) {\r\n                    codePoint = a;\r\n                }\r\n                else {\r\n                    const b = s.charCodeAt(i++);\r\n                    codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\r\n                }\r\n                // Encode UTF-8\r\n                if (codePoint < 0x80) {\r\n                    utf8.push(codePoint);\r\n                }\r\n                else {\r\n                    if (codePoint < 0x800) {\r\n                        utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\r\n                    }\r\n                    else {\r\n                        if (codePoint < 0x10000) {\r\n                            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\r\n                        }\r\n                        else {\r\n                            utf8.push(((codePoint >> 18) & 0x07) | 0xF0, ((codePoint >> 12) & 0x3F) | 0x80);\r\n                        }\r\n                        utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\r\n                    }\r\n                    utf8.push((codePoint & 0x3F) | 0x80);\r\n                }\r\n            }\r\n        }\r\n        this.addInt8(0);\r\n        this.startVector(1, utf8.length, 1);\r\n        this.bb.setPosition(this.space -= utf8.length);\r\n        for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\r\n            bytes[offset++] = utf8[i];\r\n        }\r\n        return this.endVector();\r\n    }\r\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */\r\n    createLong(low, high) {\r\n        return Long.create(low, high);\r\n    }\r\n    /**\r\n     * A helper function to pack an object\r\n     *\r\n     * @returns offset of obj\r\n     */\r\n    createObjectOffset(obj) {\r\n        if (obj === null) {\r\n            return 0;\r\n        }\r\n        if (typeof obj === 'string') {\r\n            return this.createString(obj);\r\n        }\r\n        else {\r\n            return obj.pack(this);\r\n        }\r\n    }\r\n    /**\r\n     * A helper function to pack a list of object\r\n     *\r\n     * @returns list of offsets of each non null object\r\n     */\r\n    createObjectOffsetList(list) {\r\n        const ret = [];\r\n        for (let i = 0; i < list.length; ++i) {\r\n            const val = list[i];\r\n            if (val !== null) {\r\n                ret.push(this.createObjectOffset(val));\r\n            }\r\n            else {\r\n                throw new Error('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    createStructOffsetList(list, startFunc) {\r\n        startFunc(this, list.length);\r\n        this.createObjectOffsetList(list);\r\n        return this.endVector();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}