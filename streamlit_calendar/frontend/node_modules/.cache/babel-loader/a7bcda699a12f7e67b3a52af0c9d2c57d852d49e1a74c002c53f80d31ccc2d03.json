{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { DictionaryKind } from './dictionary-kind.mjs';\nimport { Int } from './int.mjs';\nexport var DictionaryEncoding = /*#__PURE__*/function () {\n  function DictionaryEncoding() {\n    _classCallCheck(this, DictionaryEncoding);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(DictionaryEncoding, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"id\",\n    value:\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     */\n    function id() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    /**\n     * The dictionary indices are constrained to be non-negative integers. If\n     * this field is null, the indices must be signed int32. To maximize\n     * cross-language compatibility and performance, implementations are\n     * recommended to prefer signed integer types over unsigned integer types\n     * and to avoid uint64 indices unless they are required by an application.\n     */\n  }, {\n    key: \"indexType\",\n    value: function indexType(obj) {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     */\n  }, {\n    key: \"isOrdered\",\n    value: function isOrdered() {\n      var offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n  }, {\n    key: \"dictionaryKind\",\n    value: function dictionaryKind() {\n      var offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;\n    }\n  }], [{\n    key: \"getRootAsDictionaryEncoding\",\n    value: function getRootAsDictionaryEncoding(bb, obj) {\n      return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsDictionaryEncoding\",\n    value: function getSizePrefixedRootAsDictionaryEncoding(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startDictionaryEncoding\",\n    value: function startDictionaryEncoding(builder) {\n      builder.startObject(4);\n    }\n  }, {\n    key: \"addId\",\n    value: function addId(builder, id) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n  }, {\n    key: \"addIndexType\",\n    value: function addIndexType(builder, indexTypeOffset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n  }, {\n    key: \"addIsOrdered\",\n    value: function addIsOrdered(builder, isOrdered) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n  }, {\n    key: \"addDictionaryKind\",\n    value: function addDictionaryKind(builder, dictionaryKind) {\n      builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n    }\n  }, {\n    key: \"endDictionaryEncoding\",\n    value: function endDictionaryEncoding(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }]);\n  return DictionaryEncoding;\n}();","map":{"version":3,"names":["flatbuffers","DictionaryKind","Int","DictionaryEncoding","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","id","offset","__offset","readInt64","createLong","indexType","obj","__indirect","isOrdered","readInt8","dictionaryKind","readInt16","DenseArray","getRootAsDictionaryEncoding","readInt32","position","getSizePrefixedRootAsDictionaryEncoding","setPosition","SIZE_PREFIX_LENGTH","startDictionaryEncoding","builder","startObject","addId","addFieldInt64","addIndexType","indexTypeOffset","addFieldOffset","addIsOrdered","addFieldInt8","addDictionaryKind","addFieldInt16","endDictionaryEncoding","endObject"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\dictionary-encoding.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { DictionaryKind } from './dictionary-kind.js';\nimport { Int } from './int.js';\n\n\nexport class DictionaryEncoding {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):DictionaryEncoding {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsDictionaryEncoding(bb:flatbuffers.ByteBuffer, obj?:DictionaryEncoding):DictionaryEncoding {\n  return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsDictionaryEncoding(bb:flatbuffers.ByteBuffer, obj?:DictionaryEncoding):DictionaryEncoding {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * The known dictionary id in the application where this data is used. In\n * the file or streaming formats, the dictionary ids are found in the\n * DictionaryBatch messages\n */\nid():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * The dictionary indices are constrained to be non-negative integers. If\n * this field is null, the indices must be signed int32. To maximize\n * cross-language compatibility and performance, implementations are\n * recommended to prefer signed integer types over unsigned integer types\n * and to avoid uint64 indices unless they are required by an application.\n */\nindexType(obj?:Int):Int|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\n/**\n * By default, dictionaries are not ordered, or the order does not have\n * semantic meaning. In some statistical, applications, dictionary-encoding\n * is used to represent ordered categorical data, and we provide a way to\n * preserve that metadata here\n */\nisOrdered():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\ndictionaryKind():DictionaryKind {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;\n}\n\nstatic startDictionaryEncoding(builder:flatbuffers.Builder) {\n  builder.startObject(4);\n}\n\nstatic addId(builder:flatbuffers.Builder, id:flatbuffers.Long) {\n  builder.addFieldInt64(0, id, builder.createLong(0, 0));\n}\n\nstatic addIndexType(builder:flatbuffers.Builder, indexTypeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, indexTypeOffset, 0);\n}\n\nstatic addIsOrdered(builder:flatbuffers.Builder, isOrdered:boolean) {\n  builder.addFieldInt8(2, +isOrdered, +false);\n}\n\nstatic addDictionaryKind(builder:flatbuffers.Builder, dictionaryKind:DictionaryKind) {\n  builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n}\n\nstatic endDictionaryEncoding(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}