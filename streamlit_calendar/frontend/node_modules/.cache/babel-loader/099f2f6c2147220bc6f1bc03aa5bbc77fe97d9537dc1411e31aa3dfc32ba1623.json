{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n */\nexport var FieldNode = /*#__PURE__*/function () {\n  function FieldNode() {\n    _classCallCheck(this, FieldNode);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(FieldNode, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.bb.readInt64(this.bb_pos);\n    }\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     */\n  }, {\n    key: \"nullCount\",\n    value: function nullCount() {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n  }], [{\n    key: \"sizeOf\",\n    value: function sizeOf() {\n      return 16;\n    }\n  }, {\n    key: \"createFieldNode\",\n    value: function createFieldNode(builder, length, null_count) {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n  }]);\n  return FieldNode;\n}();","map":{"version":3,"names":["FieldNode","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","length","readInt64","nullCount","sizeOf","createFieldNode","builder","null_count","prep","writeInt64","offset"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\field-node.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n */\nexport class FieldNode {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):FieldNode {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\n/**\n * The number of value slots in the Arrow array at this level of a nested\n * tree\n */\nlength():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos);\n}\n\n/**\n * The number of observed nulls. Fields with null_count == 0 may choose not\n * to write their physical validity bitmap out as a materialized buffer,\n * instead setting the length of the bitmap buffer to 0.\n */\nnullCount():flatbuffers.Long {\n  return this.bb!.readInt64(this.bb_pos + 8);\n}\n\nstatic sizeOf():number {\n  return 16;\n}\n\nstatic createFieldNode(builder:flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long):flatbuffers.Offset {\n  builder.prep(8, 16);\n  builder.writeInt64(null_count);\n  builder.writeInt64(length);\n  return builder.offset();\n}\n\n}\n"],"mappings":";;AAAA;AAIA;;;;;;;;;;;AAWA,WAAaA,SAAS;EAAtB,SAAAA,UAAA;IAAAC,eAAA,OAAAD,SAAA;IACE,KAAAE,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAmCZ;EAACC,YAAA,CAAAJ,SAAA;IAAAK,GAAA;IAAAC,KAAA,EAlCD,SAAAC,OAAOC,CAAQ,EAAEN,EAAyB;MACxC,IAAI,CAACC,MAAM,GAAGK,CAAC;MACf,IAAI,CAACN,EAAE,GAAGA,EAAE;MACZ,OAAO,IAAI;IACb;IAEA;;;;EAAA;IAAAG,GAAA;IAAAC,KAAA,EAIA,SAAAG,OAAA,EAAM;MACJ,OAAO,IAAI,CAACP,EAAG,CAACQ,SAAS,CAAC,IAAI,CAACP,MAAM,CAAC;IACxC;IAEA;;;;;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAKA,SAAAK,UAAA,EAAS;MACP,OAAO,IAAI,CAACT,EAAG,CAACQ,SAAS,CAAC,IAAI,CAACP,MAAM,GAAG,CAAC,CAAC;IAC5C;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAM,OAAA,EAAa;MACX,OAAO,EAAE;IACX;EAAC;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAO,gBAAuBC,OAA2B,EAAEL,MAAwB,EAAEM,UAA4B;MACxGD,OAAO,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;MACnBF,OAAO,CAACG,UAAU,CAACF,UAAU,CAAC;MAC9BD,OAAO,CAACG,UAAU,CAACR,MAAM,CAAC;MAC1B,OAAOK,OAAO,CAACI,MAAM,EAAE;IACzB;EAAC;EAAA,OAAAlB,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}