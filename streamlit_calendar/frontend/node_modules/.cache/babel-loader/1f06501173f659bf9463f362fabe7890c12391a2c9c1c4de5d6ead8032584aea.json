{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */\nimport * as flatbuffers from 'flatbuffers';\nimport { Schema as _Schema } from '../../fb/schema.mjs';\nimport { Int as _Int } from '../../fb/int.mjs';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.mjs';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.mjs';\nimport { Buffer as _Buffer } from '../../fb/buffer.mjs';\nimport { Field as _Field } from '../../fb/field.mjs';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.mjs';\nimport { Type } from '../../fb/type.mjs';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.mjs';\nimport { Endianness as _Endianness } from '../../fb/endianness.mjs';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.mjs';\nimport { Decimal as _Decimal } from '../../fb/decimal.mjs';\nimport { Date as _Date } from '../../fb/date.mjs';\nimport { Time as _Time } from '../../fb/time.mjs';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.mjs';\nimport { Interval as _Interval } from '../../fb/interval.mjs';\nimport { Union as _Union } from '../../fb/union.mjs';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.mjs';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.mjs';\nimport { Map as _Map } from '../../fb/map.mjs';\nimport { Message as _Message } from '../../fb/message.mjs';\nimport { Schema, Field } from '../../schema.mjs';\nimport { toUint8Array } from '../../util/buffer.mjs';\nimport { MessageHeader, MetadataVersion } from '../../enum.mjs';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.mjs';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.mjs';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type.mjs';\n/**\n * @ignore\n * @private\n **/\nexport var Message = /*#__PURE__*/function () {\n  function Message(bodyLength, version, headerType, header) {\n    _classCallCheck(this, Message);\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = function () {\n      return header;\n    });\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n  _createClass(Message, [{\n    key: \"type\",\n    get: function get() {\n      return this.headerType;\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"headerType\",\n    get: function get() {\n      return this._headerType;\n    }\n  }, {\n    key: \"bodyLength\",\n    get: function get() {\n      return this._bodyLength;\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      return this._createHeader();\n    }\n  }, {\n    key: \"isSchema\",\n    value: function isSchema() {\n      return this.headerType === MessageHeader.Schema;\n    }\n  }, {\n    key: \"isRecordBatch\",\n    value: function isRecordBatch() {\n      return this.headerType === MessageHeader.RecordBatch;\n    }\n  }, {\n    key: \"isDictionaryBatch\",\n    value: function isDictionaryBatch() {\n      return this.headerType === MessageHeader.DictionaryBatch;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(msg, headerType) {\n      var message = new Message(0, MetadataVersion.V4, headerType);\n      message._createHeader = messageHeaderFromJSON(msg, headerType);\n      return message;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      buf = new ByteBuffer(toUint8Array(buf));\n      var _message = _Message.getRootAsMessage(buf);\n      var bodyLength = _message.bodyLength();\n      var version = _message.version();\n      var headerType = _message.headerType();\n      var message = new Message(bodyLength, version, headerType);\n      message._createHeader = decodeMessageHeader(_message, headerType);\n      return message;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"encode\",\n    value: function encode(message) {\n      var b = new Builder();\n      var headerOffset = -1;\n      if (message.isSchema()) {\n        headerOffset = Schema.encode(b, message.header());\n      } else if (message.isRecordBatch()) {\n        headerOffset = RecordBatch.encode(b, message.header());\n      } else if (message.isDictionaryBatch()) {\n        headerOffset = DictionaryBatch.encode(b, message.header());\n      }\n      _Message.startMessage(b);\n      _Message.addVersion(b, MetadataVersion.V4);\n      _Message.addHeader(b, headerOffset);\n      _Message.addHeaderType(b, message.headerType);\n      _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n      _Message.finishMessageBuffer(b, _Message.endMessage(b));\n      return b.asUint8Array();\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(header) {\n      var bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (header instanceof Schema) {\n        return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n      }\n      if (header instanceof RecordBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n      }\n      if (header instanceof DictionaryBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n      }\n      throw new Error(\"Unrecognized Message header: \".concat(header));\n    }\n  }]);\n  return Message;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var RecordBatch = /*#__PURE__*/function () {\n  function RecordBatch(length, nodes, buffers) {\n    _classCallCheck(this, RecordBatch);\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n  _createClass(RecordBatch, [{\n    key: \"nodes\",\n    get: function get() {\n      return this._nodes;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this._buffers;\n    }\n  }]);\n  return RecordBatch;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var DictionaryBatch = /*#__PURE__*/function () {\n  function DictionaryBatch(data, id) {\n    var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    _classCallCheck(this, DictionaryBatch);\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n  _createClass(DictionaryBatch, [{\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }, {\n    key: \"isDelta\",\n    get: function get() {\n      return this._isDelta;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.data.length;\n    }\n  }, {\n    key: \"nodes\",\n    get: function get() {\n      return this.data.nodes;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this.data.buffers;\n    }\n  }]);\n  return DictionaryBatch;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var BufferRegion = /*#__PURE__*/_createClass(function BufferRegion(offset, length) {\n  _classCallCheck(this, BufferRegion);\n  this.offset = typeof offset === 'number' ? offset : offset.low;\n  this.length = typeof length === 'number' ? length : length.low;\n});\n/**\n * @ignore\n * @private\n **/\nexport var FieldNode = /*#__PURE__*/_createClass(function FieldNode(length, nullCount) {\n  _classCallCheck(this, FieldNode);\n  this.length = typeof length === 'number' ? length : length.low;\n  this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n});\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  var fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  if (batch.compression() !== null) {\n    throw new Error('Record batch compression not implemented');\n  }\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  var nodes = [];\n  for (var f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  var bufferRegions = [];\n  for (var b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  var fields = [];\n  for (var f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  var children = [];\n  for (var f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  var id;\n  var field;\n  var type;\n  var keys;\n  var dictType;\n  var dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  var data = new Map();\n  if (parent) {\n    for (var entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  var typeId = f.typeType();\n  switch (typeId) {\n    case Type['NONE']:\n      return new Null();\n    case Type['Null']:\n      return new Null();\n    case Type['Binary']:\n      return new Binary();\n    case Type['Utf8']:\n      return new Utf8();\n    case Type['Bool']:\n      return new Bool();\n    case Type['List']:\n      return new List((children || [])[0]);\n    case Type['Struct_']:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type['Int']:\n      {\n        var t = f.type(new _Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type['FloatingPoint']:\n      {\n        var _t = f.type(new _FloatingPoint());\n        return new Float(_t.precision());\n      }\n    case Type['Decimal']:\n      {\n        var _t2 = f.type(new _Decimal());\n        return new Decimal(_t2.scale(), _t2.precision(), _t2.bitWidth());\n      }\n    case Type['Date']:\n      {\n        var _t3 = f.type(new _Date());\n        return new Date_(_t3.unit());\n      }\n    case Type['Time']:\n      {\n        var _t4 = f.type(new _Time());\n        return new Time(_t4.unit(), _t4.bitWidth());\n      }\n    case Type['Timestamp']:\n      {\n        var _t5 = f.type(new _Timestamp());\n        return new Timestamp(_t5.unit(), _t5.timezone());\n      }\n    case Type['Interval']:\n      {\n        var _t6 = f.type(new _Interval());\n        return new Interval(_t6.unit());\n      }\n    case Type['Union']:\n      {\n        var _t7 = f.type(new _Union());\n        return new Union(_t7.mode(), _t7.typeIdsArray() || [], children || []);\n      }\n    case Type['FixedSizeBinary']:\n      {\n        var _t8 = f.type(new _FixedSizeBinary());\n        return new FixedSizeBinary(_t8.byteWidth());\n      }\n    case Type['FixedSizeList']:\n      {\n        var _t9 = f.type(new _FixedSizeList());\n        return new FixedSizeList(_t9.listSize(), (children || [])[0]);\n      }\n    case Type['Map']:\n      {\n        var _t10 = f.type(new _Map());\n        return new Map_((children || [])[0], _t10.keysSorted());\n      }\n  }\n  throw new Error(\"Unrecognized type: \\\"\".concat(Type[typeId], \"\\\" (\").concat(typeId, \")\"));\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  var fieldOffsets = schema.fields.map(function (f) {\n    return Field.encode(b, f);\n  });\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  var fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  var metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, _toConsumableArray(schema.metadata).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  var nameOffset = -1;\n  var typeOffset = -1;\n  var dictionaryOffset = -1;\n  var type = field.type;\n  var typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  var childOffsets = (type.children || []).map(function (f) {\n    return Field.encode(b, f);\n  });\n  var childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, _toConsumableArray(field.metadata).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  var nodes = recordBatch.nodes || [];\n  var buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  var _iterator = _createForOfIteratorHelper(nodes.slice().reverse()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var n = _step.value;\n      FieldNode.encode(b, n);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  var _iterator2 = _createForOfIteratorHelper(buffers.slice().reverse()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var b_ = _step2.value;\n      BufferRegion.encode(b, b_);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  var dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nvar platformIsLittleEndian = function () {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"names":["flatbuffers","Schema","_Schema","Int","_Int","RecordBatch","_RecordBatch","DictionaryBatch","_DictionaryBatch","Buffer","_Buffer","Field","_Field","FieldNode","_FieldNode","Type","KeyValue","_KeyValue","Endianness","_Endianness","FloatingPoint","_FloatingPoint","Decimal","_Decimal","Date","_Date","Time","_Time","Timestamp","_Timestamp","Interval","_Interval","Union","_Union","FixedSizeBinary","_FixedSizeBinary","FixedSizeList","_FixedSizeList","Map","_Map","Message","_Message","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","DataType","Dictionary","Utf8","Binary","List","Map_","Struct","Bool","Null","Float","Date_","Int32","bodyLength","version","headerType","header","_classCallCheck","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","_createClass","key","get","value","isSchema","isRecordBatch","isDictionaryBatch","fromJSON","msg","message","V4","messageHeaderFromJSON","decode","buf","_message","getRootAsMessage","decodeMessageHeader","encode","b","headerOffset","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","from","arguments","length","undefined","Error","concat","nodes","buffers","_nodes","_buffers","_length","data","id","isDelta","_data","_isDelta","_id","BufferRegion","offset","nullCount","type","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","fields","decodeSchemaFields","decodeCustomMetadata","batch","compression","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","parent","entry","Math","trunc","customMetadataLength","customMetadata","_type","isSigned","bitWidth","typeId","typeType","t","precision","scale","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","_toConsumableArray","_ref","_ref2","_slicedToArray","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","_ref3","_ref4","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","_iterator","_createForOfIteratorHelper","slice","reverse","_step","s","done","err","e","nodesVectorOffset","endVector","startBuffersVector","_iterator2","_step2","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\ipc\\metadata\\message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Schema as _Schema } from '../../fb/schema.js';\nimport { Int as _Int } from '../../fb/int.js';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.js';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.js';\nimport { Buffer as _Buffer } from '../../fb/buffer.js';\nimport { Field as _Field } from '../../fb/field.js';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.js';\nimport { DictionaryEncoding as _DictionaryEncoding } from '../../fb/dictionary-encoding.js';\nimport { Type } from '../../fb/type.js';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.js';\nimport { Endianness as _Endianness } from '../../fb/endianness.js';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.js';\nimport { Decimal as _Decimal } from '../../fb/decimal.js';\nimport { Date as _Date } from '../../fb/date.js';\nimport { Time as _Time } from '../../fb/time.js';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.js';\nimport { Interval as _Interval } from '../../fb/interval.js';\nimport { Union as _Union } from '../../fb/union.js';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.js';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.js';\nimport { Map as _Map } from '../../fb/map.js';\nimport { Message as _Message } from '../../fb/message.js';\n\nimport { Schema, Field } from '../../schema.js';\nimport { toUint8Array } from '../../util/buffer.js';\nimport { ArrayBufferViewInput } from '../../util/buffer.js';\nimport { MessageHeader, MetadataVersion } from '../../enum.js';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.js';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.js';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type.js';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        const b = new Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    declare protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    if (batch.compression() !== null) {\n        throw new Error('Record batch compression not implemented');\n    }\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n            // If this Arrow buffer was written before version 4,\n            // advance the buffer's bb_pos 8 bytes to skip past\n            // the now-removed page_id field\n            if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type['NONE']: return new Null();\n        case Type['Null']: return new Null();\n        case Type['Binary']: return new Binary();\n        case Type['Utf8']: return new Utf8();\n        case Type['Bool']: return new Bool();\n        case Type['List']: return new List((children || [])[0]);\n        case Type['Struct_']: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type['Int']: {\n            const t = f.type(new _Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type['FloatingPoint']: {\n            const t = f.type(new _FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type['Decimal']: {\n            const t = f.type(new _Decimal())!;\n            return new Decimal(t.scale(), t.precision(), t.bitWidth());\n        }\n        case Type['Date']: {\n            const t = f.type(new _Date())!;\n            return new Date_(t.unit());\n        }\n        case Type['Time']: {\n            const t = f.type(new _Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type['Timestamp']: {\n            const t = f.type(new _Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type['Interval']: {\n            const t = f.type(new _Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type['Union']: {\n            const t = f.type(new _Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type['FixedSizeBinary']: {\n            const t = f.type(new _FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type['FixedSizeList']: {\n            const t = f.type(new _FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type['Map']: {\n            const t = f.type(new _Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    const type = field.type;\n    let typeId: Type = <any>field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n    : T extends MessageHeader.RecordBatch ? RecordBatch\n    : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}