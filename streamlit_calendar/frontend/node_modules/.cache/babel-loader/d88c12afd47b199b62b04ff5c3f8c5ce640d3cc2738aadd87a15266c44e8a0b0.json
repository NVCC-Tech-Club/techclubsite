{"ast":null,"code":"import _classCallCheck from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erden/OneDrive/Documents/GitHub/techclubsite/streamlit_calendar/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * ----------------------------------------------------------------------\n * Data structures for dense tensors\n * Shape data for a single axis in a tensor\n */\nexport var TensorDim = /*#__PURE__*/function () {\n  function TensorDim() {\n    _classCallCheck(this, TensorDim);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(TensorDim, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }, {\n    key: \"size\",\n    value:\n    /**\n     * Length of dimension\n     */\n    function size() {\n      var offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n  }, {\n    key: \"name\",\n    value: function name(optionalEncoding) {\n      var offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n  }], [{\n    key: \"getRootAsTensorDim\",\n    value: function getRootAsTensorDim(bb, obj) {\n      return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsTensorDim\",\n    value: function getSizePrefixedRootAsTensorDim(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startTensorDim\",\n    value: function startTensorDim(builder) {\n      builder.startObject(2);\n    }\n  }, {\n    key: \"addSize\",\n    value: function addSize(builder, size) {\n      builder.addFieldInt64(0, size, builder.createLong(0, 0));\n    }\n  }, {\n    key: \"addName\",\n    value: function addName(builder, nameOffset) {\n      builder.addFieldOffset(1, nameOffset, 0);\n    }\n  }, {\n    key: \"endTensorDim\",\n    value: function endTensorDim(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createTensorDim\",\n    value: function createTensorDim(builder, size, nameOffset) {\n      TensorDim.startTensorDim(builder);\n      TensorDim.addSize(builder, size);\n      TensorDim.addName(builder, nameOffset);\n      return TensorDim.endTensorDim(builder);\n    }\n  }]);\n  return TensorDim;\n}();","map":{"version":3,"names":["flatbuffers","TensorDim","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","size","offset","__offset","readInt64","createLong","name","optionalEncoding","__string","getRootAsTensorDim","obj","readInt32","position","getSizePrefixedRootAsTensorDim","setPosition","SIZE_PREFIX_LENGTH","startTensorDim","builder","startObject","addSize","addFieldInt64","addName","nameOffset","addFieldOffset","endTensorDim","endObject","createTensorDim"],"sources":["C:\\Users\\erden\\OneDrive\\Documents\\GitHub\\techclubsite\\streamlit_calendar\\frontend\\node_modules\\apache-arrow\\src\\fb\\tensor-dim.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for dense tensors\n * Shape data for a single axis in a tensor\n */\nexport class TensorDim {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n__init(i:number, bb:flatbuffers.ByteBuffer):TensorDim {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsTensorDim(bb:flatbuffers.ByteBuffer, obj?:TensorDim):TensorDim {\n  return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsTensorDim(bb:flatbuffers.ByteBuffer, obj?:TensorDim):TensorDim {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new TensorDim()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\n/**\n * Length of dimension\n */\nsize():flatbuffers.Long {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n}\n\n/**\n * Name of the dimension, optional\n */\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startTensorDim(builder:flatbuffers.Builder) {\n  builder.startObject(2);\n}\n\nstatic addSize(builder:flatbuffers.Builder, size:flatbuffers.Long) {\n  builder.addFieldInt64(0, size, builder.createLong(0, 0));\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, nameOffset, 0);\n}\n\nstatic endTensorDim(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createTensorDim(builder:flatbuffers.Builder, size:flatbuffers.Long, nameOffset:flatbuffers.Offset):flatbuffers.Offset {\n  TensorDim.startTensorDim(builder);\n  TensorDim.addSize(builder, size);\n  TensorDim.addName(builder, nameOffset);\n  return TensorDim.endTensorDim(builder);\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}